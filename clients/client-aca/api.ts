/* tslint:disable */
/* eslint-disable */
/**
 * AivCloudApi
 * Affinidi AivCloudApi Structure
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 * missing data that could not be found in the vault
 * @export
 * @interface CredentialsDto
 */
export interface CredentialsDto {
  /**
   * signed VCs
   * @type {object}
   * @memberof CredentialsDto
   */
  signedCredential?: object;
}
/**
 * the object conatins the presentation definition
 * @export
 * @interface DataRequest
 */
export interface DataRequest {
  /**
   * the presentation definition
   * @type {object}
   * @memberof DataRequest
   */
  presentationDefinition: object;
}
/**
 * the response body
 * @export
 * @interface DataResponse
 */
export interface DataResponse {
  /**
   * list of schemas which are missing to complete request
   * @type {Array<MissingDataSchemasDto>}
   * @memberof DataResponse
   */
  missingDataSchemas: Array<MissingDataSchemasDto>;
  /**
   * list of VCs that are found
   * @type {Array<CredentialsDto>}
   * @memberof DataResponse
   */
  credentials: Array<CredentialsDto>;
}
/**
 * The name of $.path that is missing from the vault
 * @export
 * @interface MissingDataSchemasDto
 */
export interface MissingDataSchemasDto {
  /**
   * the name of missing schema in vault
   * @type {object}
   * @memberof MissingDataSchemasDto
   */
  schemaList?: object;
}
/**
 * Error message when something goes wrong
 * @export
 * @interface ServiceErrorResponse
 */
export interface ServiceErrorResponse {
  /**
   * unique id for correlating this specific error to logs
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  debugId: string;
  /**
   * name of the error
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  name: string;
  /**
   * backwards compatible Affinidi error code
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  code: string;
  /**
   * details of error
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof ServiceErrorResponse
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}
/**
 *
 * @export
 * @interface ServiceErrorResponseDetailsInner
 */
export interface ServiceErrorResponseDetailsInner {
  /**
   * what went wrong
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  issue: string;
  /**
   * the fields that caused the error
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  field?: string;
  /**
   * expected values of the errored field
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  value?: string;
  /**
   * location of error
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  location?: ServiceErrorResponseDetailsInnerLocationEnum;
}

export const ServiceErrorResponseDetailsInnerLocationEnum = {
  Body: 'BODY',
  Path: 'PATH',
  Query: 'QUERY',
} as const;

export type ServiceErrorResponseDetailsInnerLocationEnum =
  (typeof ServiceErrorResponseDetailsInnerLocationEnum)[keyof typeof ServiceErrorResponseDetailsInnerLocationEnum];

/**
 * SignUserDataApi - axios parameter creator
 * @export
 */
export const SignUserDataApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * get signed data based on PD
     * @summary get signed data
     * @param {DataRequest} dataRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataRequest: async (
      dataRequest: DataRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'dataRequest' is not null or undefined
      assertParamExists('dataRequest', 'dataRequest', dataRequest);
      const localVarPath = `/v1/data-request`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ConsumerTokenAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'authorization',
        configuration
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        dataRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SignUserDataApi - functional programming interface
 * @export
 */
export const SignUserDataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    SignUserDataApiAxiosParamCreator(configuration);
  return {
    /**
     * get signed data based on PD
     * @summary get signed data
     * @param {DataRequest} dataRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataRequest(
      dataRequest: DataRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataRequest(
        dataRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['SignUserDataApi.dataRequest']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * SignUserDataApi - factory interface
 * @export
 */
export const SignUserDataApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SignUserDataApiFp(configuration);
  return {
    /**
     * get signed data based on PD
     * @summary get signed data
     * @param {DataRequest} dataRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataRequest(
      dataRequest: DataRequest,
      options?: any
    ): AxiosPromise<DataResponse> {
      return localVarFp
        .dataRequest(dataRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SignUserDataApi - object-oriented interface
 * @export
 * @class SignUserDataApi
 * @extends {BaseAPI}
 */
export class SignUserDataApi extends BaseAPI {
  /**
   * get signed data based on PD
   * @summary get signed data
   * @param {DataRequest} dataRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignUserDataApi
   */
  public dataRequest(
    dataRequest: DataRequest,
    options?: RawAxiosRequestConfig
  ) {
    return SignUserDataApiFp(this.configuration)
      .dataRequest(dataRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
