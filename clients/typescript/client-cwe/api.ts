/* tslint:disable */
/* eslint-disable */
/**
 * CloudWalletEssentials
 * Cloud Wallet For Enterprise Structure
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nucleus.team@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 * wallet dto
 * @export
 * @interface CreateWalletResponse
 */
export interface CreateWalletResponse {
  /**
   *
   * @type {WalletDto}
   * @memberof CreateWalletResponse
   */
  wallet?: WalletDto;
}
/**
 *
 * @export
 * @interface EntityNotFoundError
 */
export interface EntityNotFoundError {
  /**
   *
   * @type {string}
   * @memberof EntityNotFoundError
   */
  name: EntityNotFoundErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof EntityNotFoundError
   */
  message: EntityNotFoundErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof EntityNotFoundError
   */
  httpStatusCode: EntityNotFoundErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof EntityNotFoundError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof EntityNotFoundError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const EntityNotFoundErrorNameEnum = {
  EntityNotFoundError: 'EntityNotFoundError',
} as const;

export type EntityNotFoundErrorNameEnum =
  (typeof EntityNotFoundErrorNameEnum)[keyof typeof EntityNotFoundErrorNameEnum];
export const EntityNotFoundErrorMessageEnum = {
  EntityNotFound: 'Entity not found',
} as const;

export type EntityNotFoundErrorMessageEnum =
  (typeof EntityNotFoundErrorMessageEnum)[keyof typeof EntityNotFoundErrorMessageEnum];
export const EntityNotFoundErrorHttpStatusCodeEnum = {
  NUMBER_404: 404,
} as const;

export type EntityNotFoundErrorHttpStatusCodeEnum =
  (typeof EntityNotFoundErrorHttpStatusCodeEnum)[keyof typeof EntityNotFoundErrorHttpStatusCodeEnum];

/**
 * DTO contains revocation list credential
 * @export
 * @interface GetRevocationListCredentialResultDto
 */
export interface GetRevocationListCredentialResultDto {
  /**
   *
   * @type {object}
   * @memberof GetRevocationListCredentialResultDto
   */
  revocationListCredential: object;
}
/**
 *
 * @export
 * @interface InvalidDidParameterError
 */
export interface InvalidDidParameterError {
  /**
   *
   * @type {string}
   * @memberof InvalidDidParameterError
   */
  name: InvalidDidParameterErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof InvalidDidParameterError
   */
  message: InvalidDidParameterErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof InvalidDidParameterError
   */
  httpStatusCode: InvalidDidParameterErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof InvalidDidParameterError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof InvalidDidParameterError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const InvalidDidParameterErrorNameEnum = {
  InvalidDidParameterError: 'InvalidDidParameterError',
} as const;

export type InvalidDidParameterErrorNameEnum =
  (typeof InvalidDidParameterErrorNameEnum)[keyof typeof InvalidDidParameterErrorNameEnum];
export const InvalidDidParameterErrorMessageEnum = {
  GivenDidInFieldToDidIsInvalidUseOnlyResolvableFormOfDid:
    'Given did in field "toDid" is invalid. Use only resolvable form of did.',
} as const;

export type InvalidDidParameterErrorMessageEnum =
  (typeof InvalidDidParameterErrorMessageEnum)[keyof typeof InvalidDidParameterErrorMessageEnum];
export const InvalidDidParameterErrorHttpStatusCodeEnum = {
  NUMBER_400: 400,
} as const;

export type InvalidDidParameterErrorHttpStatusCodeEnum =
  (typeof InvalidDidParameterErrorHttpStatusCodeEnum)[keyof typeof InvalidDidParameterErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface InvalidParameterError
 */
export interface InvalidParameterError {
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  name: InvalidParameterErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  message: InvalidParameterErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof InvalidParameterError
   */
  httpStatusCode: InvalidParameterErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof InvalidParameterError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const InvalidParameterErrorNameEnum = {
  InvalidParameterError: 'InvalidParameterError',
} as const;

export type InvalidParameterErrorNameEnum =
  (typeof InvalidParameterErrorNameEnum)[keyof typeof InvalidParameterErrorNameEnum];
export const InvalidParameterErrorMessageEnum = {
  InvalidParameterParam: 'Invalid parameter: ${param}.',
} as const;

export type InvalidParameterErrorMessageEnum =
  (typeof InvalidParameterErrorMessageEnum)[keyof typeof InvalidParameterErrorMessageEnum];
export const InvalidParameterErrorHttpStatusCodeEnum = {
  NUMBER_400: 400,
} as const;

export type InvalidParameterErrorHttpStatusCodeEnum =
  (typeof InvalidParameterErrorHttpStatusCodeEnum)[keyof typeof InvalidParameterErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface KeyNotFoundError
 */
export interface KeyNotFoundError {
  /**
   *
   * @type {string}
   * @memberof KeyNotFoundError
   */
  name: KeyNotFoundErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof KeyNotFoundError
   */
  message: KeyNotFoundErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof KeyNotFoundError
   */
  httpStatusCode: KeyNotFoundErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof KeyNotFoundError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof KeyNotFoundError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const KeyNotFoundErrorNameEnum = {
  KeyNotFoundError: 'KeyNotFoundError',
} as const;

export type KeyNotFoundErrorNameEnum =
  (typeof KeyNotFoundErrorNameEnum)[keyof typeof KeyNotFoundErrorNameEnum];
export const KeyNotFoundErrorMessageEnum = {
  KeyNotFound: 'Key not found',
} as const;

export type KeyNotFoundErrorMessageEnum =
  (typeof KeyNotFoundErrorMessageEnum)[keyof typeof KeyNotFoundErrorMessageEnum];
export const KeyNotFoundErrorHttpStatusCodeEnum = {
  NUMBER_500: 500,
} as const;

export type KeyNotFoundErrorHttpStatusCodeEnum =
  (typeof KeyNotFoundErrorHttpStatusCodeEnum)[keyof typeof KeyNotFoundErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  name: NotFoundErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  message: NotFoundErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof NotFoundError
   */
  httpStatusCode: NotFoundErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof NotFoundError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const NotFoundErrorNameEnum = {
  NotFoundError: 'NotFoundError',
} as const;

export type NotFoundErrorNameEnum =
  (typeof NotFoundErrorNameEnum)[keyof typeof NotFoundErrorNameEnum];
export const NotFoundErrorMessageEnum = {
  NotFoundParam: 'Not found: ${param}.',
} as const;

export type NotFoundErrorMessageEnum =
  (typeof NotFoundErrorMessageEnum)[keyof typeof NotFoundErrorMessageEnum];
export const NotFoundErrorHttpStatusCodeEnum = {
  NUMBER_404: 404,
} as const;

export type NotFoundErrorHttpStatusCodeEnum =
  (typeof NotFoundErrorHttpStatusCodeEnum)[keyof typeof NotFoundErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface OperationForbiddenError
 */
export interface OperationForbiddenError {
  /**
   *
   * @type {string}
   * @memberof OperationForbiddenError
   */
  name: OperationForbiddenErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof OperationForbiddenError
   */
  message: OperationForbiddenErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof OperationForbiddenError
   */
  httpStatusCode: OperationForbiddenErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof OperationForbiddenError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof OperationForbiddenError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const OperationForbiddenErrorNameEnum = {
  OperationForbiddenError: 'OperationForbiddenError',
} as const;

export type OperationForbiddenErrorNameEnum =
  (typeof OperationForbiddenErrorNameEnum)[keyof typeof OperationForbiddenErrorNameEnum];
export const OperationForbiddenErrorMessageEnum = {
  OperationForbiddenParam: 'Operation forbidden: ${param}.',
} as const;

export type OperationForbiddenErrorMessageEnum =
  (typeof OperationForbiddenErrorMessageEnum)[keyof typeof OperationForbiddenErrorMessageEnum];
export const OperationForbiddenErrorHttpStatusCodeEnum = {
  NUMBER_403: 403,
} as const;

export type OperationForbiddenErrorHttpStatusCodeEnum =
  (typeof OperationForbiddenErrorHttpStatusCodeEnum)[keyof typeof OperationForbiddenErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface RevokeCredentialInput
 */
export interface RevokeCredentialInput {
  /**
   *
   * @type {string}
   * @memberof RevokeCredentialInput
   */
  revocationReason?: string | null;
  /**
   *
   * @type {string}
   * @memberof RevokeCredentialInput
   */
  credentialId?: string;
}
/**
 *
 * @export
 * @interface ServiceErrorResponse
 */
export interface ServiceErrorResponse {
  /**
   * unique id for correlating this specific error to logs
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  debugId: string;
  /**
   * name of the error
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  name: string;
  /**
   * backwards compatible Affinidi error code
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  code: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof ServiceErrorResponse
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}
/**
 *
 * @export
 * @interface ServiceErrorResponseDetailsInner
 */
export interface ServiceErrorResponseDetailsInner {
  /**
   *
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  issue: string;
  /**
   *
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  field?: string;
  /**
   *
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  value?: string;
  /**
   *
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  location?: string;
}
/**
 * DTO contains params to sign credential
 * @export
 * @interface SignCredentialInputDto
 */
export interface SignCredentialInputDto {
  /**
   *
   * @type {object}
   * @memberof SignCredentialInputDto
   */
  unsignedCredential: object;
  /**
   *
   * @type {boolean}
   * @memberof SignCredentialInputDto
   */
  revocable?: boolean;
}
/**
 * DTO contains signed credential
 * @export
 * @interface SignCredentialResultDto
 */
export interface SignCredentialResultDto {
  /**
   *
   * @type {object}
   * @memberof SignCredentialResultDto
   */
  signedCredential: object;
}
/**
 * wallet dto
 * @export
 * @interface WalletDto
 */
export interface WalletDto {
  /**
   * id of the wallet in uuidV4 format
   * @type {string}
   * @memberof WalletDto
   */
  id?: string;
  /**
   * did of the wallet
   * @type {string}
   * @memberof WalletDto
   */
  did?: string;
  /**
   * ARI of the wallet
   * @type {string}
   * @memberof WalletDto
   */
  ari?: string;
  /**
   *
   * @type {Array<WalletDtoKeysInner>}
   * @memberof WalletDto
   */
  keys?: Array<WalletDtoKeysInner>;
}
/**
 *
 * @export
 * @interface WalletDtoKeysInner
 */
export interface WalletDtoKeysInner {
  /**
   * id of linked key
   * @type {string}
   * @memberof WalletDtoKeysInner
   */
  id?: string;
  /**
   * ari of linked key
   * @type {string}
   * @memberof WalletDtoKeysInner
   */
  ari?: string;
}
/**
 * list of wallets
 * @export
 * @interface WalletsListDto
 */
export interface WalletsListDto {
  /**
   *
   * @type {Array<WalletDto>}
   * @memberof WalletsListDto
   */
  wallets?: Array<WalletDto>;
}
