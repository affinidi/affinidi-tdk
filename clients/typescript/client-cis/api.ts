/* tslint:disable */
/* eslint-disable */
/**
 * CredentialIssuanceService
 * Affinidi Credential Issuance Service Structure
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nucleus.team@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base'

/**
 *
 * @export
 * @interface ActionForbiddenError
 */
export interface ActionForbiddenError {
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenError
   */
  name: ActionForbiddenErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenError
   */
  message: ActionForbiddenErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof ActionForbiddenError
   */
  httpStatusCode: ActionForbiddenErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenError
   */
  traceId: string
  /**
   *
   * @type {Array<ActionForbiddenErrorDetailsInner>}
   * @memberof ActionForbiddenError
   */
  details?: Array<ActionForbiddenErrorDetailsInner>
}

export const ActionForbiddenErrorNameEnum = {
  ActionForbiddenError: 'ActionForbiddenError',
} as const

export type ActionForbiddenErrorNameEnum =
  (typeof ActionForbiddenErrorNameEnum)[keyof typeof ActionForbiddenErrorNameEnum]
export const ActionForbiddenErrorMessageEnum = {
  PrincipalCanNotExecuteActionOnGivenResource:
    'Principal can not execute action on given resource',
} as const

export type ActionForbiddenErrorMessageEnum =
  (typeof ActionForbiddenErrorMessageEnum)[keyof typeof ActionForbiddenErrorMessageEnum]
export const ActionForbiddenErrorHttpStatusCodeEnum = {
  NUMBER_403: 403,
} as const

export type ActionForbiddenErrorHttpStatusCodeEnum =
  (typeof ActionForbiddenErrorHttpStatusCodeEnum)[keyof typeof ActionForbiddenErrorHttpStatusCodeEnum]

/**
 *
 * @export
 * @interface ActionForbiddenErrorDetailsInner
 */
export interface ActionForbiddenErrorDetailsInner {
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenErrorDetailsInner
   */
  issue: string
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenErrorDetailsInner
   */
  field?: string
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenErrorDetailsInner
   */
  value?: string
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenErrorDetailsInner
   */
  location?: string
}
/**
 *
 * @export
 * @interface CreateCredentialInput
 */
export interface CreateCredentialInput {
  /**
   * It is a String that identifies a Credential that is being requested to be issued.
   * @type {string}
   * @memberof CreateCredentialInput
   */
  credential_identifier: string
  /**
   *
   * @type {CredentialProof}
   * @memberof CreateCredentialInput
   */
  proof: CredentialProof
}
/**
 *
 * @export
 * @interface CreateIssuanceConfigInput
 */
export interface CreateIssuanceConfigInput {
  /**
   * Issuer Wallet id
   * @type {string}
   * @memberof CreateIssuanceConfigInput
   */
  issuerWalletId?: string
  /**
   * credential offer duration in second
   * @type {number}
   * @memberof CreateIssuanceConfigInput
   */
  credentialOfferDuration?: number
  /**
   * String identifying the format of this Credential, i.e., ldp_vc. Depending on the format value, the object contains further elements defining the type
   * @type {string}
   * @memberof CreateIssuanceConfigInput
   */
  format?: CreateIssuanceConfigInputFormatEnum
  /**
   *
   * @type {Array<CreateIssuanceConfigInputCredentialSupportedInner>}
   * @memberof CreateIssuanceConfigInput
   */
  credentialSupported: Array<CreateIssuanceConfigInputCredentialSupportedInner>
  /**
   * Issuer public information wallet may want to show to user during consent confirmation
   * @type {{ [key: string]: any; }}
   * @memberof CreateIssuanceConfigInput
   */
  issuerMetadata?: { [key: string]: any }
}

export const CreateIssuanceConfigInputFormatEnum = {
  LdpVc: 'ldp_vc',
} as const

export type CreateIssuanceConfigInputFormatEnum =
  (typeof CreateIssuanceConfigInputFormatEnum)[keyof typeof CreateIssuanceConfigInputFormatEnum]

/**
 *
 * @export
 * @interface CreateIssuanceConfigInputCredentialSupportedInner
 */
export interface CreateIssuanceConfigInputCredentialSupportedInner {
  /**
   * It is a String that identifies a Credential that is being requested to be issued.
   * @type {string}
   * @memberof CreateIssuanceConfigInputCredentialSupportedInner
   */
  credentialTypeId: string
  /**
   * credential jsonLdContextUrl
   * @type {string}
   * @memberof CreateIssuanceConfigInputCredentialSupportedInner
   */
  jsonSchemaUrl: string
  /**
   * credential jsonSchemaUrl
   * @type {string}
   * @memberof CreateIssuanceConfigInputCredentialSupportedInner
   */
  jsonLdContextUrl: string
}
/**
 *
 * @export
 * @interface CredentialOfferResponse
 */
export interface CredentialOfferResponse {
  /**
   * The URL of the Credential Issuer
   * @type {string}
   * @memberof CredentialOfferResponse
   */
  credential_issuer: string
  /**
   * Array of unique strings that each identify one of the keys in the name/value pairs stored in the credentialSupported
   * @type {Array<string>}
   * @memberof CredentialOfferResponse
   */
  credential_configuration_ids: Array<string>
  /**
   *
   * @type {CredentialOfferResponseGrants}
   * @memberof CredentialOfferResponse
   */
  grants: CredentialOfferResponseGrants
}
/**
 * Object indicating to the Wallet the Grant Types the Credential Issuer\'s Authorization Server is prepared to process for this Credential Offer.
 * @export
 * @interface CredentialOfferResponseGrants
 */
export interface CredentialOfferResponseGrants {
  /**
   *
   * @type {CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCode}
   * @memberof CredentialOfferResponseGrants
   */
  'urn:ietf:params:oauth:grant-type:pre-authorized_code': CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCode
}
/**
 * Grant type for `pre-authorized_code` flow
 * @export
 * @interface CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCode
 */
export interface CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCode {
  /**
   * pre authorized code to be exchanged with jwt token
   * @type {string}
   * @memberof CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCode
   */
  'pre-authorized_code': string
  /**
   *
   * @type {CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode}
   * @memberof CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCode
   */
  tx_code: CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode
}
/**
 * Object specifying whether the Authorization Server expects presentation of a Transaction Code by the End-User along with the Token Request in a Pre-Authorized Code Flow
 * @export
 * @interface CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode
 */
export interface CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode {
  /**
   * Integer specifying the length of the Transaction Code
   * @type {string}
   * @memberof CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode
   */
  length?: string
  /**
   * String specifying the input character set. Possible values are numeric (only digits) and text (any characters).
   * @type {string}
   * @memberof CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode
   */
  input_mode?: string
  /**
   * String containing guidance for the Holder of the Wallet on how to obtain the Transaction Code
   * @type {string}
   * @memberof CredentialOfferResponseGrantsUrnIetfParamsOauthGrantTypePreAuthorizedCodeTxCode
   */
  description?: string
}
/**
 * Object containing the proof of possession of the cryptographic key material the issued Credential would be bound to.
 * @export
 * @interface CredentialProof
 */
export interface CredentialProof {
  /**
   * String denoting the key proof type.
   * @type {string}
   * @memberof CredentialProof
   */
  proof_type: CredentialProofProofTypeEnum
  /**
   *
   * @type {string}
   * @memberof CredentialProof
   */
  jwt: string
}

export const CredentialProofProofTypeEnum = {
  Jwt: 'jwt',
} as const

export type CredentialProofProofTypeEnum =
  (typeof CredentialProofProofTypeEnum)[keyof typeof CredentialProofProofTypeEnum]

/**
 * @type CredentialResponse
 * @export
 */
export type CredentialResponse =
  | CredentialResponseDeferred
  | CredentialResponseImmediate

/**
 *
 * @export
 * @interface CredentialResponseDeferred
 */
export interface CredentialResponseDeferred {
  /**
   * String identifying a Deferred Issuance transaction. This claim is contained in the response if the Credential Issuer was unable to immediately issue the Credential.
   * @type {string}
   * @memberof CredentialResponseDeferred
   */
  transaction_id: string
  /**
   * String containing a nonce to be used when creating a proof of possession of the key proof
   * @type {string}
   * @memberof CredentialResponseDeferred
   */
  c_nonce: string
  /**
   * Lifetime in seconds of the c_nonce
   * @type {number}
   * @memberof CredentialResponseDeferred
   */
  c_nonce_expires_in: number
}
/**
 *
 * @export
 * @interface CredentialResponseImmediate
 */
export interface CredentialResponseImmediate {
  /**
   * Issued Credential, It can be a string or an object, depending on the Credential format. default format  is `ldp_vc`.
   * @type {{ [key: string]: any; }}
   * @memberof CredentialResponseImmediate
   */
  credential: { [key: string]: any }
  /**
   * String containing a nonce to be used when creating a proof of possession of the key proof
   * @type {string}
   * @memberof CredentialResponseImmediate
   */
  c_nonce: string
  /**
   * Lifetime in seconds of the c_nonce
   * @type {number}
   * @memberof CredentialResponseImmediate
   */
  c_nonce_expires_in: number
}
/**
 *
 * @export
 * @interface DeferredCredentialInput
 */
export interface DeferredCredentialInput {
  /**
   * String identifying a Deferred Issuance transaction. This claim is contained in the response if the Credential Issuer was unable to immediately issue the Credential.
   * @type {string}
   * @memberof DeferredCredentialInput
   */
  transaction_id: string
}
/**
 *
 * @export
 * @interface InvalidParameterError
 */
export interface InvalidParameterError {
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  name: InvalidParameterErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  message: InvalidParameterErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof InvalidParameterError
   */
  httpStatusCode: InvalidParameterErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  traceId: string
  /**
   *
   * @type {Array<ActionForbiddenErrorDetailsInner>}
   * @memberof InvalidParameterError
   */
  details?: Array<ActionForbiddenErrorDetailsInner>
}

export const InvalidParameterErrorNameEnum = {
  InvalidParameterError: 'InvalidParameterError',
} as const

export type InvalidParameterErrorNameEnum =
  (typeof InvalidParameterErrorNameEnum)[keyof typeof InvalidParameterErrorNameEnum]
export const InvalidParameterErrorMessageEnum = {
  InvalidParameterParam: 'Invalid parameter: ${param}.',
} as const

export type InvalidParameterErrorMessageEnum =
  (typeof InvalidParameterErrorMessageEnum)[keyof typeof InvalidParameterErrorMessageEnum]
export const InvalidParameterErrorHttpStatusCodeEnum = {
  NUMBER_400: 400,
} as const

export type InvalidParameterErrorHttpStatusCodeEnum =
  (typeof InvalidParameterErrorHttpStatusCodeEnum)[keyof typeof InvalidParameterErrorHttpStatusCodeEnum]

/**
 *
 * @export
 * @interface IssuanceConfig
 */
export interface IssuanceConfig {
  /**
   *
   * @type {string}
   * @memberof IssuanceConfig
   */
  id?: string
  /**
   * Issuer DID
   * @type {string}
   * @memberof IssuanceConfig
   */
  issuerDid?: string
  /**
   * Issuer Wallet id
   * @type {string}
   * @memberof IssuanceConfig
   */
  issuerWalletId?: string
  /**
   * credential offer duration in second
   * @type {number}
   * @memberof IssuanceConfig
   */
  credentialOfferDuration?: number
  /**
   * c_nonce duration in second
   * @type {number}
   * @memberof IssuanceConfig
   */
  cNonceDuration?: number
  /**
   * String identifying the format of this Credential, i.e., jwt_vc_json-ld or ldp_vc. Depending on the format value, the object contains further elements defining the type
   * @type {string}
   * @memberof IssuanceConfig
   */
  format?: IssuanceConfigFormatEnum
  /**
   * Issuer URI
   * @type {string}
   * @memberof IssuanceConfig
   */
  issuerUri?: string
  /**
   *
   * @type {Array<CreateIssuanceConfigInputCredentialSupportedInner>}
   * @memberof IssuanceConfig
   */
  credentialSupported?: Array<CreateIssuanceConfigInputCredentialSupportedInner>
  /**
   * Issuer public information wallet may want to show to user during consent confirmation
   * @type {{ [key: string]: any; }}
   * @memberof IssuanceConfig
   */
  issuerMetadata?: { [key: string]: any }
  /**
   *
   * @type {number}
   * @memberof IssuanceConfig
   */
  version?: number
}

export const IssuanceConfigFormatEnum = {
  LdpVc: 'ldp_vc',
} as const

export type IssuanceConfigFormatEnum =
  (typeof IssuanceConfigFormatEnum)[keyof typeof IssuanceConfigFormatEnum]

/**
 *
 * @export
 * @interface IssuanceStateResponse
 */
export interface IssuanceStateResponse {
  /**
   * Website\'s internal identifier. Website may use to get info about the status of issuance flow. If it is not provided, CIS will generate one.
   * @type {string}
   * @memberof IssuanceStateResponse
   */
  issuanceId: string
  /**
   * String describing the status of the issuance
   * @type {string}
   * @memberof IssuanceStateResponse
   */
  status: IssuanceStateResponseStatusEnum
}

export const IssuanceStateResponseStatusEnum = {
  Init: 'INIT',
  OfferDelivered: 'OFFER_DELIVERED',
  VcClaimed: 'VC_CLAIMED',
  Timeout: 'TIMEOUT',
} as const

export type IssuanceStateResponseStatusEnum =
  (typeof IssuanceStateResponseStatusEnum)[keyof typeof IssuanceStateResponseStatusEnum]

/**
 *
 * @export
 * @interface ListIssuanceResponse
 */
export interface ListIssuanceResponse {
  /**
   * The list of all issuances for the Project
   * @type {Array<string>}
   * @memberof ListIssuanceResponse
   */
  issuanceIds: Array<string>
}
/**
 *
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  name: NotFoundErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  message: NotFoundErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof NotFoundError
   */
  httpStatusCode: NotFoundErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  traceId: string
  /**
   *
   * @type {Array<ActionForbiddenErrorDetailsInner>}
   * @memberof NotFoundError
   */
  details?: Array<ActionForbiddenErrorDetailsInner>
}

export const NotFoundErrorNameEnum = {
  NotFoundError: 'NotFoundError',
} as const

export type NotFoundErrorNameEnum =
  (typeof NotFoundErrorNameEnum)[keyof typeof NotFoundErrorNameEnum]
export const NotFoundErrorMessageEnum = {
  NotFoundParam: 'Not found: ${param}.',
} as const

export type NotFoundErrorMessageEnum =
  (typeof NotFoundErrorMessageEnum)[keyof typeof NotFoundErrorMessageEnum]
export const NotFoundErrorHttpStatusCodeEnum = {
  NUMBER_404: 404,
} as const

export type NotFoundErrorHttpStatusCodeEnum =
  (typeof NotFoundErrorHttpStatusCodeEnum)[keyof typeof NotFoundErrorHttpStatusCodeEnum]

/**
 *
 * @export
 * @interface StartIssuanceInput
 */
export interface StartIssuanceInput {
  /**
   * Holder DID
   * @type {string}
   * @memberof StartIssuanceInput
   */
  holderDid: string
  /**
   * Website\'s internal identifier. Website may use to get info about the status of issuance flow. If it is not provided, CIS will generate one.
   * @type {string}
   * @memberof StartIssuanceInput
   */
  issuanceId?: string
  /**
   *
   * @type {StartIssuanceInputData}
   * @memberof StartIssuanceInput
   */
  data: StartIssuanceInputData
}
/**
 * Data to be included in issued credential
 * @export
 * @interface StartIssuanceInputData
 */
export interface StartIssuanceInputData {
  /**
   * It is a String that identifies a Credential that is being requested to be issued.
   * @type {string}
   * @memberof StartIssuanceInputData
   */
  credentialTypeId: string
  /**
   * Object of data to be included in the issued credential ,should  match the credential type
   * @type {{ [key: string]: any; }}
   * @memberof StartIssuanceInputData
   */
  credentialData: { [key: string]: any }
}
/**
 *
 * @export
 * @interface StartIssuanceResponse
 */
export interface StartIssuanceResponse {
  /**
   * URL where wallet can view offer details
   * @type {string}
   * @memberof StartIssuanceResponse
   */
  credentialOfferUri: string
  /**
   * One time transaction code generated by CIS
   * @type {string}
   * @memberof StartIssuanceResponse
   */
  txCode: string
  /**
   * Website\'s internal identifier. Website may use to get info about the status of issuance flow. If it is not provided, CIS will generate one.
   * @type {string}
   * @memberof StartIssuanceResponse
   */
  issuanceId: string
  /**
   * Expire time in seconds
   * @type {number}
   * @memberof StartIssuanceResponse
   */
  expiresIn: number
}
/**
 *
 * @export
 * @interface UpdateIssuanceConfigInput
 */
export interface UpdateIssuanceConfigInput {
  /**
   * Issuer Wallet id
   * @type {string}
   * @memberof UpdateIssuanceConfigInput
   */
  issuerWalletId?: string
  /**
   * credential offer duration in second
   * @type {number}
   * @memberof UpdateIssuanceConfigInput
   */
  credentialOfferDuration?: number
  /**
   * String identifying the format of this Credential, i.e., ldp_vc. Depending on the format value, the object contains further elements defining the type
   * @type {string}
   * @memberof UpdateIssuanceConfigInput
   */
  format?: UpdateIssuanceConfigInputFormatEnum
  /**
   * Issuer URI
   * @type {string}
   * @memberof UpdateIssuanceConfigInput
   */
  issuerUri?: string
  /**
   *
   * @type {Array<CreateIssuanceConfigInputCredentialSupportedInner>}
   * @memberof UpdateIssuanceConfigInput
   */
  credentialSupported?: Array<CreateIssuanceConfigInputCredentialSupportedInner>
  /**
   * Issuer public information wallet may want to show to user during consent confirmation
   * @type {{ [key: string]: any; }}
   * @memberof UpdateIssuanceConfigInput
   */
  issuerMetadata?: { [key: string]: any }
}

export const UpdateIssuanceConfigInputFormatEnum = {
  LdpVc: 'ldp_vc',
} as const

export type UpdateIssuanceConfigInputFormatEnum =
  (typeof UpdateIssuanceConfigInputFormatEnum)[keyof typeof UpdateIssuanceConfigInputFormatEnum]

/**
 *
 * @export
 * @interface WellKnownOpenIdCredentialIssuerResponse
 */
export interface WellKnownOpenIdCredentialIssuerResponse {
  [key: string]: any

  /**
   *
   * @type {string}
   * @memberof WellKnownOpenIdCredentialIssuerResponse
   */
  authorization_endpoint?: string
  /**
   *
   * @type {string}
   * @memberof WellKnownOpenIdCredentialIssuerResponse
   */
  credential_endpoint?: string
  /**
   *
   * @type {string}
   * @memberof WellKnownOpenIdCredentialIssuerResponse
   */
  credential_issuer?: string
  /**
   *
   * @type {Array<CreateIssuanceConfigInputCredentialSupportedInner>}
   * @memberof WellKnownOpenIdCredentialIssuerResponse
   */
  credentials_supported?: Array<CreateIssuanceConfigInputCredentialSupportedInner>
  /**
   *
   * @type {string}
   * @memberof WellKnownOpenIdCredentialIssuerResponse
   */
  deferred_credential_endpoint?: string
  /**
   *
   * @type {Array<string>}
   * @memberof WellKnownOpenIdCredentialIssuerResponse
   */
  grant_types_supported?: Array<WellKnownOpenIdCredentialIssuerResponseGrantTypesSupportedEnum>
  /**
   *
   * @type {string}
   * @memberof WellKnownOpenIdCredentialIssuerResponse
   */
  jwks_uri?: string
  /**
   *
   * @type {Array<string>}
   * @memberof WellKnownOpenIdCredentialIssuerResponse
   */
  scopes_supported?: Array<WellKnownOpenIdCredentialIssuerResponseScopesSupportedEnum>
  /**
   *
   * @type {string}
   * @memberof WellKnownOpenIdCredentialIssuerResponse
   */
  token_endpoint?: string
  /**
   *
   * @type {Array<string>}
   * @memberof WellKnownOpenIdCredentialIssuerResponse
   */
  token_endpoint_auth_methods_supported?: Array<WellKnownOpenIdCredentialIssuerResponseTokenEndpointAuthMethodsSupportedEnum>
}

export const WellKnownOpenIdCredentialIssuerResponseGrantTypesSupportedEnum = {
  AuthorizationCode: 'authorization_code',
  UrnietfparamsoauthgrantTypepreAuthorizedCode:
    'urn:ietf:params:oauth:grant-type:pre-authorized_code',
} as const

export type WellKnownOpenIdCredentialIssuerResponseGrantTypesSupportedEnum =
  (typeof WellKnownOpenIdCredentialIssuerResponseGrantTypesSupportedEnum)[keyof typeof WellKnownOpenIdCredentialIssuerResponseGrantTypesSupportedEnum]
export const WellKnownOpenIdCredentialIssuerResponseScopesSupportedEnum = {
  Openid: 'openid',
} as const

export type WellKnownOpenIdCredentialIssuerResponseScopesSupportedEnum =
  (typeof WellKnownOpenIdCredentialIssuerResponseScopesSupportedEnum)[keyof typeof WellKnownOpenIdCredentialIssuerResponseScopesSupportedEnum]
export const WellKnownOpenIdCredentialIssuerResponseTokenEndpointAuthMethodsSupportedEnum =
  {
    ClientSecretPost: 'client_secret_post',
    ClientSecretBasic: 'client_secret_basic',
    None: 'none',
  } as const

export type WellKnownOpenIdCredentialIssuerResponseTokenEndpointAuthMethodsSupportedEnum =
  (typeof WellKnownOpenIdCredentialIssuerResponseTokenEndpointAuthMethodsSupportedEnum)[keyof typeof WellKnownOpenIdCredentialIssuerResponseTokenEndpointAuthMethodsSupportedEnum]
