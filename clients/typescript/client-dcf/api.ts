/* tslint:disable */
/* eslint-disable */
/**
 * DcfOrchestrator
 * # Affinidi Data Connector Framework (DCF) Affinidi DCF is a developer/contributor-focused suite of tools that enables contributors to configure, create, validate and manage data connectors for public consumption. This involves configuring connections to a third party data source and configuring transformation mapping from the data source to a target, “canonical” schema. After setup, DCF validates the configuration of the data connectors and transformation mapping. Following successful validation, created connectors are published.  The Affinidi DCF Orchestrator API covers every step of the data ingestion process, enabling builders to onboard new third-party services as connectors, create authenticated user connections, and pull data to be streamed to Affinidi Vault. It provides a standardized approach to interact with REST APIs, which is also configuration-driven, allowing builders to easily customise the connector\'s behaviour by modifying configuration files.  The DCF Orchestrator API is organised around three main concepts: Data Source & Configuration, Connector, and User Connection. Below you will find a brief explanation of these and other useful terms:  *Data Source & Configuration* Data Sources represent the third-party service API in our framework. They consist of two entities: the details on how to authenticate with the third-party service are mapped to DataSourceConfig, while the service’s endpoints and data transformation templates are mapped to  DataSource .  Builders can list available DataSourceConfigs and DataSources, create new ones and modify them using our API.  *Connector* This is the building block of our framework. It brings together a Data Source and its Configuration with the builder credentials necessary for connections to be made, for example client ID or client secret. Our endpoints allow builders to list available Connectors, create new ones and modify them.  *User Connection* A user connection is created each time an end user authenticates with a data source via DCF. It holds user specific information relative to a connector and application, including credentials. Our API enables builders to list, create and delete available Connections as well as to execute them to pull data.  *Templates* Builder-defined configuration objects that describe how to interact with a specific third-party service\'s API, allowing developers to easily connect to and interact with a variety of sources, as well as customising the connector\'s behaviour.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: robert.k@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 * Object describing the information about an active connection.
 * @export
 * @interface ActiveConnectionsDto
 */
export interface ActiveConnectionsDto {
  /**
   * The ID of the data connector.
   * @type {string}
   * @memberof ActiveConnectionsDto
   */
  connectorId?: string;
  /**
   * The ID of the data connection.
   * @type {string}
   * @memberof ActiveConnectionsDto
   */
  connectionId?: string;
  /**
   * The name of the data connector.
   * @type {string}
   * @memberof ActiveConnectionsDto
   */
  connectorName?: string;
  /**
   * The date and time at which the connection has been created.
   * @type {string}
   * @memberof ActiveConnectionsDto
   */
  createdAt?: string;
  /**
   * The date and time at which the connection has been updated.
   * @type {string}
   * @memberof ActiveConnectionsDto
   */
  activatedAt?: string;
}
/**
 * Response payload after requesting a list of active connections.
 * @export
 * @interface ActiveConnectionsResponse
 */
export interface ActiveConnectionsResponse {
  /**
   * A list of active connections.
   * @type {Array<ActiveConnectionsDto>}
   * @memberof ActiveConnectionsResponse
   */
  connections: Array<ActiveConnectionsDto>;
}
/**
 * An object containing the name and id of a given data source.
 * @export
 * @interface AuthConfig
 */
export interface AuthConfig {
  /**
   * The ID of the data source.
   * @type {string}
   * @memberof AuthConfig
   */
  id: string;
  /**
   * The name of the data source configuration.
   * @type {string}
   * @memberof AuthConfig
   */
  dataSourceConfigName: string;
}
/**
 * Object describing the information needed for a valid authentication configuration.
 * @export
 * @interface AuthConfigDto
 */
export interface AuthConfigDto {
  /**
   * The ID of the data source.
   * @type {string}
   * @memberof AuthConfigDto
   */
  id?: string;
  /**
   * The name of the data source configuration connected to this authentication configuration.
   * @type {string}
   * @memberof AuthConfigDto
   */
  dataSourceConfigName?: string;
  /**
   * The status of the data source config.
   * @type {string}
   * @memberof AuthConfigDto
   */
  status?: AuthConfigDtoStatusEnum;
  /**
   *
   * @type {AuthConfigInfoDto}
   * @memberof AuthConfigDto
   */
  authConfigInfo?: AuthConfigInfoDto;
}

export const AuthConfigDtoStatusEnum = {
  Draft: 'DRAFT',
  Active: 'ACTIVE',
} as const;

export type AuthConfigDtoStatusEnum =
  (typeof AuthConfigDtoStatusEnum)[keyof typeof AuthConfigDtoStatusEnum];

/**
 * The information needed to onboard and use a data source.
 * @export
 * @interface AuthConfigInfoDto
 */
export interface AuthConfigInfoDto {
  /**
   *
   * @type {AuthConfigInfoDtoAuthDetails}
   * @memberof AuthConfigInfoDto
   */
  authDetails: AuthConfigInfoDtoAuthDetails;
  /**
   *
   * @type {AuthConfigInfoDtoExchangeTokenTemplate}
   * @memberof AuthConfigInfoDto
   */
  exchangeTokenTemplate: AuthConfigInfoDtoExchangeTokenTemplate;
  /**
   *
   * @type {AuthConfigInfoDtoRefreshTokenTemplate}
   * @memberof AuthConfigInfoDto
   */
  refreshTokenTemplate?: AuthConfigInfoDtoRefreshTokenTemplate;
}
/**
 * The authentication information needed to connect with a data source.
 * @export
 * @interface AuthConfigInfoDtoAuthDetails
 */
export interface AuthConfigInfoDtoAuthDetails {
  /**
   * The base URL with which the data connector framework (DCF) can get authenticated for using the connector. Should be obtained from the API documentation of the third-party service.
   * @type {string}
   * @memberof AuthConfigInfoDtoAuthDetails
   */
  authUrl: string;
  /**
   * The template for generating the full authentication URL for authenticating the DCF.
   * @type {string}
   * @memberof AuthConfigInfoDtoAuthDetails
   */
  template: string;
}
/**
 * Template for defining the requirements of authentication token exchange with the external data source.
 * @export
 * @interface AuthConfigInfoDtoExchangeTokenTemplate
 */
export interface AuthConfigInfoDtoExchangeTokenTemplate {
  /**
   * Defines all request and auth headers which are common for each operation.
   * @type {{ [key: string]: any; }}
   * @memberof AuthConfigInfoDtoExchangeTokenTemplate
   */
  options: { [key: string]: any };
  /**
   * A list of REST operations to exchange authentication token with the data source.
   * @type {Array<AuthConfigInfoDtoExchangeTokenTemplateOperationsInner>}
   * @memberof AuthConfigInfoDtoExchangeTokenTemplate
   */
  operations: Array<AuthConfigInfoDtoExchangeTokenTemplateOperationsInner>;
}
/**
 * Describes the configuration for a single REST operation for authenticating with the data source.
 * @export
 * @interface AuthConfigInfoDtoExchangeTokenTemplateOperationsInner
 */
export interface AuthConfigInfoDtoExchangeTokenTemplateOperationsInner {
  /**
   * An object which defines the REST operation as well as the URL to issue the request.
   * @type {{ [key: string]: any; }}
   * @memberof AuthConfigInfoDtoExchangeTokenTemplateOperationsInner
   */
  template: { [key: string]: any };
  /**
   *
   * @type {AuthConfigInfoDtoExchangeTokenTemplateOperationsInnerFunctions}
   * @memberof AuthConfigInfoDtoExchangeTokenTemplateOperationsInner
   */
  functions: AuthConfigInfoDtoExchangeTokenTemplateOperationsInnerFunctions;
}
/**
 * An object defining functions which process the received authentication data from the operation.
 * @export
 * @interface AuthConfigInfoDtoExchangeTokenTemplateOperationsInnerFunctions
 */
export interface AuthConfigInfoDtoExchangeTokenTemplateOperationsInnerFunctions {
  /**
   * Should always be an empty array.
   * @type {Array<string>}
   * @memberof AuthConfigInfoDtoExchangeTokenTemplateOperationsInnerFunctions
   */
  getData: Array<string>;
}
/**
 * Template for defining the requirements of renewing the authentication token with the external data source.
 * @export
 * @interface AuthConfigInfoDtoRefreshTokenTemplate
 */
export interface AuthConfigInfoDtoRefreshTokenTemplate {
  /**
   * Defines all request and auth headers which are common for each operation.
   * @type {object}
   * @memberof AuthConfigInfoDtoRefreshTokenTemplate
   */
  options: object;
  /**
   * A list of REST operations to retrieve an exchange token from the data source.
   * @type {Array<AuthConfigInfoDtoRefreshTokenTemplateOperationsInner>}
   * @memberof AuthConfigInfoDtoRefreshTokenTemplate
   */
  operations: Array<AuthConfigInfoDtoRefreshTokenTemplateOperationsInner>;
}
/**
 * Describes the configuration for a single REST operation retrieving an exchange token from the data source.
 * @export
 * @interface AuthConfigInfoDtoRefreshTokenTemplateOperationsInner
 */
export interface AuthConfigInfoDtoRefreshTokenTemplateOperationsInner {
  /**
   * An object which defines the REST operation as well as the URL to issue the request.
   * @type {{ [key: string]: any; }}
   * @memberof AuthConfigInfoDtoRefreshTokenTemplateOperationsInner
   */
  template: { [key: string]: any };
  /**
   *
   * @type {AuthConfigInfoDtoRefreshTokenTemplateOperationsInnerFunctions}
   * @memberof AuthConfigInfoDtoRefreshTokenTemplateOperationsInner
   */
  functions: AuthConfigInfoDtoRefreshTokenTemplateOperationsInnerFunctions;
}
/**
 * An object defining functions which process the received refresh token data from the operation.
 * @export
 * @interface AuthConfigInfoDtoRefreshTokenTemplateOperationsInnerFunctions
 */
export interface AuthConfigInfoDtoRefreshTokenTemplateOperationsInnerFunctions {
  /**
   *
   * @type {Array<string>}
   * @memberof AuthConfigInfoDtoRefreshTokenTemplateOperationsInnerFunctions
   */
  getData: Array<string>;
}
/**
 * The information needed to onboard and use a data source.
 * @export
 * @interface AuthConfigInfoPatchDto
 */
export interface AuthConfigInfoPatchDto {
  /**
   *
   * @type {AuthConfigInfoPatchDtoAuthDetails}
   * @memberof AuthConfigInfoPatchDto
   */
  authDetails?: AuthConfigInfoPatchDtoAuthDetails;
  /**
   *
   * @type {AuthConfigInfoPatchDtoExchangeTokenTemplate}
   * @memberof AuthConfigInfoPatchDto
   */
  exchangeTokenTemplate?: AuthConfigInfoPatchDtoExchangeTokenTemplate;
  /**
   *
   * @type {AuthConfigInfoPatchDtoRefreshTokenTemplate}
   * @memberof AuthConfigInfoPatchDto
   */
  refreshTokenTemplate?: AuthConfigInfoPatchDtoRefreshTokenTemplate;
}
/**
 * The authentication information needed to connect with a Data Source.
 * @export
 * @interface AuthConfigInfoPatchDtoAuthDetails
 */
export interface AuthConfigInfoPatchDtoAuthDetails {
  /**
   * The base URL with which the data connector framework (DCF) can get authenticated for using the connector. Should be obtained from the API documentation of the third-party service.
   * @type {string}
   * @memberof AuthConfigInfoPatchDtoAuthDetails
   */
  authUrl?: string;
  /**
   * The template for generating the full authentication URL for authenticating the DCF.
   * @type {string}
   * @memberof AuthConfigInfoPatchDtoAuthDetails
   */
  template?: string;
}
/**
 * Template for defining the requirements of authentication token exchange with the external data source.
 * @export
 * @interface AuthConfigInfoPatchDtoExchangeTokenTemplate
 */
export interface AuthConfigInfoPatchDtoExchangeTokenTemplate {
  /**
   * Defines all request and auth headers which are common for each operation.s
   * @type {{ [key: string]: any; }}
   * @memberof AuthConfigInfoPatchDtoExchangeTokenTemplate
   */
  options?: { [key: string]: any };
  /**
   * A list of REST operations to exchange authentication token with the data source.
   * @type {Array<AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInner>}
   * @memberof AuthConfigInfoPatchDtoExchangeTokenTemplate
   */
  operations?: Array<AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInner>;
}
/**
 * Describes the configuration for a single REST operation for authenticating with the data source.
 * @export
 * @interface AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInner
 */
export interface AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInner {
  /**
   * An object which defines the REST operation as well as the URL to issue the request.
   * @type {{ [key: string]: any; }}
   * @memberof AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInner
   */
  template?: { [key: string]: any };
  /**
   *
   * @type {AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInnerFunctions}
   * @memberof AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInner
   */
  functions?: AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInnerFunctions;
}
/**
 * An object defining functions which process the received authentication data from the operation.
 * @export
 * @interface AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInnerFunctions
 */
export interface AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInnerFunctions {
  /**
   *
   * @type {Array<string>}
   * @memberof AuthConfigInfoPatchDtoExchangeTokenTemplateOperationsInnerFunctions
   */
  getData?: Array<string>;
}
/**
 * Template for defining the requirements of renewing the authentication token with the external data source.
 * @export
 * @interface AuthConfigInfoPatchDtoRefreshTokenTemplate
 */
export interface AuthConfigInfoPatchDtoRefreshTokenTemplate {
  /**
   * Defines all request and auth headers which are common for each operation.
   * @type {object}
   * @memberof AuthConfigInfoPatchDtoRefreshTokenTemplate
   */
  options?: object;
  /**
   * A list of REST operations to retrieve an exchange token from the data source.
   * @type {Array<AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInner>}
   * @memberof AuthConfigInfoPatchDtoRefreshTokenTemplate
   */
  operations?: Array<AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInner>;
}
/**
 * Describes the configuration for a single REST operation retrieving an exchange token from the data source.
 * @export
 * @interface AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInner
 */
export interface AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInner {
  /**
   * An object which defines the REST operation as well as the URL to issue the request.
   * @type {{ [key: string]: any; }}
   * @memberof AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInner
   */
  template?: { [key: string]: any };
  /**
   *
   * @type {AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInnerFunctions}
   * @memberof AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInner
   */
  functions?: AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInnerFunctions;
}
/**
 * An object defining functions which process the received refresh token data from the operation.
 * @export
 * @interface AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInnerFunctions
 */
export interface AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInnerFunctions {
  /**
   * Should always be an empty array.
   * @type {Array<string>}
   * @memberof AuthConfigInfoPatchDtoRefreshTokenTemplateOperationsInnerFunctions
   */
  getData?: Array<string>;
}
/**
 * Defines the consumer facing information of a connector.
 * @export
 * @interface AvailableConnectorDTO
 */
export interface AvailableConnectorDTO {
  /**
   * The ID of the connector.
   * @type {string}
   * @memberof AvailableConnectorDTO
   */
  id: string;
  /**
   * The name of the connector.
   * @type {string}
   * @memberof AvailableConnectorDTO
   */
  name: string;
  /**
   * The icon of the connector as base64 encoded string.
   * @type {string}
   * @memberof AvailableConnectorDTO
   */
  icon: string;
  /**
   * The URL of the website for the connector.
   * @type {string}
   * @memberof AvailableConnectorDTO
   */
  websiteUri?: string;
}
/**
 * List of all available connectors.
 * @export
 * @interface AvailableConnectorsResponse
 */
export interface AvailableConnectorsResponse {
  /**
   * A list of available connectors.
   * @type {Array<AvailableConnectorDTO>}
   * @memberof AvailableConnectorsResponse
   */
  connectors: Array<AvailableConnectorDTO>;
}
/**
 * A basic connector information needed for mapping with a common schema
 * @export
 * @interface BasicConnectorDTO
 */
export interface BasicConnectorDTO {
  /**
   * The name of the connector.
   * @type {string}
   * @memberof BasicConnectorDTO
   */
  name: string;
  /**
   * The website of the connector.
   * @type {string}
   * @memberof BasicConnectorDTO
   */
  website: string;
  /**
   * The icon of the connector as base64 encoded string.
   * @type {string}
   * @memberof BasicConnectorDTO
   */
  icon?: string;
  /**
   * The ID of the connector.
   * @type {string}
   * @memberof BasicConnectorDTO
   */
  connectorId: string;
}
/**
 * @type CallbackResponse
 * @export
 */
export type CallbackResponse =
  | CallbackResponseOneOf
  | PatchDataSourceConfigStatusResponse
  | PatchDataSourceStatusResponse;

/**
 * Response payload sent after calling the callback endpoint.
 * @export
 * @interface CallbackResponseOneOf
 */
export interface CallbackResponseOneOf {
  /**
   * The ID of the data connector.
   * @type {string}
   * @memberof CallbackResponseOneOf
   */
  connectionId?: string;
  /**
   * The name of the data source.
   * @type {string}
   * @memberof CallbackResponseOneOf
   */
  dataSource?: string;
}
/**
 * A list to define templates fields which need to have specific names for the Connector. For example `clientSecret` needs to be named `secret` for the Deezer connector.
 * @export
 * @interface ConfigTemplateDto
 */
export interface ConfigTemplateDto extends Array<ConfigTemplateDtoInner> {}
/**
 *
 * @export
 * @interface ConfigTemplateDtoInner
 */
export interface ConfigTemplateDtoInner {
  /**
   * The placeholder name from any template within the postDataSourceConfig payload.
   * @type {string}
   * @memberof ConfigTemplateDtoInner
   */
  key: string;
  /**
   * The replacement field name as required by the data connector for the postDataSourceConfig templates.
   * @type {string}
   * @memberof ConfigTemplateDtoInner
   */
  value: string;
  /**
   * A descriptive comment giving context for the need of this custom field.
   * @type {string}
   * @memberof ConfigTemplateDtoInner
   */
  description?: string;
}
/**
 * Request payload for creating a new connection.
 * @export
 * @interface ConnectionCreationRequest
 */
export interface ConnectionCreationRequest {
  /**
   * The ID of the data connector.
   * @type {string}
   * @memberof ConnectionCreationRequest
   */
  connectorId: string;
  /**
   * The ID of the data source.
   * @type {string}
   * @memberof ConnectionCreationRequest
   */
  dataSourceId?: string;
}
/**
 * Response payload after successful creation of a connection.
 * @export
 * @interface ConnectionCreationResponse
 */
export interface ConnectionCreationResponse {
  /**
   * the Single-Sign-On address through which a user need to authenticate the connection  with the use of the data connector framework (DCF).
   * @type {string}
   * @memberof ConnectionCreationResponse
   */
  ssoStartUrl?: string;
}
/**
 * Represents a default API response communicating result details of the request.
 * @export
 * @interface ConnectionExecutedTempResponse
 */
export interface ConnectionExecutedTempResponse {
  /**
   * The actual response message.
   * @type {object}
   * @memberof ConnectionExecutedTempResponse
   */
  credentials?: object;
}
/**
 * The configuration object for the Connector containing builder\'s credentials and customs fields.
 * @export
 * @interface ConnectorAuthConfig
 */
export interface ConnectorAuthConfig {
  /**
   * The client ID acquired while registering at a third-party service. Might be named differently at each individual service. Reflect these differences within the `customFields` property.
   * @type {string}
   * @memberof ConnectorAuthConfig
   */
  clientId: string;
  /**
   *
   * @type {ConfigTemplateDto}
   * @memberof ConnectorAuthConfig
   */
  customFields?: ConfigTemplateDto;
}
/**
 * An object containing required information to define a connector.
 * @export
 * @interface ConnectorDTO
 */
export interface ConnectorDTO {
  /**
   * The ID of the connector.
   * @type {string}
   * @memberof ConnectorDTO
   */
  id: string;
  /**
   * The name of the connector.
   * @type {string}
   * @memberof ConnectorDTO
   */
  name: string;
  /**
   * The date and time at which the connector has been created.
   * @type {string}
   * @memberof ConnectorDTO
   */
  createdAt?: string;
  /**
   * A list of IDs of related data sources.
   * @type {Array<string>}
   * @memberof ConnectorDTO
   */
  dataSourceIds: Array<string>;
  /**
   *
   * @type {ConnectorAuthConfig}
   * @memberof ConnectorDTO
   */
  config: ConnectorAuthConfig;
  /**
   * The state in which the connector is currently.
   * @type {string}
   * @memberof ConnectorDTO
   */
  status?: ConnectorDTOStatusEnum;
  /**
   * The icon of the connector as base64 encoded string.
   * @type {string}
   * @memberof ConnectorDTO
   */
  icon: string;
  /**
   * The URL of the website for the connector.
   * @type {string}
   * @memberof ConnectorDTO
   */
  websiteUri?: string;
}

export const ConnectorDTOStatusEnum = {
  Draft: 'DRAFT',
  Ready: 'READY',
} as const;

export type ConnectorDTOStatusEnum =
  (typeof ConnectorDTOStatusEnum)[keyof typeof ConnectorDTOStatusEnum];

/**
 * The requested connector.
 * @export
 * @interface ConnectorsByIdResponse
 */
export interface ConnectorsByIdResponse {
  /**
   *
   * @type {ConnectorDTO}
   * @memberof ConnectorsByIdResponse
   */
  connector?: ConnectorDTO;
}
/**
 * Request to create a new connector.
 * @export
 * @interface ConnectorsCreationRequest
 */
export interface ConnectorsCreationRequest {
  /**
   * The name of the connector.
   * @type {string}
   * @memberof ConnectorsCreationRequest
   */
  name: string;
  /**
   * The list of data source IDs for the connector.
   * @type {Array<string>}
   * @memberof ConnectorsCreationRequest
   */
  dataSourceIds: Array<string>;
  /**
   *
   * @type {ConnectorAuthConfig}
   * @memberof ConnectorsCreationRequest
   */
  config: ConnectorAuthConfig;
  /**
   * The icon of the connector as base64 encoded string.
   * @type {string}
   * @memberof ConnectorsCreationRequest
   */
  icon: string;
  /**
   * The URL of the website for the connector.
   * @type {string}
   * @memberof ConnectorsCreationRequest
   */
  websiteUri?: string;
}
/**
 * List of all configured connectors.
 * @export
 * @interface ConnectorsResponse
 */
export interface ConnectorsResponse {
  /**
   * A list of available connectors.
   * @type {Array<ConnectorDTO>}
   * @memberof ConnectorsResponse
   */
  connectors: Array<ConnectorDTO>;
}
/**
 * Request payload for creating of a transformation template for a given data source.
 * @export
 * @interface CreateTransformationTemplateRequest
 */
export interface CreateTransformationTemplateRequest {
  /**
   *
   * @type {TransformationTemplateDto}
   * @memberof CreateTransformationTemplateRequest
   */
  transformationTemplate: TransformationTemplateDto;
}
/**
 * An object that contains endpoint configurations for data retrieval
 * @export
 * @interface DataSource
 */
export interface DataSource {
  /**
   * The ID of the data source.
   * @type {string}
   * @memberof DataSource
   */
  dataSourceId?: string;
  /**
   * The ID of the data source configuration.
   * @type {string}
   * @memberof DataSource
   */
  dataSourceConfigId: string;
  /**
   * The name of the data source.
   * @type {string}
   * @memberof DataSource
   */
  dataSourceName: string;
  /**
   * The human readable description of the data source.
   * @type {string}
   * @memberof DataSource
   */
  description?: string;
  /**
   * Data-scoped permissions as string, requested from the third-party service API so that DCF can access that data on behalf of end users.
   * @type {string}
   * @memberof DataSource
   */
  scope: string;
  /**
   * The status of the data source.
   * @type {string}
   * @memberof DataSource
   */
  status?: DataSourceStatusEnum;
  /**
   *
   * @type {EndpointConfigDto}
   * @memberof DataSource
   */
  endpointConfig: EndpointConfigDto;
  /**
   *
   * @type {TransformationTemplateDto}
   * @memberof DataSource
   */
  transformationTemplate?: TransformationTemplateDto;
}

export const DataSourceStatusEnum = {
  Draft: 'DRAFT',
  Active: 'ACTIVE',
} as const;

export type DataSourceStatusEnum =
  (typeof DataSourceStatusEnum)[keyof typeof DataSourceStatusEnum];

/**
 * An object that contains configurations for authenticating with a given data source.
 * @export
 * @interface DataSourceConfig
 */
export interface DataSourceConfig {
  /**
   * The name of the data source configuration.
   * @type {string}
   * @memberof DataSourceConfig
   */
  dataSourceConfigName: string;
  /**
   * The status of the data source config.
   * @type {string}
   * @memberof DataSourceConfig
   */
  status?: DataSourceConfigStatusEnum;
  /**
   *
   * @type {AuthConfigInfoDto}
   * @memberof DataSourceConfig
   */
  authConfigInfo: AuthConfigInfoDto;
}

export const DataSourceConfigStatusEnum = {
  Draft: 'DRAFT',
  Active: 'ACTIVE',
} as const;

export type DataSourceConfigStatusEnum =
  (typeof DataSourceConfigStatusEnum)[keyof typeof DataSourceConfigStatusEnum];

/**
 * @type DataSourceConfigByIdResponse
 * @export
 */
export type DataSourceConfigByIdResponse =
  | DataSourceConfigByIdResponseOneOf
  | DataSourceConfigValidationResult;

/**
 * Specific data source configuration based on id provided
 * @export
 * @interface DataSourceConfigByIdResponseOneOf
 */
export interface DataSourceConfigByIdResponseOneOf {
  /**
   *
   * @type {AuthConfigDto}
   * @memberof DataSourceConfigByIdResponseOneOf
   */
  dataSourceConfig: AuthConfigDto;
}
/**
 * Request payload for updating certain authentication information of a data source configuration.
 * @export
 * @interface DataSourceConfigPatchRequest
 */
export interface DataSourceConfigPatchRequest {
  /**
   *
   * @type {AuthConfigInfoPatchDto}
   * @memberof DataSourceConfigPatchRequest
   */
  authConfigInfo?: AuthConfigInfoPatchDto;
}
/**
 * Updates a data source config\'s status.
 * @export
 * @interface DataSourceConfigPatchStatusRequest
 */
export interface DataSourceConfigPatchStatusRequest {
  /**
   * The new status of the data source config.
   * @type {string}
   * @memberof DataSourceConfigPatchStatusRequest
   */
  status: DataSourceConfigPatchStatusRequestStatusEnum;
  /**
   *
   * @type {string}
   * @memberof DataSourceConfigPatchStatusRequest
   */
  scope?: string;
  /**
   *
   * @type {ConnectorAuthConfig}
   * @memberof DataSourceConfigPatchStatusRequest
   */
  config?: ConnectorAuthConfig;
}

export const DataSourceConfigPatchStatusRequestStatusEnum = {
  Draft: 'DRAFT',
  Active: 'ACTIVE',
} as const;

export type DataSourceConfigPatchStatusRequestStatusEnum =
  (typeof DataSourceConfigPatchStatusRequestStatusEnum)[keyof typeof DataSourceConfigPatchStatusRequestStatusEnum];

/**
 * List of all available configurations of data sources.
 * @export
 * @interface DataSourceConfigResponse
 */
export interface DataSourceConfigResponse {
  /**
   * The list of all available data source configurations.
   * @type {Array<AuthConfig>}
   * @memberof DataSourceConfigResponse
   */
  dataSourceConfigs: Array<AuthConfig>;
}
/**
 *
 * @export
 * @interface DataSourceConfigValidationResult
 */
export interface DataSourceConfigValidationResult {
  /**
   *
   * @type {DataSourceConfigValidationResultValidationResult}
   * @memberof DataSourceConfigValidationResult
   */
  validationResult?: DataSourceConfigValidationResultValidationResult;
}
/**
 *
 * @export
 * @interface DataSourceConfigValidationResultValidationResult
 */
export interface DataSourceConfigValidationResultValidationResult {
  /**
   *
   * @type {boolean}
   * @memberof DataSourceConfigValidationResultValidationResult
   */
  isSuccessful?: boolean;
  /**
   *
   * @type {string}
   * @memberof DataSourceConfigValidationResultValidationResult
   */
  connectionId?: string;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof DataSourceConfigValidationResultValidationResult
   */
  response?: { [key: string]: any };
}
/**
 * Response payload after successful creation of a data source configuration.
 * @export
 * @interface DataSourceCreationResponse
 */
export interface DataSourceCreationResponse {
  /**
   * The ID of the data source.
   * @type {string}
   * @memberof DataSourceCreationResponse
   */
  dataSourceId?: string;
}
/**
 * Request payload for updating of a data source.
 * @export
 * @interface DataSourcePatchRequest
 */
export interface DataSourcePatchRequest {
  /**
   * The name of the data source.
   * @type {string}
   * @memberof DataSourcePatchRequest
   */
  dataSourceName?: string;
  /**
   * The human readable description of the data source.
   * @type {string}
   * @memberof DataSourcePatchRequest
   */
  description?: string;
  /**
   * Data-scoped permissions as string, requested from the third-party service API so that DCF can access that data on behalf of end users.
   * @type {string}
   * @memberof DataSourcePatchRequest
   */
  scope?: string;
  /**
   *
   * @type {EndpointConfigPatchRequest}
   * @memberof DataSourcePatchRequest
   */
  endpointConfig?: EndpointConfigPatchRequest;
  /**
   *
   * @type {TransformationTemplateDto}
   * @memberof DataSourcePatchRequest
   */
  transformationTemplate?: TransformationTemplateDto;
}
/**
 * Updates a data source status.
 * @export
 * @interface DataSourcePatchStatusRequest
 */
export interface DataSourcePatchStatusRequest {
  /**
   * The status of the data source.
   * @type {string}
   * @memberof DataSourcePatchStatusRequest
   */
  status: DataSourcePatchStatusRequestStatusEnum;
  /**
   *
   * @type {ConnectorAuthConfig}
   * @memberof DataSourcePatchStatusRequest
   */
  config?: ConnectorAuthConfig;
}

export const DataSourcePatchStatusRequestStatusEnum = {
  Draft: 'DRAFT',
  Active: 'ACTIVE',
} as const;

export type DataSourcePatchStatusRequestStatusEnum =
  (typeof DataSourcePatchStatusRequestStatusEnum)[keyof typeof DataSourcePatchStatusRequestStatusEnum];

/**
 * List of all data source configurations.
 * @export
 * @interface DataSourceResponse
 */
export interface DataSourceResponse {
  /**
   * A list of data source configurations.
   * @type {Array<DataSourceResponseDto>}
   * @memberof DataSourceResponse
   */
  dataSources?: Array<DataSourceResponseDto>;
}
/**
 * An object that contains endpoint configurations for data retrievel
 * @export
 * @interface DataSourceResponseDto
 */
export interface DataSourceResponseDto {
  /**
   * The ID of the data source.
   * @type {string}
   * @memberof DataSourceResponseDto
   */
  dataSourceId: string;
  /**
   * The ID of the data source configuration.
   * @type {string}
   * @memberof DataSourceResponseDto
   */
  dataSourceConfigId: string;
  /**
   * The name of the data source.
   * @type {string}
   * @memberof DataSourceResponseDto
   */
  dataSourceName: string;
  /**
   * The human readable description of the data source.
   * @type {string}
   * @memberof DataSourceResponseDto
   */
  description?: string;
  /**
   * Data-scoped permissions as string, requested from the third-party service API so that DCF can access that data on behalf of end users.
   * @type {string}
   * @memberof DataSourceResponseDto
   */
  scope: string;
  /**
   * The status of the data source.
   * @type {string}
   * @memberof DataSourceResponseDto
   */
  status: DataSourceResponseDtoStatusEnum;
  /**
   *
   * @type {EndpointConfigDto}
   * @memberof DataSourceResponseDto
   */
  endpointConfig: EndpointConfigDto;
  /**
   *
   * @type {TransformationTemplateDto}
   * @memberof DataSourceResponseDto
   */
  transformationTemplate?: TransformationTemplateDto;
}

export const DataSourceResponseDtoStatusEnum = {
  Draft: 'DRAFT',
  Active: 'ACTIVE',
} as const;

export type DataSourceResponseDtoStatusEnum =
  (typeof DataSourceResponseDtoStatusEnum)[keyof typeof DataSourceResponseDtoStatusEnum];

/**
 *
 * @export
 * @interface DataSourceValidationResult
 */
export interface DataSourceValidationResult {
  /**
   *
   * @type {DataSourceValidationResultValidationResult}
   * @memberof DataSourceValidationResult
   */
  validationResult?: DataSourceValidationResultValidationResult;
}
/**
 *
 * @export
 * @interface DataSourceValidationResultValidationResult
 */
export interface DataSourceValidationResultValidationResult {
  /**
   *
   * @type {boolean}
   * @memberof DataSourceValidationResultValidationResult
   */
  isSuccessful?: boolean;
  /**
   *
   * @type {string}
   * @memberof DataSourceValidationResultValidationResult
   */
  connectionId?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof DataSourceValidationResultValidationResult
   */
  response?: Array<string>;
}
/**
 * Defines the executable operations provided by the data connector in order to retrieve data.
 * @export
 * @interface EndpointConfigDto
 */
export interface EndpointConfigDto {
  /**
   * Defines all request and auth headers which are common for each operation.
   * @type {{ [key: string]: any; }}
   * @memberof EndpointConfigDto
   */
  options: { [key: string]: any };
  /**
   * A list of REST operations to retrieve data from the data connector.
   * @type {Array<EndpointConfigDtoOperationsInner>}
   * @memberof EndpointConfigDto
   */
  operations: Array<EndpointConfigDtoOperationsInner>;
}
/**
 * Describes the configuration for a single REST operation for the data connector.
 * @export
 * @interface EndpointConfigDtoOperationsInner
 */
export interface EndpointConfigDtoOperationsInner {
  /**
   * An object which defines the REST operation as well as the URL to issue the request.
   * @type {{ [key: string]: any; }}
   * @memberof EndpointConfigDtoOperationsInner
   */
  template: { [key: string]: any };
  /**
   * An object defining functions which process the received data from the defined operation.
   * @type {{ [key: string]: any; }}
   * @memberof EndpointConfigDtoOperationsInner
   */
  functions: { [key: string]: any };
  /**
   * An optional object defining how paginated results will be collected.
   * @type {{ [key: string]: any; }}
   * @memberof EndpointConfigDtoOperationsInner
   */
  pagination?: { [key: string]: any };
  /**
   * Schema of the response returned by the chosen API endpoint. It serves as a reference to understand the structure and format of data returned by the data source API.
   * @type {{ [key: string]: any; }}
   * @memberof EndpointConfigDtoOperationsInner
   */
  sourceSchema: { [key: string]: any };
}
/**
 * Defines the executable operations provided by the data connector in order to retrieve data.
 * @export
 * @interface EndpointConfigPatchRequest
 */
export interface EndpointConfigPatchRequest {
  /**
   * Defines all request and auth headers which are common for each operation.
   * @type {{ [key: string]: any; }}
   * @memberof EndpointConfigPatchRequest
   */
  options?: { [key: string]: any };
  /**
   *
   * @type {Array<EndpointConfigPatchRequestOperationsInner>}
   * @memberof EndpointConfigPatchRequest
   */
  operations?: Array<EndpointConfigPatchRequestOperationsInner>;
}
/**
 *
 * @export
 * @interface EndpointConfigPatchRequestOperationsInner
 */
export interface EndpointConfigPatchRequestOperationsInner {
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof EndpointConfigPatchRequestOperationsInner
   */
  template?: { [key: string]: any };
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof EndpointConfigPatchRequestOperationsInner
   */
  functions?: { [key: string]: any };
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof EndpointConfigPatchRequestOperationsInner
   */
  pagination?: { [key: string]: any };
  /**
   * Schema of the response returned by the chosen API endpoint. It serves as a reference to understand the structure and format of data returned by the data source API.
   * @type {{ [key: string]: any; }}
   * @memberof EndpointConfigPatchRequestOperationsInner
   */
  sourceSchema?: { [key: string]: any };
}
/**
 * Represents the results of executed connection request
 * @export
 * @interface ExecutedConnectionRequestResponse
 */
export interface ExecutedConnectionRequestResponse {
  /**
   * The status of the executed connection request.
   * @type {string}
   * @memberof ExecutedConnectionRequestResponse
   */
  status?: string;
  /**
   * A list of errors that occurred during the execution of the connection request.
   * @type {Array<string>}
   * @memberof ExecutedConnectionRequestResponse
   */
  errors?: Array<string>;
  /**
   * The ID of the connector.
   * @type {string}
   * @memberof ExecutedConnectionRequestResponse
   */
  connectorId?: string;
  /**
   * The ID of the connection.
   * @type {string}
   * @memberof ExecutedConnectionRequestResponse
   */
  connectionId?: string;
  /**
   * The name of the connector.
   * @type {string}
   * @memberof ExecutedConnectionRequestResponse
   */
  connectorName?: string;
  /**
   * The date and time at which the connection has been created.
   * @type {string}
   * @memberof ExecutedConnectionRequestResponse
   */
  createdAt?: string;
  /**
   * The date and time at which the connection has been activated.
   * @type {string}
   * @memberof ExecutedConnectionRequestResponse
   */
  activatedAt?: string;
}
/**
 * Represents a default API response communicating result details of the request.
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
  /**
   * The actual response message.
   * @type {string}
   * @memberof GenericResponse
   */
  message?: string;
}
/**
 * @type GetDataSourcebyIdResponse
 * @export
 */
export type GetDataSourcebyIdResponse = DataSource | DataSourceValidationResult;

/**
 *
 * @export
 * @interface InvalidParameterError
 */
export interface InvalidParameterError {
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  name?: InvalidParameterErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  message?: InvalidParameterErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof InvalidParameterError
   */
  httpStatusCode?: InvalidParameterErrorHttpStatusCodeEnum;
}

export const InvalidParameterErrorNameEnum = {
  InvalidParameterError: 'InvalidParameterError',
} as const;

export type InvalidParameterErrorNameEnum =
  (typeof InvalidParameterErrorNameEnum)[keyof typeof InvalidParameterErrorNameEnum];
export const InvalidParameterErrorMessageEnum = {
  InvalidParameterParam: 'Invalid parameter: ${param}.',
} as const;

export type InvalidParameterErrorMessageEnum =
  (typeof InvalidParameterErrorMessageEnum)[keyof typeof InvalidParameterErrorMessageEnum];
export const InvalidParameterErrorHttpStatusCodeEnum = {
  NUMBER_400: 400,
} as const;

export type InvalidParameterErrorHttpStatusCodeEnum =
  (typeof InvalidParameterErrorHttpStatusCodeEnum)[keyof typeof InvalidParameterErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface InvalidParametersError
 */
export interface InvalidParametersError {
  /**
   *
   * @type {string}
   * @memberof InvalidParametersError
   */
  name?: InvalidParametersErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof InvalidParametersError
   */
  message?: InvalidParametersErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof InvalidParametersError
   */
  httpStatusCode?: InvalidParametersErrorHttpStatusCodeEnum;
}

export const InvalidParametersErrorNameEnum = {
  InvalidParametersError: 'InvalidParametersError',
} as const;

export type InvalidParametersErrorNameEnum =
  (typeof InvalidParametersErrorNameEnum)[keyof typeof InvalidParametersErrorNameEnum];
export const InvalidParametersErrorMessageEnum = {
  ClassNameInvalidParameters: '${className} invalid parameters.',
} as const;

export type InvalidParametersErrorMessageEnum =
  (typeof InvalidParametersErrorMessageEnum)[keyof typeof InvalidParametersErrorMessageEnum];
export const InvalidParametersErrorHttpStatusCodeEnum = {
  NUMBER_400: 400,
} as const;

export type InvalidParametersErrorHttpStatusCodeEnum =
  (typeof InvalidParametersErrorHttpStatusCodeEnum)[keyof typeof InvalidParametersErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface ItemAlreadyExistsError
 */
export interface ItemAlreadyExistsError {
  /**
   *
   * @type {string}
   * @memberof ItemAlreadyExistsError
   */
  name?: ItemAlreadyExistsErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof ItemAlreadyExistsError
   */
  message?: ItemAlreadyExistsErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof ItemAlreadyExistsError
   */
  httpStatusCode?: ItemAlreadyExistsErrorHttpStatusCodeEnum;
}

export const ItemAlreadyExistsErrorNameEnum = {
  ItemAlreadyExistsError: 'ItemAlreadyExistsError',
} as const;

export type ItemAlreadyExistsErrorNameEnum =
  (typeof ItemAlreadyExistsErrorNameEnum)[keyof typeof ItemAlreadyExistsErrorNameEnum];
export const ItemAlreadyExistsErrorMessageEnum = {
  ItemAlreadyExists: 'Item already exists',
} as const;

export type ItemAlreadyExistsErrorMessageEnum =
  (typeof ItemAlreadyExistsErrorMessageEnum)[keyof typeof ItemAlreadyExistsErrorMessageEnum];
export const ItemAlreadyExistsErrorHttpStatusCodeEnum = {
  NUMBER_409: 409,
} as const;

export type ItemAlreadyExistsErrorHttpStatusCodeEnum =
  (typeof ItemAlreadyExistsErrorHttpStatusCodeEnum)[keyof typeof ItemAlreadyExistsErrorHttpStatusCodeEnum];

/**
 * Mappings between common schemas and connectors
 * @export
 * @interface MappingsResponse
 */
export interface MappingsResponse {
  /**
   * A dictionary containing mappings between a common schema and a list of connectors
   * @type {{ [key: string]: Array<BasicConnectorDTO>; }}
   * @memberof MappingsResponse
   */
  mappings: { [key: string]: Array<BasicConnectorDTO> };
}
/**
 *
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  name?: NotFoundErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  message?: NotFoundErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof NotFoundError
   */
  httpStatusCode?: NotFoundErrorHttpStatusCodeEnum;
}

export const NotFoundErrorNameEnum = {
  NotFoundError: 'NotFoundError',
} as const;

export type NotFoundErrorNameEnum =
  (typeof NotFoundErrorNameEnum)[keyof typeof NotFoundErrorNameEnum];
export const NotFoundErrorMessageEnum = {
  NotFoundParam: 'Not found: ${param}.',
} as const;

export type NotFoundErrorMessageEnum =
  (typeof NotFoundErrorMessageEnum)[keyof typeof NotFoundErrorMessageEnum];
export const NotFoundErrorHttpStatusCodeEnum = {
  NUMBER_404: 404,
} as const;

export type NotFoundErrorHttpStatusCodeEnum =
  (typeof NotFoundErrorHttpStatusCodeEnum)[keyof typeof NotFoundErrorHttpStatusCodeEnum];

/**
 * Updates a connector\'s data source IDs or configuration.
 * @export
 * @interface PatchConnectorRequest
 */
export interface PatchConnectorRequest {
  /**
   * The updated list of data source IDs for the connector.
   * @type {Array<string>}
   * @memberof PatchConnectorRequest
   */
  dataSourceIds?: Array<string>;
  /**
   *
   * @type {ConnectorAuthConfig}
   * @memberof PatchConnectorRequest
   */
  config?: ConnectorAuthConfig;
  /**
   * The name of the connector.
   * @type {string}
   * @memberof PatchConnectorRequest
   */
  name?: string;
  /**
   * The new status of the connector.
   * @type {string}
   * @memberof PatchConnectorRequest
   */
  status?: PatchConnectorRequestStatusEnum;
  /**
   * The icon of the connector as base64 encoded string.
   * @type {string}
   * @memberof PatchConnectorRequest
   */
  icon?: string;
  /**
   * The URL of the website for the connector.
   * @type {string}
   * @memberof PatchConnectorRequest
   */
  websiteUri?: string;
}

export const PatchConnectorRequestStatusEnum = {
  Draft: 'DRAFT',
  Ready: 'READY',
} as const;

export type PatchConnectorRequestStatusEnum =
  (typeof PatchConnectorRequestStatusEnum)[keyof typeof PatchConnectorRequestStatusEnum];

/**
 * The response for activating or deactivating
 * @export
 * @interface PatchDataSourceConfigStatusResponse
 */
export interface PatchDataSourceConfigStatusResponse {
  /**
   *
   * @type {string}
   * @memberof PatchDataSourceConfigStatusResponse
   */
  ssoUrl?: string;
  /**
   *
   * @type {DataSourceConfig}
   * @memberof PatchDataSourceConfigStatusResponse
   */
  dataSourceConfig?: DataSourceConfig;
}
/**
 * The response for activating or deactivating
 * @export
 * @interface PatchDataSourceStatusResponse
 */
export interface PatchDataSourceStatusResponse {
  /**
   *
   * @type {string}
   * @memberof PatchDataSourceStatusResponse
   */
  ssoUrl?: string;
  /**
   *
   * @type {DataSource}
   * @memberof PatchDataSourceStatusResponse
   */
  dataSource?: DataSource;
}
/**
 * The Connector that hast just been created.
 * @export
 * @interface PostConnectorsResponse
 */
export interface PostConnectorsResponse {
  /**
   *
   * @type {ConnectorDTO}
   * @memberof PostConnectorsResponse
   */
  connector: ConnectorDTO;
}
/**
 *
 * @export
 * @interface ReferentialIntegrityError
 */
export interface ReferentialIntegrityError {
  /**
   *
   * @type {string}
   * @memberof ReferentialIntegrityError
   */
  name?: ReferentialIntegrityErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof ReferentialIntegrityError
   */
  message?: ReferentialIntegrityErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof ReferentialIntegrityError
   */
  httpStatusCode?: ReferentialIntegrityErrorHttpStatusCodeEnum;
}

export const ReferentialIntegrityErrorNameEnum = {
  ReferentialIntegrityError: 'ReferentialIntegrityError',
} as const;

export type ReferentialIntegrityErrorNameEnum =
  (typeof ReferentialIntegrityErrorNameEnum)[keyof typeof ReferentialIntegrityErrorNameEnum];
export const ReferentialIntegrityErrorMessageEnum = {
  IntegrityConstraint: 'Integrity constraint',
} as const;

export type ReferentialIntegrityErrorMessageEnum =
  (typeof ReferentialIntegrityErrorMessageEnum)[keyof typeof ReferentialIntegrityErrorMessageEnum];
export const ReferentialIntegrityErrorHttpStatusCodeEnum = {
  NUMBER_409: 409,
} as const;

export type ReferentialIntegrityErrorHttpStatusCodeEnum =
  (typeof ReferentialIntegrityErrorHttpStatusCodeEnum)[keyof typeof ReferentialIntegrityErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface ResourceNotFoundError
 */
export interface ResourceNotFoundError {
  /**
   *
   * @type {string}
   * @memberof ResourceNotFoundError
   */
  name?: ResourceNotFoundErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof ResourceNotFoundError
   */
  message?: ResourceNotFoundErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof ResourceNotFoundError
   */
  httpStatusCode?: ResourceNotFoundErrorHttpStatusCodeEnum;
}

export const ResourceNotFoundErrorNameEnum = {
  ResourceNotFoundError: 'ResourceNotFoundError',
} as const;

export type ResourceNotFoundErrorNameEnum =
  (typeof ResourceNotFoundErrorNameEnum)[keyof typeof ResourceNotFoundErrorNameEnum];
export const ResourceNotFoundErrorMessageEnum = {
  TheRequestedResourceHasNotBeenFound:
    'The requested resource has not been found',
} as const;

export type ResourceNotFoundErrorMessageEnum =
  (typeof ResourceNotFoundErrorMessageEnum)[keyof typeof ResourceNotFoundErrorMessageEnum];
export const ResourceNotFoundErrorHttpStatusCodeEnum = {
  NUMBER_404: 404,
} as const;

export type ResourceNotFoundErrorHttpStatusCodeEnum =
  (typeof ResourceNotFoundErrorHttpStatusCodeEnum)[keyof typeof ResourceNotFoundErrorHttpStatusCodeEnum];

/**
 * This schema represents the default response in case of an API call resulting in an error.
 * @export
 * @interface ServiceErrorResponse
 */
export interface ServiceErrorResponse {
  /**
   * An unique id for correlating this specific error to logs.
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  debugId: string;
  /**
   * The name of the error.
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  name: string;
  /**
   * The backwards compatible Affinidi error code.
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  code: string;
  /**
   * An optional list of explanatatory details about the occured errors.
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof ServiceErrorResponse
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}
/**
 * Details about an input error informing about the location and the reason of the error.
 * @export
 * @interface ServiceErrorResponseDetailsInner
 */
export interface ServiceErrorResponseDetailsInner {
  /**
   * Information about what the error is about.
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  issue: string;
  /**
   * Indicates the field which contains or is the issue.
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  field?: string;
  /**
   * Indicates the field value which contains or is the issue.
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  value?: string;
  /**
   * Indicates where the error occurred.
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  location?: ServiceErrorResponseDetailsInnerLocationEnum;
}

export const ServiceErrorResponseDetailsInnerLocationEnum = {
  Body: 'BODY',
  Path: 'PATH',
  Query: 'QUERY',
} as const;

export type ServiceErrorResponseDetailsInnerLocationEnum =
  (typeof ServiceErrorResponseDetailsInnerLocationEnum)[keyof typeof ServiceErrorResponseDetailsInnerLocationEnum];

/**
 *
 * @export
 * @interface TransformationTemplateDto
 */
export interface TransformationTemplateDto {
  /**
   *
   * @type {string}
   * @memberof TransformationTemplateDto
   */
  endpoint: string;
  /**
   *
   * @type {string}
   * @memberof TransformationTemplateDto
   */
  targetSchemaUrl: string;
  /**
   *
   * @type {TransformationTemplateDtoSchemaMapping}
   * @memberof TransformationTemplateDto
   */
  schemaMapping: TransformationTemplateDtoSchemaMapping;
}
/**
 *
 * @export
 * @interface TransformationTemplateDtoSchemaMapping
 */
export interface TransformationTemplateDtoSchemaMapping {
  /**
   *
   * @type {Array<TransformationTemplateDtoSchemaMappingTransformationsInner>}
   * @memberof TransformationTemplateDtoSchemaMapping
   */
  transformations: Array<TransformationTemplateDtoSchemaMappingTransformationsInner>;
  /**
   *
   * @type {Array<TransformationTemplateDtoSchemaMappingAggregationsInner>}
   * @memberof TransformationTemplateDtoSchemaMapping
   */
  aggregations: Array<TransformationTemplateDtoSchemaMappingAggregationsInner>;
}
/**
 *
 * @export
 * @interface TransformationTemplateDtoSchemaMappingAggregationsInner
 */
export interface TransformationTemplateDtoSchemaMappingAggregationsInner {
  [key: string]: any;

  /**
   *
   * @type {string}
   * @memberof TransformationTemplateDtoSchemaMappingAggregationsInner
   */
  name: string;
  /**
   *
   * @type {Array<string>}
   * @memberof TransformationTemplateDtoSchemaMappingAggregationsInner
   */
  fields?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof TransformationTemplateDtoSchemaMappingAggregationsInner
   */
  resultField?: string;
}
/**
 *
 * @export
 * @interface TransformationTemplateDtoSchemaMappingTransformationsInner
 */
export interface TransformationTemplateDtoSchemaMappingTransformationsInner {
  [key: string]: any;

  /**
   *
   * @type {string}
   * @memberof TransformationTemplateDtoSchemaMappingTransformationsInner
   */
  name: string;
  /**
   *
   * @type {Array<string>}
   * @memberof TransformationTemplateDtoSchemaMappingTransformationsInner
   */
  fields?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof TransformationTemplateDtoSchemaMappingTransformationsInner
   */
  resultField?: string;
}
/**
 *
 * @export
 * @interface UnauthorizedError
 */
export interface UnauthorizedError {
  /**
   *
   * @type {string}
   * @memberof UnauthorizedError
   */
  name?: UnauthorizedErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof UnauthorizedError
   */
  message?: UnauthorizedErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof UnauthorizedError
   */
  httpStatusCode?: UnauthorizedErrorHttpStatusCodeEnum;
}

export const UnauthorizedErrorNameEnum = {
  UnauthorizedError: 'UnauthorizedError',
} as const;

export type UnauthorizedErrorNameEnum =
  (typeof UnauthorizedErrorNameEnum)[keyof typeof UnauthorizedErrorNameEnum];
export const UnauthorizedErrorMessageEnum = {
  UnauthorizedRequest: 'Unauthorized request',
} as const;

export type UnauthorizedErrorMessageEnum =
  (typeof UnauthorizedErrorMessageEnum)[keyof typeof UnauthorizedErrorMessageEnum];
export const UnauthorizedErrorHttpStatusCodeEnum = {
  NUMBER_401: 401,
} as const;

export type UnauthorizedErrorHttpStatusCodeEnum =
  (typeof UnauthorizedErrorHttpStatusCodeEnum)[keyof typeof UnauthorizedErrorHttpStatusCodeEnum];
