/* tslint:disable */
/* eslint-disable */
/**
 * OidcVpAdapterBackend
 * Affinidi OIDC VP Adapter Backend  An authorization token is necessary to create or obtain a project Access Token and access Admin APIs. Follow these step-by-step [instructions](https://lemmatree.atlassian.net/wiki/spaces/NETCORE/pages/2735317648020/ASA+Developer+Flow#Instructions-on-how-to-create-the-Project.)  to set up an authorization token
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nucleus.team@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base'

/**
 *
 * @export
 * @interface ActionForbiddenError
 */
export interface ActionForbiddenError {
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenError
   */
  name: ActionForbiddenErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenError
   */
  message: ActionForbiddenErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof ActionForbiddenError
   */
  httpStatusCode: ActionForbiddenErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenError
   */
  traceId: string
  /**
   *
   * @type {Array<InvalidParameterErrorDetailsInner>}
   * @memberof ActionForbiddenError
   */
  details?: Array<InvalidParameterErrorDetailsInner>
}

export const ActionForbiddenErrorNameEnum = {
  ActionForbiddenError: 'ActionForbiddenError',
} as const

export type ActionForbiddenErrorNameEnum =
  (typeof ActionForbiddenErrorNameEnum)[keyof typeof ActionForbiddenErrorNameEnum]
export const ActionForbiddenErrorMessageEnum = {
  PrincipalCanNotExecuteActionOnGivenResource:
    'Principal can not execute action on given resource',
} as const

export type ActionForbiddenErrorMessageEnum =
  (typeof ActionForbiddenErrorMessageEnum)[keyof typeof ActionForbiddenErrorMessageEnum]
export const ActionForbiddenErrorHttpStatusCodeEnum = {
  NUMBER_403: 403,
} as const

export type ActionForbiddenErrorHttpStatusCodeEnum =
  (typeof ActionForbiddenErrorHttpStatusCodeEnum)[keyof typeof ActionForbiddenErrorHttpStatusCodeEnum]

/**
 * input used to add a user to a group
 * @export
 * @interface AddUserToGroupInput
 */
export interface AddUserToGroupInput {
  /**
   * Unique identifier of the user
   * @type {string}
   * @memberof AddUserToGroupInput
   */
  userId: string
}
/**
 *
 * @export
 * @interface BlockedUsers
 */
export interface BlockedUsers {
  /**
   *
   * @type {Array<string>}
   * @memberof BlockedUsers
   */
  userIds: Array<string>
  /**
   *
   * @type {object}
   * @memberof BlockedUsers
   */
  pageToken?: object
}
/**
 *
 * @export
 * @interface BlockedUsersInput
 */
export interface BlockedUsersInput {
  /**
   *
   * @type {Array<string>}
   * @memberof BlockedUsersInput
   */
  userIds: Array<string>
}
/**
 *
 * @export
 * @interface CorsLoginSessionAcceptResponseOK
 */
export interface CorsLoginSessionAcceptResponseOK {
  /**
   *
   * @type {string}
   * @memberof CorsLoginSessionAcceptResponseOK
   */
  corsLoginSessionAcceptResponseOk?: string
}
/**
 *
 * @export
 * @interface CorsLoginSessionForIdpOK
 */
export interface CorsLoginSessionForIdpOK {
  /**
   *
   * @type {string}
   * @memberof CorsLoginSessionForIdpOK
   */
  corsLoginSessionForIdpOk?: string
}
/**
 *
 * @export
 * @interface CorsLoginSessionRejectResponseOK
 */
export interface CorsLoginSessionRejectResponseOK {
  /**
   *
   * @type {string}
   * @memberof CorsLoginSessionRejectResponseOK
   */
  corsLoginSessionRejectResponseOk?: string
}
/**
 *
 * @export
 * @interface CreateGroupInput
 */
export interface CreateGroupInput {
  /**
   * name of the group for users, used as an id
   * @type {string}
   * @memberof CreateGroupInput
   */
  groupName: string
}
/**
 *
 * @export
 * @interface CreateLoginConfigurationInput
 */
export interface CreateLoginConfigurationInput {
  /**
   * User defined login configuration name
   * @type {string}
   * @memberof CreateLoginConfigurationInput
   */
  name: string
  /**
   * OAuth 2.0 Redirect URIs
   * @type {Array<string>}
   * @memberof CreateLoginConfigurationInput
   */
  redirectUris: Array<string>
  /**
   * VP definition in JSON stringify format
   * @type {string}
   * @memberof CreateLoginConfigurationInput
   */
  vpDefinition?: string
  /**
   * Presentation Definition
   * @type {object}
   * @memberof CreateLoginConfigurationInput
   */
  presentationDefinition?: object
  /**
   *
   * @type {IdTokenMapping}
   * @memberof CreateLoginConfigurationInput
   */
  idTokenMapping?: IdTokenMapping
  /**
   *
   * @type {LoginConfigurationClientMetadataInput}
   * @memberof CreateLoginConfigurationInput
   */
  clientMetadata?: LoginConfigurationClientMetadataInput
  /**
   * ID token claims output format. Default is array.
   * @type {string}
   * @memberof CreateLoginConfigurationInput
   */
  claimFormat?: CreateLoginConfigurationInputClaimFormatEnum
  /**
   * Interrupts login process if duplications of data fields names will be found
   * @type {boolean}
   * @memberof CreateLoginConfigurationInput
   */
  failOnMappingConflict?: boolean
  /**
   * List of groups separated by space
   * @type {string}
   * @memberof CreateLoginConfigurationInput
   */
  scope?: string
  /**
   *
   * @type {TokenEndpointAuthMethod}
   * @memberof CreateLoginConfigurationInput
   */
  tokenEndpointAuthMethod?: TokenEndpointAuthMethod
}

export const CreateLoginConfigurationInputClaimFormatEnum = {
  Array: 'array',
  Map: 'map',
} as const

export type CreateLoginConfigurationInputClaimFormatEnum =
  (typeof CreateLoginConfigurationInputClaimFormatEnum)[keyof typeof CreateLoginConfigurationInputClaimFormatEnum]

/**
 *
 * @export
 * @interface CreateLoginConfigurationOutput
 */
export interface CreateLoginConfigurationOutput {
  /**
   * Configuration ari
   * @type {string}
   * @memberof CreateLoginConfigurationOutput
   */
  ari: string
  /**
   * Project id
   * @type {string}
   * @memberof CreateLoginConfigurationOutput
   */
  projectId: string
  /**
   * Configuration id
   * @type {string}
   * @memberof CreateLoginConfigurationOutput
   */
  configurationId?: string
  /**
   * User defined login configuration name
   * @type {string}
   * @memberof CreateLoginConfigurationOutput
   */
  name: string
  /**
   *
   * @type {CreateLoginConfigurationOutputAuth}
   * @memberof CreateLoginConfigurationOutput
   */
  auth: CreateLoginConfigurationOutputAuth
  /**
   * OAuth 2.0 Redirect URIs
   * @type {Array<string>}
   * @memberof CreateLoginConfigurationOutput
   */
  redirectUris: Array<string>
  /**
   *
   * @type {LoginConfigurationClientMetadataOutput}
   * @memberof CreateLoginConfigurationOutput
   */
  clientMetadata: LoginConfigurationClientMetadataOutput
  /**
   * OAuth 2.0 Client Creation Date
   * @type {string}
   * @memberof CreateLoginConfigurationOutput
   */
  creationDate: string
}
/**
 * OIDC Auth Credentials
 * @export
 * @interface CreateLoginConfigurationOutputAuth
 */
export interface CreateLoginConfigurationOutputAuth {
  /**
   * OAuth 2.0 Client ID
   * @type {string}
   * @memberof CreateLoginConfigurationOutputAuth
   */
  clientId: string
  /**
   * OAuth 2.0 Client Secret
   * @type {string}
   * @memberof CreateLoginConfigurationOutputAuth
   */
  clientSecret?: string
  /**
   * OAuth 2.0 Client Scope
   * @type {string}
   * @memberof CreateLoginConfigurationOutputAuth
   */
  scope?: string
  /**
   * Issuer URL
   * @type {string}
   * @memberof CreateLoginConfigurationOutputAuth
   */
  issuer?: string
}
/**
 *
 * @export
 * @interface ErrorOAuth2
 */
export interface ErrorOAuth2 {
  /**
   * Error
   * @type {string}
   * @memberof ErrorOAuth2
   */
  error: string
  /**
   * Error Debug Information. Only available in dev mode.
   * @type {string}
   * @memberof ErrorOAuth2
   */
  error_debug?: string
  /**
   * Error Description
   * @type {string}
   * @memberof ErrorOAuth2
   */
  error_description: string
  /**
   * Error Hint. Helps the user identify the error cause.
   * @type {string}
   * @memberof ErrorOAuth2
   */
  error_hint?: string
  /**
   * HTTP Status Code
   * @type {string}
   * @memberof ErrorOAuth2
   */
  status_code: string
}
/**
 *
 * @export
 * @interface GetUserInfo
 */
export interface GetUserInfo {
  /**
   * End-User\'s birthday, represented as an ISO 8601:2004 [ISO8601â€‘2004] YYYY-MM-DD format.  The year MAY be 0000, indicating that it is omitted. To represent only the year,  YYYY format is allowed. Note that depending on the underlying platform\'s date related  function, providing just year can result in varying month and day, so the implementers  need to take this factor into account to correctly process the dates.
   * @type {string}
   * @memberof GetUserInfo
   */
  birthdate?: string
  /**
   * End-User\'s preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322]  addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
   * @type {string}
   * @memberof GetUserInfo
   */
  email?: string
  /**
   * True if the End-User\'s e-mail address has been verified; otherwise false. When this  Claim Value is true, this means that the OP took affirmative steps to ensure that  this e-mail address was controlled by the End-User at the time the verification was  performed. The means by which an e-mail address is verified is context-specific, and  dependent upon the trust framework or contractual agreements within which the parties  are operating.
   * @type {boolean}
   * @memberof GetUserInfo
   */
  email_verified?: boolean
  /**
   * Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have  multiple family names or no family name; all can be present, with the names being  separated by space characters.
   * @type {string}
   * @memberof GetUserInfo
   */
  family_name?: string
  /**
   * End-User\'s gender. Values defined by this specification are female and male.  Other values MAY be used when neither of the defined values are applicable.
   * @type {string}
   * @memberof GetUserInfo
   */
  gender?: string
  /**
   * Given name(s) or first name(s) of the End-User. Note that in some cultures,  people can have multiple given names; all can be present, with the names being  separated by space characters.
   * @type {string}
   * @memberof GetUserInfo
   */
  given_name?: string
  /**
   * End-User\'s locale, represented as a BCP47 [RFC5646] language tag. This is  typically an ISO 639-1 Alpha-2 [ISO639â€‘1] language code in lowercase and an  ISO 3166-1 Alpha-2 [ISO3166â€‘1] country code in uppercase, separated by a dash.  For example, en-US or fr-CA. As a compatibility note, some implementations have  used an underscore as the separator rather than a dash, for example, en_US;  Relying Parties MAY choose to accept this locale syntax as well.
   * @type {string}
   * @memberof GetUserInfo
   */
  locale?: string
  /**
   * Middle name(s) of the End-User. Note that in some cultures, people can have  multiple middle names; all can be present, with the names being separated by  space characters. Also note that in some cultures, middle names are not used.
   * @type {string}
   * @memberof GetUserInfo
   */
  middle_name?: string
  /**
   * End-User\'s full name in displayable form including all name parts, possibly  including titles and suffixes, ordered according to the End-User\'s locale and preferences.
   * @type {string}
   * @memberof GetUserInfo
   */
  name?: string
  /**
   * Casual name of the End-User that may or may not be the same as the given_name.  For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
   * @type {string}
   * @memberof GetUserInfo
   */
  nickname?: string
  /**
   * End-User\'s preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim,  for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension,  it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax,  for example, +1 (604) 555-1234;ext=5678.
   * @type {string}
   * @memberof GetUserInfo
   */
  phone_number?: string
  /**
   * True if the End-User\'s phone number has been verified; otherwise false. When this Claim  Value is true, this means that the OP took affirmative steps to ensure that this phone  number was controlled by the End-User at the time the verification was performed. The means  by which a phone number is verified is context-specific, and dependent upon the trust framework  or contractual agreements within which the parties are operating. When true, the phone_number  Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
   * @type {boolean}
   * @memberof GetUserInfo
   */
  phone_number_verified?: boolean
  /**
   * URL of the End-User\'s profile picture. This URL MUST refer to an image file (for example, a PNG,  JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD  specifically reference a profile photo of the End-User suitable for displaying when describing the  End-User, rather than an arbitrary photo taken by the End-User.
   * @type {string}
   * @memberof GetUserInfo
   */
  picture?: string
  /**
   * Non-unique shorthand name by which the End-User wishes to be referred to at the RP, such as  janedoe or j.doe. This value MAY be any valid JSON string including special characters  such as @, /, or whitespace.
   * @type {string}
   * @memberof GetUserInfo
   */
  preferred_username?: string
  /**
   * URL of the End-User\'s profile page. The contents of this Web page SHOULD be about the End-User.
   * @type {string}
   * @memberof GetUserInfo
   */
  profile?: string
  /**
   * Subject - Identifier for the End-User at the IssuerURL.
   * @type {string}
   * @memberof GetUserInfo
   */
  sub?: string
  /**
   * Time the End-User\'s information was last updated. Its value is a JSON number  representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
   * @type {number}
   * @memberof GetUserInfo
   */
  updated_at?: number
  /**
   * URL of the End-User\'s Web page or blog. This Web page SHOULD contain information  published by the End-User or an organization that the End-User is affiliated with.
   * @type {string}
   * @memberof GetUserInfo
   */
  website?: string
  /**
   * String from zoneinfo [zoneinfo] time zone database representing the End-User\'s  time zone. For example, Europe/Paris or America/Los_Angeles.
   * @type {string}
   * @memberof GetUserInfo
   */
  zoneinfo?: string
}
/**
 *
 * @export
 * @interface GroupDto
 */
export interface GroupDto {
  /**
   * Group ari
   * @type {string}
   * @memberof GroupDto
   */
  ari: string
  /**
   * Project id
   * @type {string}
   * @memberof GroupDto
   */
  projectId: string
  /**
   * name of the group, identifier within a project
   * @type {string}
   * @memberof GroupDto
   */
  groupName: string
  /**
   * Group creation date
   * @type {string}
   * @memberof GroupDto
   */
  creationDate: string
}
/**
 *
 * @export
 * @interface GroupNames
 */
export interface GroupNames {
  /**
   *
   * @type {Array<string>}
   * @memberof GroupNames
   */
  groupNames: Array<string>
  /**
   *
   * @type {object}
   * @memberof GroupNames
   */
  pageToken?: object
}
/**
 *
 * @export
 * @interface GroupNamesInput
 */
export interface GroupNamesInput {
  /**
   *
   * @type {Array<string>}
   * @memberof GroupNamesInput
   */
  groupNames: Array<string>
}
/**
 *
 * @export
 * @interface GroupUserMappingDto
 */
export interface GroupUserMappingDto {
  /**
   * Unique identifier of the user
   * @type {string}
   * @memberof GroupUserMappingDto
   */
  userId: string
  /**
   * Group to user mapping creation date
   * @type {string}
   * @memberof GroupUserMappingDto
   */
  addedAt: string
}
/**
 *
 * @export
 * @interface GroupUserMappingsList
 */
export interface GroupUserMappingsList {
  /**
   *
   * @type {Array<GroupUserMappingDto>}
   * @memberof GroupUserMappingsList
   */
  users?: Array<GroupUserMappingDto>
  /**
   *
   * @type {string}
   * @memberof GroupUserMappingsList
   */
  lastEvaluatedKey?: string
  /**
   *
   * @type {number}
   * @memberof GroupUserMappingsList
   */
  totalUserCount?: number
}
/**
 *
 * @export
 * @interface GroupsList
 */
export interface GroupsList {
  /**
   *
   * @type {Array<GroupDto>}
   * @memberof GroupsList
   */
  groups?: Array<GroupDto>
}
/**
 *
 * @export
 * @interface GroupsPerUserLimitExceededError
 */
export interface GroupsPerUserLimitExceededError {
  /**
   *
   * @type {string}
   * @memberof GroupsPerUserLimitExceededError
   */
  name: GroupsPerUserLimitExceededErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof GroupsPerUserLimitExceededError
   */
  message: GroupsPerUserLimitExceededErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof GroupsPerUserLimitExceededError
   */
  httpStatusCode: GroupsPerUserLimitExceededErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof GroupsPerUserLimitExceededError
   */
  traceId: string
  /**
   *
   * @type {Array<InvalidParameterErrorDetailsInner>}
   * @memberof GroupsPerUserLimitExceededError
   */
  details?: Array<InvalidParameterErrorDetailsInner>
}

export const GroupsPerUserLimitExceededErrorNameEnum = {
  GroupsPerUserLimitExceededError: 'GroupsPerUserLimitExceededError',
} as const

export type GroupsPerUserLimitExceededErrorNameEnum =
  (typeof GroupsPerUserLimitExceededErrorNameEnum)[keyof typeof GroupsPerUserLimitExceededErrorNameEnum]
export const GroupsPerUserLimitExceededErrorMessageEnum = {
  AmountOfGroupsPerUserIsLimited: 'Amount of groups per user is limited.',
} as const

export type GroupsPerUserLimitExceededErrorMessageEnum =
  (typeof GroupsPerUserLimitExceededErrorMessageEnum)[keyof typeof GroupsPerUserLimitExceededErrorMessageEnum]
export const GroupsPerUserLimitExceededErrorHttpStatusCodeEnum = {
  NUMBER_409: 409,
} as const

export type GroupsPerUserLimitExceededErrorHttpStatusCodeEnum =
  (typeof GroupsPerUserLimitExceededErrorHttpStatusCodeEnum)[keyof typeof GroupsPerUserLimitExceededErrorHttpStatusCodeEnum]

/**
 * Fields name/path mapping between the vp_token and the id_token
 * @export
 * @interface IdTokenMapping
 */
export interface IdTokenMapping extends Array<IdTokenMappingInner> {}
/**
 *
 * @export
 * @interface IdTokenMappingInner
 */
export interface IdTokenMappingInner {
  /**
   * Name(path) of the corresponding field in the vp_token
   * @type {string}
   * @memberof IdTokenMappingInner
   */
  sourceField: string
  /**
   * Name of the corresponding field in the id_token
   * @type {string}
   * @memberof IdTokenMappingInner
   */
  idTokenClaim: string
  /**
   * Id of related input descriptor from presentation definition
   * @type {string}
   * @memberof IdTokenMappingInner
   */
  inputDescriptorId?: string
}
/**
 *
 * @export
 * @interface InvalidGroupsError
 */
export interface InvalidGroupsError {
  /**
   *
   * @type {string}
   * @memberof InvalidGroupsError
   */
  name: InvalidGroupsErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof InvalidGroupsError
   */
  message: InvalidGroupsErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof InvalidGroupsError
   */
  httpStatusCode: InvalidGroupsErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof InvalidGroupsError
   */
  traceId: string
  /**
   *
   * @type {Array<InvalidParameterErrorDetailsInner>}
   * @memberof InvalidGroupsError
   */
  details?: Array<InvalidParameterErrorDetailsInner>
}

export const InvalidGroupsErrorNameEnum = {
  InvalidGroupsError: 'InvalidGroupsError',
} as const

export type InvalidGroupsErrorNameEnum =
  (typeof InvalidGroupsErrorNameEnum)[keyof typeof InvalidGroupsErrorNameEnum]
export const InvalidGroupsErrorMessageEnum = {
  InvalidGroupsNames: 'Invalid groups names',
} as const

export type InvalidGroupsErrorMessageEnum =
  (typeof InvalidGroupsErrorMessageEnum)[keyof typeof InvalidGroupsErrorMessageEnum]
export const InvalidGroupsErrorHttpStatusCodeEnum = {
  NUMBER_400: 400,
} as const

export type InvalidGroupsErrorHttpStatusCodeEnum =
  (typeof InvalidGroupsErrorHttpStatusCodeEnum)[keyof typeof InvalidGroupsErrorHttpStatusCodeEnum]

/**
 *
 * @export
 * @interface InvalidParameterError
 */
export interface InvalidParameterError {
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  name: InvalidParameterErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  message: InvalidParameterErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof InvalidParameterError
   */
  httpStatusCode: InvalidParameterErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  traceId: string
  /**
   *
   * @type {Array<InvalidParameterErrorDetailsInner>}
   * @memberof InvalidParameterError
   */
  details?: Array<InvalidParameterErrorDetailsInner>
}

export const InvalidParameterErrorNameEnum = {
  InvalidParameterError: 'InvalidParameterError',
} as const

export type InvalidParameterErrorNameEnum =
  (typeof InvalidParameterErrorNameEnum)[keyof typeof InvalidParameterErrorNameEnum]
export const InvalidParameterErrorMessageEnum = {
  InvalidParameterParam: 'Invalid parameter: ${param}.',
} as const

export type InvalidParameterErrorMessageEnum =
  (typeof InvalidParameterErrorMessageEnum)[keyof typeof InvalidParameterErrorMessageEnum]
export const InvalidParameterErrorHttpStatusCodeEnum = {
  NUMBER_400: 400,
} as const

export type InvalidParameterErrorHttpStatusCodeEnum =
  (typeof InvalidParameterErrorHttpStatusCodeEnum)[keyof typeof InvalidParameterErrorHttpStatusCodeEnum]

/**
 *
 * @export
 * @interface InvalidParameterErrorDetailsInner
 */
export interface InvalidParameterErrorDetailsInner {
  /**
   *
   * @type {string}
   * @memberof InvalidParameterErrorDetailsInner
   */
  issue: string
  /**
   *
   * @type {string}
   * @memberof InvalidParameterErrorDetailsInner
   */
  field?: string
  /**
   *
   * @type {string}
   * @memberof InvalidParameterErrorDetailsInner
   */
  value?: string
  /**
   *
   * @type {string}
   * @memberof InvalidParameterErrorDetailsInner
   */
  location?: string
}
/**
 *
 * @export
 * @interface JsonWebKey
 */
export interface JsonWebKey {
  /**
   * The value of the \"keys\" parameter is an array of JSON Web Key (JWK) values.  By default, the order of the JWK values within the array does not imply an  order of preference among them, although applications of JWK Sets can choose  to assign a meaning to the order for their purposes, if desired.
   * @type {Array<JsonWebKeyKeysInner>}
   * @memberof JsonWebKey
   */
  keys?: Array<JsonWebKeyKeysInner>
}
/**
 *
 * @export
 * @interface JsonWebKeyKeysInner
 */
export interface JsonWebKeyKeysInner {
  /**
   * The \"alg\" (algorithm) parameter identifies the algorithm intended for use  with the key. The values used should either be registered in the IANA  \"JSON Web Signature and Encryption Algorithms\" registry established  by [JWA] or be a value that contains a Collision- Resistant Name.
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  alg: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  crv?: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  d?: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  dp?: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  dq?: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  e?: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  k?: string
  /**
   * The \"kid\" (key ID) parameter is used to match a specific key. This is used,  for instance, to choose among a set of keys within a JWK Set during key  rollover. The structure of the \"kid\" value is unspecified. When \"kid\"  values are used within a JWK Set, different keys within the JWK Set SHOULD  use distinct \"kid\" values. (One example in which different keys might use  the same \"kid\" value is if they have different \"kty\" (key type) values but  are considered to be equivalent alternatives by the application using them.)  The \"kid\" value is a case-sensitive string.
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  kid: string
  /**
   * The \"kty\" (key type) parameter identifies the cryptographic algorithm family  used with the key, such as \"RSA\" or \"EC\". \"kty\" values should either be  registered in the IANA \"JSON Web Key Types\" registry established by [JWA]  or be a value that contains a Collision- Resistant Name. The \"kty\" value  is a case-sensitive string.
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  kty: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  n?: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  p?: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  q?: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  qi?: string
  /**
   * Use (\"public key use\") identifies the intended use of the public key. The  \"use\" parameter is employed to indicate whether a public key is used for  encrypting data or verifying the signature on data. Values are commonly  \"sig\" (signature) or \"enc\" (encryption).
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  use: string
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  x?: string
  /**
   * The \"x5c\" (X.509 certificate chain) parameter contains a chain of one  or more PKIX certificates [RFC5280]. The certificate chain is represented  as a JSON array of certificate value strings. Each string in the array is  a base64-encoded (Section 4 of [RFC4648] -- not base64url-encoded) DER  [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the  key value MUST be the first certificate.
   * @type {Array<string>}
   * @memberof JsonWebKeyKeysInner
   */
  x5c: Array<string>
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyKeysInner
   */
  y?: string
}
/**
 *
 * @export
 * @interface ListLoginConfigurationOutput
 */
export interface ListLoginConfigurationOutput {
  /**
   *
   * @type {Array<LoginConfigurationObject>}
   * @memberof ListLoginConfigurationOutput
   */
  configurations: Array<LoginConfigurationObject>
  /**
   *
   * @type {string}
   * @memberof ListLoginConfigurationOutput
   */
  lastEvaluatedKey?: string
}
/**
 * login configuration client metadata
 * @export
 * @interface LoginConfigurationClientMetadataInput
 */
export interface LoginConfigurationClientMetadataInput {
  /**
   * application name that will be displayed in consent page
   * @type {string}
   * @memberof LoginConfigurationClientMetadataInput
   */
  name: string
  /**
   * origin url that will be displayed in consent page
   * @type {string}
   * @memberof LoginConfigurationClientMetadataInput
   */
  origin: string
  /**
   * logo url that will be displayed in consent page
   * @type {string}
   * @memberof LoginConfigurationClientMetadataInput
   */
  logo: string
}
/**
 * login configuration client metadata
 * @export
 * @interface LoginConfigurationClientMetadataOutput
 */
export interface LoginConfigurationClientMetadataOutput {
  [key: string]: any

  /**
   * application name that will be displayed in consent page
   * @type {string}
   * @memberof LoginConfigurationClientMetadataOutput
   */
  name: string
  /**
   * origin url that will be displayed in consent page
   * @type {string}
   * @memberof LoginConfigurationClientMetadataOutput
   */
  origin: string
  /**
   * logo url that will be displayed in consent page
   * @type {string}
   * @memberof LoginConfigurationClientMetadataOutput
   */
  logo: string
  /**
   * indicates if the developer\'s ownership of the domain has been verified
   * @type {boolean}
   * @memberof LoginConfigurationClientMetadataOutput
   */
  domainVerified?: boolean
}
/**
 *
 * @export
 * @interface LoginConfigurationObject
 */
export interface LoginConfigurationObject {
  [key: string]: any

  /**
   * Configuration ari
   * @type {string}
   * @memberof LoginConfigurationObject
   */
  ari: string
  /**
   * Configuration id
   * @type {string}
   * @memberof LoginConfigurationObject
   */
  configurationId?: string
  /**
   * Project id
   * @type {string}
   * @memberof LoginConfigurationObject
   */
  projectId: string
  /**
   * User defined login configuration name
   * @type {string}
   * @memberof LoginConfigurationObject
   */
  name: string
  /**
   * OAuth 2.0 Redirect URIs
   * @type {Array<string>}
   * @memberof LoginConfigurationObject
   */
  redirectUris?: Array<string>
  /**
   * OAuth 2.0 Client Scope
   * @type {string}
   * @memberof LoginConfigurationObject
   */
  scope?: string
  /**
   * OAuth 2.0 Client ID
   * @type {string}
   * @memberof LoginConfigurationObject
   */
  clientId: string
  /**
   * OAuth 2.0 Client Creation Date
   * @type {string}
   * @memberof LoginConfigurationObject
   */
  creationDate: string
  /**
   * VP definition in JSON stringify format
   * @type {string}
   * @memberof LoginConfigurationObject
   */
  vpDefinition: string
  /**
   * Presentation Definition
   * @type {object}
   * @memberof LoginConfigurationObject
   */
  presentationDefinition?: object
  /**
   *
   * @type {IdTokenMapping}
   * @memberof LoginConfigurationObject
   */
  idTokenMapping: IdTokenMapping
  /**
   *
   * @type {LoginConfigurationClientMetadataOutput}
   * @memberof LoginConfigurationObject
   */
  clientMetadata: LoginConfigurationClientMetadataOutput
  /**
   *
   * @type {TokenEndpointAuthMethod}
   * @memberof LoginConfigurationObject
   */
  tokenEndpointAuthMethod: TokenEndpointAuthMethod
}

/**
 *
 * @export
 * @interface LoginConfigurationReadInvalidClientIdError
 */
export interface LoginConfigurationReadInvalidClientIdError {
  /**
   *
   * @type {string}
   * @memberof LoginConfigurationReadInvalidClientIdError
   */
  name: LoginConfigurationReadInvalidClientIdErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof LoginConfigurationReadInvalidClientIdError
   */
  message: LoginConfigurationReadInvalidClientIdErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof LoginConfigurationReadInvalidClientIdError
   */
  httpStatusCode: LoginConfigurationReadInvalidClientIdErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof LoginConfigurationReadInvalidClientIdError
   */
  traceId: string
  /**
   *
   * @type {Array<InvalidParameterErrorDetailsInner>}
   * @memberof LoginConfigurationReadInvalidClientIdError
   */
  details?: Array<InvalidParameterErrorDetailsInner>
}

export const LoginConfigurationReadInvalidClientIdErrorNameEnum = {
  LoginConfigurationReadInvalidClientIdError:
    'LoginConfigurationReadInvalidClientIdError',
} as const

export type LoginConfigurationReadInvalidClientIdErrorNameEnum =
  (typeof LoginConfigurationReadInvalidClientIdErrorNameEnum)[keyof typeof LoginConfigurationReadInvalidClientIdErrorNameEnum]
export const LoginConfigurationReadInvalidClientIdErrorMessageEnum = {
  LoginConfigurationReadInvalidClientIdError:
    'LoginConfigurationReadInvalidClientIdError',
} as const

export type LoginConfigurationReadInvalidClientIdErrorMessageEnum =
  (typeof LoginConfigurationReadInvalidClientIdErrorMessageEnum)[keyof typeof LoginConfigurationReadInvalidClientIdErrorMessageEnum]
export const LoginConfigurationReadInvalidClientIdErrorHttpStatusCodeEnum = {
  NUMBER_400: 400,
} as const

export type LoginConfigurationReadInvalidClientIdErrorHttpStatusCodeEnum =
  (typeof LoginConfigurationReadInvalidClientIdErrorHttpStatusCodeEnum)[keyof typeof LoginConfigurationReadInvalidClientIdErrorHttpStatusCodeEnum]

/**
 * Authorization Response per OpenID for Verifiable Presentations Specification
 * @export
 * @interface LoginSessionAcceptResponseInput
 */
export interface LoginSessionAcceptResponseInput {
  [key: string]: any
}
/**
 * Direct Post Response URI endpoint result
 * @export
 * @interface LoginSessionAcceptResponseOutput
 */
export interface LoginSessionAcceptResponseOutput {
  [key: string]: any
}
/**
 *
 * @export
 * @interface LoginSessionDto
 */
export interface LoginSessionDto {
  /**
   * Session primary identifier
   * @type {string}
   * @memberof LoginSessionDto
   */
  id: string
  /**
   *
   * @type {LoginSessionDtoAuthorizationRequest}
   * @memberof LoginSessionDto
   */
  authorizationRequest: LoginSessionDtoAuthorizationRequest
}
/**
 *
 * @export
 * @interface LoginSessionDtoAuthorizationRequest
 */
export interface LoginSessionDtoAuthorizationRequest {
  /**
   * State parameter
   * @type {string}
   * @memberof LoginSessionDtoAuthorizationRequest
   */
  state: string
  /**
   * Presentation Definition to ask from the user. In JSON Stringify format.
   * @type {string}
   * @memberof LoginSessionDtoAuthorizationRequest
   */
  presentationDefinition: string
  /**
   * ARI is used for analytics proposals.
   * @type {string}
   * @memberof LoginSessionDtoAuthorizationRequest
   */
  ari?: string
  /**
   * clientId used for detect origin.
   * @type {string}
   * @memberof LoginSessionDtoAuthorizationRequest
   */
  clientId?: string
}
/**
 * Input for Creating a Login Session
 * @export
 * @interface LoginSessionForIDPInput
 */
export interface LoginSessionForIDPInput {
  /**
   * IDP Login Challenge to Associate the Session with
   * @type {string}
   * @memberof LoginSessionForIDPInput
   */
  loginChallenge: string
  /**
   * IDP client id to Associate the Session with
   * @type {string}
   * @memberof LoginSessionForIDPInput
   */
  clientId: string
}
/**
 * Authorization Response per OpenID for Verifiable Presentations Specification
 * @export
 * @interface LoginSessionRejectResponseInput
 */
export interface LoginSessionRejectResponseInput {
  [key: string]: any

  /**
   * The error should follow the OAuth2 error format (e.g. invalid_request, login_required). Defaults to request_denied
   * @type {string}
   * @memberof LoginSessionRejectResponseInput
   */
  error?: string
  /**
   * Description of the error in a human readable format
   * @type {string}
   * @memberof LoginSessionRejectResponseInput
   */
  errorDescription?: string
  /**
   * Random state associated to the Session
   * @type {string}
   * @memberof LoginSessionRejectResponseInput
   */
  state: string
}
/**
 * Direct Post Response URI endpoint result
 * @export
 * @interface LoginSessionRejectResponseOutput
 */
export interface LoginSessionRejectResponseOutput {
  [key: string]: any
}
/**
 *
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  name: NotFoundErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  message: NotFoundErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof NotFoundError
   */
  httpStatusCode: NotFoundErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  traceId: string
  /**
   *
   * @type {Array<InvalidParameterErrorDetailsInner>}
   * @memberof NotFoundError
   */
  details?: Array<InvalidParameterErrorDetailsInner>
}

export const NotFoundErrorNameEnum = {
  NotFoundError: 'NotFoundError',
} as const

export type NotFoundErrorNameEnum =
  (typeof NotFoundErrorNameEnum)[keyof typeof NotFoundErrorNameEnum]
export const NotFoundErrorMessageEnum = {
  NotFoundParam: 'Not found: ${param}.',
} as const

export type NotFoundErrorMessageEnum =
  (typeof NotFoundErrorMessageEnum)[keyof typeof NotFoundErrorMessageEnum]
export const NotFoundErrorHttpStatusCodeEnum = {
  NUMBER_404: 404,
} as const

export type NotFoundErrorHttpStatusCodeEnum =
  (typeof NotFoundErrorHttpStatusCodeEnum)[keyof typeof NotFoundErrorHttpStatusCodeEnum]

/**
 *
 * @export
 * @interface OAuth2Token
 */
export interface OAuth2Token {
  /**
   * The access token issued by the authorization server.
   * @type {string}
   * @memberof OAuth2Token
   */
  access_token?: string
  /**
   * The lifetime in seconds of the access token.  For example, the value \"3600\" denotes that the access  token will expire in one hour from the time the response was generated.
   * @type {number}
   * @memberof OAuth2Token
   */
  expires_in?: number
  /**
   * To retrieve a refresh token request the id_token scope.
   * @type {number}
   * @memberof OAuth2Token
   */
  id_token?: number
  /**
   * The refresh token, which can be used to obtain new access tokens.  To retrieve it add the scope \"offline\" to your access token request.
   * @type {string}
   * @memberof OAuth2Token
   */
  refresh_token?: string
  /**
   * The scope of the access token
   * @type {string}
   * @memberof OAuth2Token
   */
  scope?: string
  /**
   * The type of the token issued
   * @type {string}
   * @memberof OAuth2Token
   */
  token_type?: string
}
/**
 *
 * @export
 * @interface OIDCConfig
 */
export interface OIDCConfig {
  /**
   * OAuth 2.0 Authorization Endpoint URL
   * @type {string}
   * @memberof OIDCConfig
   */
  authorization_endpoint: string
  /**
   * OpenID Connect Back-Channel Logout Session Required. Boolean value specifying whether the OP can pass a sid (session ID)  Claim in the Logout Token to identify the RP session with the OP. If  supported, the sid Claim is also included in ID Tokens issued by the OP
   * @type {boolean}
   * @memberof OIDCConfig
   */
  backchannel_logout_session_supported?: boolean
  /**
   * OpenID Connect Back-Channel Logout Supported. Boolean value specifying whether the OP supports  back-channel logout, with true indicating support.
   * @type {boolean}
   * @memberof OIDCConfig
   */
  backchannel_logout_supported?: boolean
  /**
   * OpenID Connect Claims Parameter Parameter Supported Boolean value specifying whether the OP supports use  of the claims parameter, with true indicating support.
   * @type {boolean}
   * @memberof OIDCConfig
   */
  claims_parameter_supported?: boolean
  /**
   * OpenID Connect Supported Claims   JSON array containing a list of the Claim Names of the  Claims that the OpenID Provider MAY be able to supply  values for. Note that for privacy or other reasons,  this might not be an exhaustive list.
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  claims_supported?: Array<string>
  /**
   * OAuth 2.0 PKCE Supported Code Challenge Methods JSON array containing a list of Proof Key for Code  Exchange (PKCE) [RFC7636] code challenge methods  supported by this authorization server.
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  code_challenge_methods_supported?: Array<string>
  /**
   * OpenID Connect Verifiable Credentials Endpoint Contains the URL of the Verifiable Credentials Endpoint.
   * @type {string}
   * @memberof OIDCConfig
   */
  credentials_endpoint_draft_00?: string
  /**
   * OpenID Connect Verifiable Credentials Supported JSON array containing a list of the Verifiable  Credentials supported by this authorization server.
   * @type {Array<OIDCConfigCredentialsSupportedDraft00Inner>}
   * @memberof OIDCConfig
   */
  credentials_supported_draft_00?: Array<OIDCConfigCredentialsSupportedDraft00Inner>
  /**
   * OpenID Connect End-Session Endpoint URL at the OP to which an RP can perform  a redirect to request that the End-User be  logged out at the OP.
   * @type {string}
   * @memberof OIDCConfig
   */
  end_session_endpoint?: string
  /**
   * OpenID Connect Front-Channel Logout Session Required Boolean value specifying whether the OP can pass iss  (issuer) and sid (session ID) query parameters to identify  the RP session with the OP when the frontchannel_logout_uri  is used. If supported, the sid Claim is also included in ID  Tokens issued by the OP.
   * @type {boolean}
   * @memberof OIDCConfig
   */
  frontchannel_logout_session_supported?: boolean
  /**
   * OpenID Connect Front-Channel Logout Supported Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
   * @type {boolean}
   * @memberof OIDCConfig
   */
  frontchannel_logout_supported?: boolean
  /**
   * OAuth 2.0 Supported Grant Types JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  grant_types_supported?: Array<string>
  /**
   * OpenID Connect Default ID Token Signing Algorithms Algorithm used to sign OpenID Connect ID Tokens.
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  id_token_signed_response_alg: Array<string>
  /**
   * OpenID Connect Supported ID Token Signing Algorithms JSON array containing a list of the JWS signing algorithms  (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  id_token_signing_alg_values_supported: Array<string>
  /**
   * OpenID Connect Issuer URL An URL using the https scheme with no query or fragment component  that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery  is supported , this value MUST be identical to the issuer value returned by WebFinger.  This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
   * @type {string}
   * @memberof OIDCConfig
   */
  issuer: string
  /**
   * OpenID Connect Well-Known JSON Web Keys URL URL of the OP\'s JSON Web Key Set [JWK] document. This contains the signing key(s) the RP  uses to validate signatures from the OP. The JWK Set MAY also contain the Server\'s  encryption key(s), which are used by RPs to encrypt requests to the Server. When both  signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED  for all keys in the referenced JWK Set to indicate each key\'s intended usage. Although some  algorithms allow the same key to be used for both signatures and encryption, doing so is  NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509  representations of keys provided. When used, the bare key values MUST still be present and  MUST match those in the certificate.
   * @type {string}
   * @memberof OIDCConfig
   */
  jwks_uri: string
  /**
   * OpenID Connect Dynamic Client Registration Endpoint URL
   * @type {string}
   * @memberof OIDCConfig
   */
  registration_endpoint?: string
  /**
   * OpenID Connect Supported Request Object Signing Algorithms JSON array containing a list of the JWS signing algorithms (alg values) supported by  the OP for Request Objects, which are described in Section 6.1 of  OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the  Request Object is passed by value (using the request parameter) and when it is  passed by reference (using the request_uri parameter).
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  request_object_signing_alg_values_supported?: Array<string>
  /**
   * OpenID Connect Request Parameter Supported Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
   * @type {boolean}
   * @memberof OIDCConfig
   */
  request_parameter_supported?: boolean
  /**
   * OpenID Connect Request URI Parameter Supported Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
   * @type {boolean}
   * @memberof OIDCConfig
   */
  request_uri_parameter_supported?: boolean
  /**
   * OpenID Connect Requires Request URI Registration Boolean value specifying whether the OP requires any request_uri values used to be  pre-registered using the request_uris registration parameter.
   * @type {boolean}
   * @memberof OIDCConfig
   */
  require_request_uri_registration?: boolean
  /**
   * OAuth 2.0 Supported Response Modes JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  response_modes_supported?: Array<string>
  /**
   * OAuth 2.0 Supported Response Types JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.  Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  response_types_supported: Array<string>
  /**
   * OAuth 2.0 Token Revocation URL URL of the authorization server\'s OAuth 2.0 revocation endpoint.
   * @type {string}
   * @memberof OIDCConfig
   */
  revocation_endpoint?: string
  /**
   * OAuth 2.0 Supported Scope Values JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports.  The server MUST support the openid scope value. Servers MAY choose not to advertise  some supported scope values even when this parameter is used
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  scopes_supported?: Array<string>
  /**
   * OpenID Connect Supported Subject Types JSON array containing a list of the Subject Identifier types that this OP supports.  Valid types include pairwise and public.
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  subject_types_supported: Array<string>
  /**
   * OAuth 2.0 Token Endpoint URL
   * @type {string}
   * @memberof OIDCConfig
   */
  token_endpoint: string
  /**
   * OAuth 2.0 Supported Client Authentication Methods JSON array containing a list of Client Authentication methods supported by this Token Endpoint.  The options are client_secret_post, client_secret_basic, client_secret_jwt,  and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  token_endpoint_auth_methods_supported?: Array<string>
  /**
   * OpenID Connect Userinfo URL URL of the OP\'s UserInfo Endpoint.
   * @type {string}
   * @memberof OIDCConfig
   */
  userinfo_endpoint?: string
  /**
   * OpenID Connect User Userinfo Signing Algorithm Algorithm used to sign OpenID Connect Userinfo Responses.
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  userinfo_signed_response_alg: Array<string>
  /**
   * OpenID Connect Supported Userinfo Signing Algorithm JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA]  supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
   * @type {Array<string>}
   * @memberof OIDCConfig
   */
  userinfo_signing_alg_values_supported?: Array<string>
}
/**
 *
 * @export
 * @interface OIDCConfigCredentialsSupportedDraft00Inner
 */
export interface OIDCConfigCredentialsSupportedDraft00Inner {
  /**
   *
   * @type {Array<string>}
   * @memberof OIDCConfigCredentialsSupportedDraft00Inner
   */
  cryptographic_binding_methods_supported?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof OIDCConfigCredentialsSupportedDraft00Inner
   */
  cryptographic_suites_supported?: Array<string>
  /**
   *
   * @type {string}
   * @memberof OIDCConfigCredentialsSupportedDraft00Inner
   */
  format?: string
  /**
   *
   * @type {Array<string>}
   * @memberof OIDCConfigCredentialsSupportedDraft00Inner
   */
  types?: Array<string>
}
/**
 * Redirect Response
 * @export
 * @interface RedirectResponse
 */
export interface RedirectResponse {
  /**
   * type
   * @type {string}
   * @memberof RedirectResponse
   */
  type: RedirectResponseTypeEnum
  /**
   * URL to redirect to
   * @type {string}
   * @memberof RedirectResponse
   */
  to: string
}

export const RedirectResponseTypeEnum = {
  RedirectResponse: 'REDIRECT_RESPONSE',
} as const

export type RedirectResponseTypeEnum =
  (typeof RedirectResponseTypeEnum)[keyof typeof RedirectResponseTypeEnum]

/**
 * input used to remove a user from a group
 * @export
 * @interface RemoveUserFromGroupInput
 */
export interface RemoveUserFromGroupInput {
  /**
   * Unique identifier of the user
   * @type {string}
   * @memberof RemoveUserFromGroupInput
   */
  userId: string
}
/**
 *
 * @export
 * @interface ResourceCreationError
 */
export interface ResourceCreationError {
  /**
   *
   * @type {string}
   * @memberof ResourceCreationError
   */
  name: ResourceCreationErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof ResourceCreationError
   */
  message: ResourceCreationErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof ResourceCreationError
   */
  httpStatusCode: ResourceCreationErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof ResourceCreationError
   */
  traceId: string
  /**
   *
   * @type {Array<InvalidParameterErrorDetailsInner>}
   * @memberof ResourceCreationError
   */
  details?: Array<InvalidParameterErrorDetailsInner>
}

export const ResourceCreationErrorNameEnum = {
  ResourceCreationError: 'ResourceCreationError',
} as const

export type ResourceCreationErrorNameEnum =
  (typeof ResourceCreationErrorNameEnum)[keyof typeof ResourceCreationErrorNameEnum]
export const ResourceCreationErrorMessageEnum = {
  FailedToCreateResources: 'Failed to create resources.',
} as const

export type ResourceCreationErrorMessageEnum =
  (typeof ResourceCreationErrorMessageEnum)[keyof typeof ResourceCreationErrorMessageEnum]
export const ResourceCreationErrorHttpStatusCodeEnum = {
  NUMBER_424: 424,
} as const

export type ResourceCreationErrorHttpStatusCodeEnum =
  (typeof ResourceCreationErrorHttpStatusCodeEnum)[keyof typeof ResourceCreationErrorHttpStatusCodeEnum]

/**
 * Service Error Response
 * @export
 * @interface ServiceErrorResponse
 */
export interface ServiceErrorResponse {
  /**
   * unique id for correlating this specific error to logs
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  debugId: string
  /**
   * name of the error
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  name: string
  /**
   * backwards compatible Affinidi error code
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  code: string
  /**
   * error details
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof ServiceErrorResponse
   */
  details?: Array<ServiceErrorResponseDetailsInner>
}
/**
 *
 * @export
 * @interface ServiceErrorResponseDetailsInner
 */
export interface ServiceErrorResponseDetailsInner {
  /**
   * issue
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  issue: string
  /**
   * fields
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  field?: string
  /**
   * value
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  value?: string
  /**
   * location
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  location?: string
}
/**
 * Requested Client Authentication method for the Token Endpoint. The options are: `client_secret_post`: (default) Send client_id and client_secret as application/x-www-form-urlencoded in the HTTP body. `client_secret_basic`: Send client_id and client_secret as application/x-www-form-urlencoded encoded in the HTTP Authorization header. `none`: For public clients (native/mobile apps) which can not have secret.
 * @export
 * @enum {string}
 */

export const TokenEndpointAuthMethod = {
  ClientSecretBasic: 'client_secret_basic',
  ClientSecretPost: 'client_secret_post',
  None: 'none',
} as const

export type TokenEndpointAuthMethod =
  (typeof TokenEndpointAuthMethod)[keyof typeof TokenEndpointAuthMethod]

/**
 *
 * @export
 * @interface UnauthorizedError
 */
export interface UnauthorizedError {
  /**
   *
   * @type {string}
   * @memberof UnauthorizedError
   */
  name: UnauthorizedErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof UnauthorizedError
   */
  message: UnauthorizedErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof UnauthorizedError
   */
  httpStatusCode: UnauthorizedErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof UnauthorizedError
   */
  traceId: string
  /**
   *
   * @type {Array<InvalidParameterErrorDetailsInner>}
   * @memberof UnauthorizedError
   */
  details?: Array<InvalidParameterErrorDetailsInner>
}

export const UnauthorizedErrorNameEnum = {
  UnauthorizedError: 'UnauthorizedError',
} as const

export type UnauthorizedErrorNameEnum =
  (typeof UnauthorizedErrorNameEnum)[keyof typeof UnauthorizedErrorNameEnum]
export const UnauthorizedErrorMessageEnum = {
  Unauthorized: 'Unauthorized',
} as const

export type UnauthorizedErrorMessageEnum =
  (typeof UnauthorizedErrorMessageEnum)[keyof typeof UnauthorizedErrorMessageEnum]
export const UnauthorizedErrorHttpStatusCodeEnum = {
  NUMBER_401: 401,
} as const

export type UnauthorizedErrorHttpStatusCodeEnum =
  (typeof UnauthorizedErrorHttpStatusCodeEnum)[keyof typeof UnauthorizedErrorHttpStatusCodeEnum]

/**
 *
 * @export
 * @interface UpdateLoginConfigurationInput
 */
export interface UpdateLoginConfigurationInput {
  /**
   * User defined login configuration name
   * @type {string}
   * @memberof UpdateLoginConfigurationInput
   */
  name?: string
  /**
   * OAuth 2.0 Redirect URIs
   * @type {Array<string>}
   * @memberof UpdateLoginConfigurationInput
   */
  redirectUris?: Array<string>
  /**
   * OAuth2 client secret
   * @type {string}
   * @memberof UpdateLoginConfigurationInput
   */
  clientSecret?: string
  /**
   * VP definition in JSON stringify format
   * @type {string}
   * @memberof UpdateLoginConfigurationInput
   */
  vpDefinition?: string
  /**
   * Presentation Definition
   * @type {object}
   * @memberof UpdateLoginConfigurationInput
   */
  presentationDefinition?: object
  /**
   *
   * @type {IdTokenMapping}
   * @memberof UpdateLoginConfigurationInput
   */
  idTokenMapping?: IdTokenMapping
  /**
   *
   * @type {LoginConfigurationClientMetadataInput}
   * @memberof UpdateLoginConfigurationInput
   */
  clientMetadata?: LoginConfigurationClientMetadataInput
  /**
   *
   * @type {TokenEndpointAuthMethod}
   * @memberof UpdateLoginConfigurationInput
   */
  tokenEndpointAuthMethod?: TokenEndpointAuthMethod
  /**
   * Interrupts login process if duplications of data fields names will be found
   * @type {boolean}
   * @memberof UpdateLoginConfigurationInput
   */
  failOnMappingConflict?: boolean
}

/**
 *
 * @export
 * @interface VPTokenValidationError
 */
export interface VPTokenValidationError {
  /**
   *
   * @type {string}
   * @memberof VPTokenValidationError
   */
  name: VPTokenValidationErrorNameEnum
  /**
   *
   * @type {string}
   * @memberof VPTokenValidationError
   */
  message: VPTokenValidationErrorMessageEnum
  /**
   *
   * @type {number}
   * @memberof VPTokenValidationError
   */
  httpStatusCode: VPTokenValidationErrorHttpStatusCodeEnum
  /**
   *
   * @type {string}
   * @memberof VPTokenValidationError
   */
  traceId: string
  /**
   *
   * @type {Array<InvalidParameterErrorDetailsInner>}
   * @memberof VPTokenValidationError
   */
  details?: Array<InvalidParameterErrorDetailsInner>
}

export const VPTokenValidationErrorNameEnum = {
  VpTokenValidationError: 'VPTokenValidationError',
} as const

export type VPTokenValidationErrorNameEnum =
  (typeof VPTokenValidationErrorNameEnum)[keyof typeof VPTokenValidationErrorNameEnum]
export const VPTokenValidationErrorMessageEnum = {
  VpTokenValidationEndedWithAnError: 'VP token validation ended with an error',
} as const

export type VPTokenValidationErrorMessageEnum =
  (typeof VPTokenValidationErrorMessageEnum)[keyof typeof VPTokenValidationErrorMessageEnum]
export const VPTokenValidationErrorHttpStatusCodeEnum = {
  NUMBER_400: 400,
} as const

export type VPTokenValidationErrorHttpStatusCodeEnum =
  (typeof VPTokenValidationErrorHttpStatusCodeEnum)[keyof typeof VPTokenValidationErrorHttpStatusCodeEnum]
