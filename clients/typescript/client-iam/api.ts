/* tslint:disable */
/* eslint-disable */
/**
 * Iam
 * Affinidi IAM
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nucleus.team@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface ActionForbiddenError
 */
export interface ActionForbiddenError {
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenError
   */
  name: ActionForbiddenErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenError
   */
  message: ActionForbiddenErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof ActionForbiddenError
   */
  httpStatusCode: ActionForbiddenErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof ActionForbiddenError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof ActionForbiddenError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const ActionForbiddenErrorNameEnum = {
  ActionForbiddenError: 'ActionForbiddenError',
} as const;

export type ActionForbiddenErrorNameEnum =
  (typeof ActionForbiddenErrorNameEnum)[keyof typeof ActionForbiddenErrorNameEnum];
export const ActionForbiddenErrorMessageEnum = {
  PrincipalCanNotExecuteActionOnGivenResource:
    'Principal can not execute action on given resource',
} as const;

export type ActionForbiddenErrorMessageEnum =
  (typeof ActionForbiddenErrorMessageEnum)[keyof typeof ActionForbiddenErrorMessageEnum];
export const ActionForbiddenErrorHttpStatusCodeEnum = {
  NUMBER_403: 403,
} as const;

export type ActionForbiddenErrorHttpStatusCodeEnum =
  (typeof ActionForbiddenErrorHttpStatusCodeEnum)[keyof typeof ActionForbiddenErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface AddUserToProjectInput
 */
export interface AddUserToProjectInput {
  /**
   *
   * @type {string}
   * @memberof AddUserToProjectInput
   */
  principalId: string;
  /**
   *
   * @type {string}
   * @memberof AddUserToProjectInput
   */
  principalType: string;
}
/**
 *
 * @export
 * @interface ConsumerAuthTokenEndpointInput
 */
export interface ConsumerAuthTokenEndpointInput {
  [key: string]: any;

  /**
   *
   * @type {string}
   * @memberof ConsumerAuthTokenEndpointInput
   */
  grant_type: string;
  /**
   *
   * @type {string}
   * @memberof ConsumerAuthTokenEndpointInput
   */
  code?: string;
  /**
   *
   * @type {string}
   * @memberof ConsumerAuthTokenEndpointInput
   */
  refresh_token?: string;
  /**
   *
   * @type {string}
   * @memberof ConsumerAuthTokenEndpointInput
   */
  redirect_uri?: string;
  /**
   *
   * @type {string}
   * @memberof ConsumerAuthTokenEndpointInput
   */
  client_id?: string;
}
/**
 *
 * @export
 * @interface ConsumerAuthTokenEndpointOutput
 */
export interface ConsumerAuthTokenEndpointOutput {
  /**
   * The access token issued by the authorization server.
   * @type {string}
   * @memberof ConsumerAuthTokenEndpointOutput
   */
  access_token?: string;
  /**
   * The lifetime in seconds of the access token. For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated.
   * @type {number}
   * @memberof ConsumerAuthTokenEndpointOutput
   */
  expires_in?: number;
  /**
   * To retrieve a refresh token request the id_token scope.
   * @type {number}
   * @memberof ConsumerAuthTokenEndpointOutput
   */
  id_token?: number;
  /**
   * The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope \"offline\" to your access token request.
   * @type {string}
   * @memberof ConsumerAuthTokenEndpointOutput
   */
  refresh_token?: string;
  /**
   * The scope of the access token
   * @type {string}
   * @memberof ConsumerAuthTokenEndpointOutput
   */
  scope?: string;
  /**
   * The type of the token issued
   * @type {string}
   * @memberof ConsumerAuthTokenEndpointOutput
   */
  token_type?: string;
}
/**
 *
 * @export
 * @interface CorsConsumerAuthTokenEndpointOK
 */
export interface CorsConsumerAuthTokenEndpointOK {
  /**
   *
   * @type {string}
   * @memberof CorsConsumerAuthTokenEndpointOK
   */
  corsConsumerAuthTokenEndpointOk?: string;
}
/**
 *
 * @export
 * @interface CreateProjectInput
 */
export interface CreateProjectInput {
  /**
   *
   * @type {string}
   * @memberof CreateProjectInput
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectInput
   */
  description?: string;
}
/**
 *
 * @export
 * @interface CreateProjectScopedTokenInput
 */
export interface CreateProjectScopedTokenInput {
  /**
   *
   * @type {string}
   * @memberof CreateProjectScopedTokenInput
   */
  projectId: string;
}
/**
 *
 * @export
 * @interface CreateProjectScopedTokenOutput
 */
export interface CreateProjectScopedTokenOutput {
  /**
   *
   * @type {string}
   * @memberof CreateProjectScopedTokenOutput
   */
  accessToken: string;
  /**
   *
   * @type {number}
   * @memberof CreateProjectScopedTokenOutput
   */
  expiresIn: number;
  /**
   *
   * @type {string}
   * @memberof CreateProjectScopedTokenOutput
   */
  scope: string;
}
/**
 *
 * @export
 * @interface CreateTokenInput
 */
export interface CreateTokenInput {
  /**
   *
   * @type {string}
   * @memberof CreateTokenInput
   */
  name: string;
  /**
   *
   * @type {TokenAuthenticationMethodDto}
   * @memberof CreateTokenInput
   */
  authenticationMethod: TokenAuthenticationMethodDto;
}
/**
 *
 * @export
 * @interface InvalidJwtTokenError
 */
export interface InvalidJwtTokenError {
  /**
   *
   * @type {string}
   * @memberof InvalidJwtTokenError
   */
  name: InvalidJwtTokenErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof InvalidJwtTokenError
   */
  message: InvalidJwtTokenErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof InvalidJwtTokenError
   */
  httpStatusCode: InvalidJwtTokenErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof InvalidJwtTokenError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof InvalidJwtTokenError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const InvalidJwtTokenErrorNameEnum = {
  InvalidJwtTokenError: 'InvalidJwtTokenError',
} as const;

export type InvalidJwtTokenErrorNameEnum =
  (typeof InvalidJwtTokenErrorNameEnum)[keyof typeof InvalidJwtTokenErrorNameEnum];
export const InvalidJwtTokenErrorMessageEnum = {
  JwtTokenIsInvalid: 'JWT token is invalid',
} as const;

export type InvalidJwtTokenErrorMessageEnum =
  (typeof InvalidJwtTokenErrorMessageEnum)[keyof typeof InvalidJwtTokenErrorMessageEnum];
export const InvalidJwtTokenErrorHttpStatusCodeEnum = {
  NUMBER_401: 401,
} as const;

export type InvalidJwtTokenErrorHttpStatusCodeEnum =
  (typeof InvalidJwtTokenErrorHttpStatusCodeEnum)[keyof typeof InvalidJwtTokenErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface InvalidParameterError
 */
export interface InvalidParameterError {
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  name: InvalidParameterErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  message: InvalidParameterErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof InvalidParameterError
   */
  httpStatusCode: InvalidParameterErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof InvalidParameterError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof InvalidParameterError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const InvalidParameterErrorNameEnum = {
  InvalidParameterError: 'InvalidParameterError',
} as const;

export type InvalidParameterErrorNameEnum =
  (typeof InvalidParameterErrorNameEnum)[keyof typeof InvalidParameterErrorNameEnum];
export const InvalidParameterErrorMessageEnum = {
  InvalidParameterParam: 'Invalid parameter: ${param}.',
} as const;

export type InvalidParameterErrorMessageEnum =
  (typeof InvalidParameterErrorMessageEnum)[keyof typeof InvalidParameterErrorMessageEnum];
export const InvalidParameterErrorHttpStatusCodeEnum = {
  NUMBER_400: 400,
} as const;

export type InvalidParameterErrorHttpStatusCodeEnum =
  (typeof InvalidParameterErrorHttpStatusCodeEnum)[keyof typeof InvalidParameterErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface JsonWebKeyDto
 */
export interface JsonWebKeyDto {
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyDto
   */
  kid: string;
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyDto
   */
  kty: string;
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyDto
   */
  n?: string;
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyDto
   */
  e?: string;
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyDto
   */
  x?: string;
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyDto
   */
  y?: string;
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyDto
   */
  crv?: string;
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyDto
   */
  alg: string;
  /**
   *
   * @type {string}
   * @memberof JsonWebKeyDto
   */
  use: string;
}
/**
 *
 * @export
 * @interface JsonWebKeySetDto
 */
export interface JsonWebKeySetDto {
  /**
   *
   * @type {Array<JsonWebKeyDto>}
   * @memberof JsonWebKeySetDto
   */
  keys: Array<JsonWebKeyDto>;
}
/**
 *
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  name: NotFoundErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  message: NotFoundErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof NotFoundError
   */
  httpStatusCode: NotFoundErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof NotFoundError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof NotFoundError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const NotFoundErrorNameEnum = {
  NotFoundError: 'NotFoundError',
} as const;

export type NotFoundErrorNameEnum =
  (typeof NotFoundErrorNameEnum)[keyof typeof NotFoundErrorNameEnum];
export const NotFoundErrorMessageEnum = {
  NotFoundParam: 'Not found: ${param}.',
} as const;

export type NotFoundErrorMessageEnum =
  (typeof NotFoundErrorMessageEnum)[keyof typeof NotFoundErrorMessageEnum];
export const NotFoundErrorHttpStatusCodeEnum = {
  NUMBER_404: 404,
} as const;

export type NotFoundErrorHttpStatusCodeEnum =
  (typeof NotFoundErrorHttpStatusCodeEnum)[keyof typeof NotFoundErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface PolicyDto
 */
export interface PolicyDto {
  /**
   *
   * @type {string}
   * @memberof PolicyDto
   */
  principalId?: string;
  /**
   *
   * @type {string}
   * @memberof PolicyDto
   */
  projectId?: string;
  /**
   *
   * @type {string}
   * @memberof PolicyDto
   */
  version: string;
  /**
   *
   * @type {Array<PolicyStatementDto>}
   * @memberof PolicyDto
   */
  statement: Array<PolicyStatementDto>;
}
/**
 *
 * @export
 * @interface PolicyStatementDto
 */
export interface PolicyStatementDto {
  /**
   *
   * @type {Array<string>}
   * @memberof PolicyStatementDto
   */
  action: Array<string>;
  /**
   *
   * @type {string}
   * @memberof PolicyStatementDto
   */
  effect: string;
  /**
   *
   * @type {Array<string>}
   * @memberof PolicyStatementDto
   */
  principal: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof PolicyStatementDto
   */
  resource: Array<string>;
}
/**
 *
 * @export
 * @interface PrincipalDoesNotBelongToProjectError
 */
export interface PrincipalDoesNotBelongToProjectError {
  /**
   *
   * @type {string}
   * @memberof PrincipalDoesNotBelongToProjectError
   */
  name: PrincipalDoesNotBelongToProjectErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof PrincipalDoesNotBelongToProjectError
   */
  message: PrincipalDoesNotBelongToProjectErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof PrincipalDoesNotBelongToProjectError
   */
  httpStatusCode: PrincipalDoesNotBelongToProjectErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof PrincipalDoesNotBelongToProjectError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof PrincipalDoesNotBelongToProjectError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const PrincipalDoesNotBelongToProjectErrorNameEnum = {
  PrincipalDoesNotBelongToProjectError: 'PrincipalDoesNotBelongToProjectError',
} as const;

export type PrincipalDoesNotBelongToProjectErrorNameEnum =
  (typeof PrincipalDoesNotBelongToProjectErrorNameEnum)[keyof typeof PrincipalDoesNotBelongToProjectErrorNameEnum];
export const PrincipalDoesNotBelongToProjectErrorMessageEnum = {
  PrincipalDoesNotBelongToTheGivenProject:
    'Principal does not belong to the given project',
} as const;

export type PrincipalDoesNotBelongToProjectErrorMessageEnum =
  (typeof PrincipalDoesNotBelongToProjectErrorMessageEnum)[keyof typeof PrincipalDoesNotBelongToProjectErrorMessageEnum];
export const PrincipalDoesNotBelongToProjectErrorHttpStatusCodeEnum = {
  NUMBER_403: 403,
} as const;

export type PrincipalDoesNotBelongToProjectErrorHttpStatusCodeEnum =
  (typeof PrincipalDoesNotBelongToProjectErrorHttpStatusCodeEnum)[keyof typeof PrincipalDoesNotBelongToProjectErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface ProjectDto
 */
export interface ProjectDto {
  /**
   *
   * @type {string}
   * @memberof ProjectDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ProjectDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProjectDto
   */
  description?: string;
  /**
   * creation date and time in ISO-8601 format, e.g. 2023-09-20T07:12:13
   * @type {string}
   * @memberof ProjectDto
   */
  createdAt?: string;
  /**
   * last update date and time in ISO-8601 format, e.g. 2023-09-20T07:12:13
   * @type {string}
   * @memberof ProjectDto
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface ProjectList
 */
export interface ProjectList {
  /**
   *
   * @type {Array<ProjectDto>}
   * @memberof ProjectList
   */
  projects: Array<ProjectDto>;
}
/**
 *
 * @export
 * @interface ServiceErrorResponse
 */
export interface ServiceErrorResponse {
  /**
   * unique id for correlating this specific error to logs
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  debugId: string;
  /**
   * name of the error
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  name: string;
  /**
   * backwards compatible Affinidi error code
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  code: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof ServiceErrorResponse
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}
/**
 *
 * @export
 * @interface ServiceErrorResponseDetailsInner
 */
export interface ServiceErrorResponseDetailsInner {
  /**
   *
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  issue: string;
  /**
   *
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  field?: string;
  /**
   *
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  value?: string;
  /**
   *
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  location?: string;
}
/**
 * @type TokenAuthenticationMethodDto
 * How the Token will be authenticate against our Authorization Server
 * @export
 */
export type TokenAuthenticationMethodDto =
  TokenPrivateKeyAuthenticationMethodDto;

/**
 *
 * @export
 * @interface TokenDto
 */
export interface TokenDto {
  /**
   * Token Id
   * @type {string}
   * @memberof TokenDto
   */
  id: string;
  /**
   * Token ARI
   * @type {string}
   * @memberof TokenDto
   */
  ari: string;
  /**
   * The Token owner\'s ARI
   * @type {string}
   * @memberof TokenDto
   */
  ownerAri: string;
  /**
   * Owner defined Token display name
   * @type {string}
   * @memberof TokenDto
   */
  name: string;
  /**
   *
   * @type {TokenAuthenticationMethodDto}
   * @memberof TokenDto
   */
  authenticationMethod: TokenAuthenticationMethodDto;
  /**
   * Scopes that will be assigned to the Token on authentication
   * @type {Array<string>}
   * @memberof TokenDto
   */
  scopes: Array<string>;
}
/**
 *
 * @export
 * @interface TokenList
 */
export interface TokenList {
  /**
   *
   * @type {Array<TokenDto>}
   * @memberof TokenList
   */
  tokens: Array<TokenDto>;
}
/**
 * Private Key JWT Authentication of Client with `private_key_jwt` oAuth Method
 * @export
 * @interface TokenPrivateKeyAuthenticationMethodDto
 */
export interface TokenPrivateKeyAuthenticationMethodDto {
  /**
   *
   * @type {string}
   * @memberof TokenPrivateKeyAuthenticationMethodDto
   */
  type: TokenPrivateKeyAuthenticationMethodDtoTypeEnum;
  /**
   *
   * @type {string}
   * @memberof TokenPrivateKeyAuthenticationMethodDto
   */
  signingAlgorithm: TokenPrivateKeyAuthenticationMethodDtoSigningAlgorithmEnum;
  /**
   *
   * @type {TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo}
   * @memberof TokenPrivateKeyAuthenticationMethodDto
   */
  publicKeyInfo: TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo;
}

export const TokenPrivateKeyAuthenticationMethodDtoTypeEnum = {
  PrivateKey: 'PRIVATE_KEY',
} as const;

export type TokenPrivateKeyAuthenticationMethodDtoTypeEnum =
  (typeof TokenPrivateKeyAuthenticationMethodDtoTypeEnum)[keyof typeof TokenPrivateKeyAuthenticationMethodDtoTypeEnum];
export const TokenPrivateKeyAuthenticationMethodDtoSigningAlgorithmEnum = {
  Rs256: 'RS256',
  Rs512: 'RS512',
  Es256: 'ES256',
  Es512: 'ES512',
} as const;

export type TokenPrivateKeyAuthenticationMethodDtoSigningAlgorithmEnum =
  (typeof TokenPrivateKeyAuthenticationMethodDtoSigningAlgorithmEnum)[keyof typeof TokenPrivateKeyAuthenticationMethodDtoSigningAlgorithmEnum];

/**
 * @type TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo
 * Corresponding Public Key Info provided either as a URL or a Hardcoded Object
 * @export
 */
export type TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo =
  | TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf
  | TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1;

/**
 *
 * @export
 * @interface TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf
 */
export interface TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf {
  /**
   *
   * @type {JsonWebKeySetDto}
   * @memberof TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf
   */
  jwks: JsonWebKeySetDto;
}
/**
 *
 * @export
 * @interface TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1
 */
export interface TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1 {
  /**
   *
   * @type {string}
   * @memberof TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfoOneOf1
   */
  jwksUri: string;
}
/**
 *
 * @export
 * @interface TypedPricipalId
 */
export interface TypedPricipalId {
  /**
   *
   * @type {string}
   * @memberof TypedPricipalId
   */
  principalId: string;
}
/**
 *
 * @export
 * @interface UnauthorizedError
 */
export interface UnauthorizedError {
  /**
   *
   * @type {string}
   * @memberof UnauthorizedError
   */
  name: UnauthorizedErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof UnauthorizedError
   */
  message: UnauthorizedErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof UnauthorizedError
   */
  httpStatusCode: UnauthorizedErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof UnauthorizedError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof UnauthorizedError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const UnauthorizedErrorNameEnum = {
  UnauthorizedError: 'UnauthorizedError',
} as const;

export type UnauthorizedErrorNameEnum =
  (typeof UnauthorizedErrorNameEnum)[keyof typeof UnauthorizedErrorNameEnum];
export const UnauthorizedErrorMessageEnum = {
  Unauthorized: 'Unauthorized',
} as const;

export type UnauthorizedErrorMessageEnum =
  (typeof UnauthorizedErrorMessageEnum)[keyof typeof UnauthorizedErrorMessageEnum];
export const UnauthorizedErrorHttpStatusCodeEnum = {
  NUMBER_403: 403,
} as const;

export type UnauthorizedErrorHttpStatusCodeEnum =
  (typeof UnauthorizedErrorHttpStatusCodeEnum)[keyof typeof UnauthorizedErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface UnexpectedError
 */
export interface UnexpectedError {
  /**
   *
   * @type {string}
   * @memberof UnexpectedError
   */
  name: UnexpectedErrorNameEnum;
  /**
   *
   * @type {string}
   * @memberof UnexpectedError
   */
  message: UnexpectedErrorMessageEnum;
  /**
   *
   * @type {number}
   * @memberof UnexpectedError
   */
  httpStatusCode: UnexpectedErrorHttpStatusCodeEnum;
  /**
   *
   * @type {string}
   * @memberof UnexpectedError
   */
  traceId: string;
  /**
   *
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof UnexpectedError
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}

export const UnexpectedErrorNameEnum = {
  UnexpectedError: 'UnexpectedError',
} as const;

export type UnexpectedErrorNameEnum =
  (typeof UnexpectedErrorNameEnum)[keyof typeof UnexpectedErrorNameEnum];
export const UnexpectedErrorMessageEnum = {
  UnexpectedErrorOccurred: 'Unexpected Error Occurred.',
} as const;

export type UnexpectedErrorMessageEnum =
  (typeof UnexpectedErrorMessageEnum)[keyof typeof UnexpectedErrorMessageEnum];
export const UnexpectedErrorHttpStatusCodeEnum = {
  NUMBER_500: 500,
} as const;

export type UnexpectedErrorHttpStatusCodeEnum =
  (typeof UnexpectedErrorHttpStatusCodeEnum)[keyof typeof UnexpectedErrorHttpStatusCodeEnum];

/**
 *
 * @export
 * @interface UpdateProjectInput
 */
export interface UpdateProjectInput {
  /**
   *
   * @type {string}
   * @memberof UpdateProjectInput
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectInput
   */
  description?: string;
}
/**
 *
 * @export
 * @interface UpdateTokenInput
 */
export interface UpdateTokenInput {
  /**
   *
   * @type {string}
   * @memberof UpdateTokenInput
   */
  name?: string;
  /**
   *
   * @type {UpdateTokenPrivateKeyAuthenticationMethodDto}
   * @memberof UpdateTokenInput
   */
  authenticationMethod?: UpdateTokenPrivateKeyAuthenticationMethodDto;
}
/**
 * Private Key JWT Authentication of Client with `private_key_jwt` oAuth Method
 * @export
 * @interface UpdateTokenPrivateKeyAuthenticationMethodDto
 */
export interface UpdateTokenPrivateKeyAuthenticationMethodDto {
  /**
   *
   * @type {string}
   * @memberof UpdateTokenPrivateKeyAuthenticationMethodDto
   */
  type?: UpdateTokenPrivateKeyAuthenticationMethodDtoTypeEnum;
  /**
   *
   * @type {string}
   * @memberof UpdateTokenPrivateKeyAuthenticationMethodDto
   */
  signingAlgorithm?: UpdateTokenPrivateKeyAuthenticationMethodDtoSigningAlgorithmEnum;
  /**
   *
   * @type {TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo}
   * @memberof UpdateTokenPrivateKeyAuthenticationMethodDto
   */
  publicKeyInfo?: TokenPrivateKeyAuthenticationMethodDtoPublicKeyInfo;
}

export const UpdateTokenPrivateKeyAuthenticationMethodDtoTypeEnum = {
  PrivateKey: 'PRIVATE_KEY',
} as const;

export type UpdateTokenPrivateKeyAuthenticationMethodDtoTypeEnum =
  (typeof UpdateTokenPrivateKeyAuthenticationMethodDtoTypeEnum)[keyof typeof UpdateTokenPrivateKeyAuthenticationMethodDtoTypeEnum];
export const UpdateTokenPrivateKeyAuthenticationMethodDtoSigningAlgorithmEnum =
  {
    Rs256: 'RS256',
    Rs512: 'RS512',
    Es256: 'ES256',
    Es512: 'ES512',
  } as const;

export type UpdateTokenPrivateKeyAuthenticationMethodDtoSigningAlgorithmEnum =
  (typeof UpdateTokenPrivateKeyAuthenticationMethodDtoSigningAlgorithmEnum)[keyof typeof UpdateTokenPrivateKeyAuthenticationMethodDtoSigningAlgorithmEnum];

/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  principalId: string;
}
/**
 *
 * @export
 * @interface UserList
 */
export interface UserList {
  /**
   *
   * @type {Array<UserDto>}
   * @memberof UserList
   */
  records: Array<UserDto>;
}
/**
 *
 * @export
 * @interface WhoamiDto
 */
export interface WhoamiDto {
  /**
   *
   * @type {string}
   * @memberof WhoamiDto
   */
  principalId: string;
  /**
   *
   * @type {string}
   * @memberof WhoamiDto
   */
  principalType: string;
}
