/* tslint:disable */
/* eslint-disable */
/**
 * AivCloudApi
 * Affinidi AivCloudApi Structure
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 * missing data that could not be found in the vault
 * @export
 * @interface CredentialsDto
 */
export interface CredentialsDto {
  /**
   * signed VCs
   * @type {object}
   * @memberof CredentialsDto
   */
  signedCredential?: object;
}
/**
 * the object conatins the presentation definition
 * @export
 * @interface DataRequest
 */
export interface DataRequest {
  /**
   * the presentation definition
   * @type {object}
   * @memberof DataRequest
   */
  presentationDefinition: object;
}
/**
 * the response body
 * @export
 * @interface DataResponse
 */
export interface DataResponse {
  /**
   * list of schemas which are missing to complete request
   * @type {Array<MissingDataSchemasDto>}
   * @memberof DataResponse
   */
  missingDataSchemas: Array<MissingDataSchemasDto>;
  /**
   * list of VCs that are found
   * @type {Array<CredentialsDto>}
   * @memberof DataResponse
   */
  credentials: Array<CredentialsDto>;
}
/**
 * The name of $.path that is missing from the vault
 * @export
 * @interface MissingDataSchemasDto
 */
export interface MissingDataSchemasDto {
  /**
   * the name of missing schema in vault
   * @type {object}
   * @memberof MissingDataSchemasDto
   */
  schemaList?: object;
}
/**
 * Error message when something goes wrong
 * @export
 * @interface ServiceErrorResponse
 */
export interface ServiceErrorResponse {
  /**
   * unique id for correlating this specific error to logs
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  debugId: string;
  /**
   * name of the error
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  name: string;
  /**
   * backwards compatible Affinidi error code
   * @type {string}
   * @memberof ServiceErrorResponse
   */
  code: string;
  /**
   * details of error
   * @type {Array<ServiceErrorResponseDetailsInner>}
   * @memberof ServiceErrorResponse
   */
  details?: Array<ServiceErrorResponseDetailsInner>;
}
/**
 *
 * @export
 * @interface ServiceErrorResponseDetailsInner
 */
export interface ServiceErrorResponseDetailsInner {
  /**
   * what went wrong
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  issue: string;
  /**
   * the fields that caused the error
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  field?: string;
  /**
   * expected values of the errored field
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  value?: string;
  /**
   * location of error
   * @type {string}
   * @memberof ServiceErrorResponseDetailsInner
   */
  location?: ServiceErrorResponseDetailsInnerLocationEnum;
}

export const ServiceErrorResponseDetailsInnerLocationEnum = {
  Body: 'BODY',
  Path: 'PATH',
  Query: 'QUERY',
} as const;

export type ServiceErrorResponseDetailsInnerLocationEnum =
  (typeof ServiceErrorResponseDetailsInnerLocationEnum)[keyof typeof ServiceErrorResponseDetailsInnerLocationEnum];
