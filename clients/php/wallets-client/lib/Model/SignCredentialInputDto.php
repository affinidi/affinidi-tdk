<?php
/**
 * SignCredentialInputDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\Wallets
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CloudWalletEssentials
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\Wallets\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\Wallets\ObjectSerializer;

/**
 * SignCredentialInputDto Class Doc Comment
 *
 * @category Class
 * @description DTO contains params to sign credential
 * @package  AffinidiTdk\Clients\Wallets
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SignCredentialInputDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SignCredentialInputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unsigned_credential' => 'object',
        'revocable' => 'bool',
        'credential_format' => 'string',
        'unsigned_credential_params' => '\AffinidiTdk\Clients\Wallets\Model\SignCredentialInputDtoUnsignedCredentialParams'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unsigned_credential' => null,
        'revocable' => null,
        'credential_format' => null,
        'unsigned_credential_params' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'unsigned_credential' => false,
        'revocable' => false,
        'credential_format' => false,
        'unsigned_credential_params' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unsigned_credential' => 'unsignedCredential',
        'revocable' => 'revocable',
        'credential_format' => 'credentialFormat',
        'unsigned_credential_params' => 'unsignedCredentialParams'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unsigned_credential' => 'setUnsignedCredential',
        'revocable' => 'setRevocable',
        'credential_format' => 'setCredentialFormat',
        'unsigned_credential_params' => 'setUnsignedCredentialParams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unsigned_credential' => 'getUnsignedCredential',
        'revocable' => 'getRevocable',
        'credential_format' => 'getCredentialFormat',
        'unsigned_credential_params' => 'getUnsignedCredentialParams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CREDENTIAL_FORMAT_LDP_VC = 'ldp_vc';
    public const CREDENTIAL_FORMAT_JWT_VC_JSON_LD = 'jwt_vc_json-ld';
    public const CREDENTIAL_FORMAT_SD_JWT_VC_JSON_LD = 'sd_jwt_vc_json-ld';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCredentialFormatAllowableValues()
    {
        return [
            self::CREDENTIAL_FORMAT_LDP_VC,
            self::CREDENTIAL_FORMAT_JWT_VC_JSON_LD,
            self::CREDENTIAL_FORMAT_SD_JWT_VC_JSON_LD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('unsigned_credential', $data ?? [], null);
        $this->setIfExists('revocable', $data ?? [], null);
        $this->setIfExists('credential_format', $data ?? [], null);
        $this->setIfExists('unsigned_credential_params', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCredentialFormatAllowableValues();
        if (!is_null($this->container['credential_format']) && !in_array($this->container['credential_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'credential_format', must be one of '%s'",
                $this->container['credential_format'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unsigned_credential
     *
     * @return object|null
     */
    public function getUnsignedCredential()
    {
        return $this->container['unsigned_credential'];
    }

    /**
     * Sets unsigned_credential
     *
     * @param object|null $unsigned_credential Unsigned Credential. If provided \"unsignedCredentialParams\" is not accepted
     *
     * @return self
     */
    public function setUnsignedCredential($unsigned_credential)
    {
        if (is_null($unsigned_credential)) {
            throw new \InvalidArgumentException('non-nullable unsigned_credential cannot be null');
        }
        $this->container['unsigned_credential'] = $unsigned_credential;

        return $this;
    }

    /**
     * Gets revocable
     *
     * @return bool|null
     */
    public function getRevocable()
    {
        return $this->container['revocable'];
    }

    /**
     * Sets revocable
     *
     * @param bool|null $revocable revocable
     *
     * @return self
     */
    public function setRevocable($revocable)
    {
        if (is_null($revocable)) {
            throw new \InvalidArgumentException('non-nullable revocable cannot be null');
        }
        $this->container['revocable'] = $revocable;

        return $this;
    }

    /**
     * Gets credential_format
     *
     * @return string|null
     */
    public function getCredentialFormat()
    {
        return $this->container['credential_format'];
    }

    /**
     * Sets credential_format
     *
     * @param string|null $credential_format credential_format
     *
     * @return self
     */
    public function setCredentialFormat($credential_format)
    {
        if (is_null($credential_format)) {
            throw new \InvalidArgumentException('non-nullable credential_format cannot be null');
        }
        $allowedValues = $this->getCredentialFormatAllowableValues();
        if (!in_array($credential_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'credential_format', must be one of '%s'",
                    $credential_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['credential_format'] = $credential_format;

        return $this;
    }

    /**
     * Gets unsigned_credential_params
     *
     * @return \AffinidiTdk\Clients\Wallets\Model\SignCredentialInputDtoUnsignedCredentialParams|null
     */
    public function getUnsignedCredentialParams()
    {
        return $this->container['unsigned_credential_params'];
    }

    /**
     * Sets unsigned_credential_params
     *
     * @param \AffinidiTdk\Clients\Wallets\Model\SignCredentialInputDtoUnsignedCredentialParams|null $unsigned_credential_params unsigned_credential_params
     *
     * @return self
     */
    public function setUnsignedCredentialParams($unsigned_credential_params)
    {
        if (is_null($unsigned_credential_params)) {
            throw new \InvalidArgumentException('non-nullable unsigned_credential_params cannot be null');
        }
        $this->container['unsigned_credential_params'] = $unsigned_credential_params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


