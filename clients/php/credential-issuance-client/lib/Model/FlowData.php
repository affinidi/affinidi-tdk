<?php
/**
 * FlowData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\CredentialIssuance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\CredentialIssuance\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\CredentialIssuance\ObjectSerializer;

/**
 * FlowData Class Doc Comment
 *
 * @category Class
 * @package  AffinidiTdk\Clients\CredentialIssuance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FlowData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FlowData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_at' => 'string',
        'modified_at' => 'string',
        'id' => 'string',
        'project_id' => 'string',
        'flow_id' => 'string',
        'credential_type_id' => 'string',
        'json_ld_context_url' => 'string',
        'json_schema_url' => 'string',
        'configuration_id' => 'string',
        'issued_at' => 'string',
        'wallet_id' => 'string',
        'project_id_configuration_id' => 'string',
        'project_id_configuration_id_wallet_id' => 'string',
        'project_id_configuration_id_credential_type' => 'string',
        'status_lists_details' => '\AffinidiTdk\Clients\CredentialIssuance\Model\FlowDataStatusListsDetailsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_at' => null,
        'modified_at' => null,
        'id' => null,
        'project_id' => null,
        'flow_id' => null,
        'credential_type_id' => null,
        'json_ld_context_url' => null,
        'json_schema_url' => null,
        'configuration_id' => null,
        'issued_at' => null,
        'wallet_id' => null,
        'project_id_configuration_id' => null,
        'project_id_configuration_id_wallet_id' => null,
        'project_id_configuration_id_credential_type' => null,
        'status_lists_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'created_at' => false,
        'modified_at' => false,
        'id' => false,
        'project_id' => false,
        'flow_id' => false,
        'credential_type_id' => false,
        'json_ld_context_url' => false,
        'json_schema_url' => false,
        'configuration_id' => false,
        'issued_at' => false,
        'wallet_id' => false,
        'project_id_configuration_id' => false,
        'project_id_configuration_id_wallet_id' => false,
        'project_id_configuration_id_credential_type' => false,
        'status_lists_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'createdAt',
        'modified_at' => 'modifiedAt',
        'id' => 'id',
        'project_id' => 'projectId',
        'flow_id' => 'flowId',
        'credential_type_id' => 'credentialTypeId',
        'json_ld_context_url' => 'jsonLdContextUrl',
        'json_schema_url' => 'jsonSchemaUrl',
        'configuration_id' => 'configurationId',
        'issued_at' => 'issuedAt',
        'wallet_id' => 'walletId',
        'project_id_configuration_id' => 'projectIdConfigurationId',
        'project_id_configuration_id_wallet_id' => 'projectIdConfigurationIdWalletId',
        'project_id_configuration_id_credential_type' => 'projectIdConfigurationIdCredentialType',
        'status_lists_details' => 'statusListsDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt',
        'id' => 'setId',
        'project_id' => 'setProjectId',
        'flow_id' => 'setFlowId',
        'credential_type_id' => 'setCredentialTypeId',
        'json_ld_context_url' => 'setJsonLdContextUrl',
        'json_schema_url' => 'setJsonSchemaUrl',
        'configuration_id' => 'setConfigurationId',
        'issued_at' => 'setIssuedAt',
        'wallet_id' => 'setWalletId',
        'project_id_configuration_id' => 'setProjectIdConfigurationId',
        'project_id_configuration_id_wallet_id' => 'setProjectIdConfigurationIdWalletId',
        'project_id_configuration_id_credential_type' => 'setProjectIdConfigurationIdCredentialType',
        'status_lists_details' => 'setStatusListsDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt',
        'id' => 'getId',
        'project_id' => 'getProjectId',
        'flow_id' => 'getFlowId',
        'credential_type_id' => 'getCredentialTypeId',
        'json_ld_context_url' => 'getJsonLdContextUrl',
        'json_schema_url' => 'getJsonSchemaUrl',
        'configuration_id' => 'getConfigurationId',
        'issued_at' => 'getIssuedAt',
        'wallet_id' => 'getWalletId',
        'project_id_configuration_id' => 'getProjectIdConfigurationId',
        'project_id_configuration_id_wallet_id' => 'getProjectIdConfigurationIdWalletId',
        'project_id_configuration_id_credential_type' => 'getProjectIdConfigurationIdCredentialType',
        'status_lists_details' => 'getStatusListsDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('modified_at', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('flow_id', $data ?? [], null);
        $this->setIfExists('credential_type_id', $data ?? [], null);
        $this->setIfExists('json_ld_context_url', $data ?? [], null);
        $this->setIfExists('json_schema_url', $data ?? [], null);
        $this->setIfExists('configuration_id', $data ?? [], null);
        $this->setIfExists('issued_at', $data ?? [], null);
        $this->setIfExists('wallet_id', $data ?? [], null);
        $this->setIfExists('project_id_configuration_id', $data ?? [], null);
        $this->setIfExists('project_id_configuration_id_wallet_id', $data ?? [], null);
        $this->setIfExists('project_id_configuration_id_credential_type', $data ?? [], null);
        $this->setIfExists('status_lists_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['modified_at'] === null) {
            $invalidProperties[] = "'modified_at' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['flow_id'] === null) {
            $invalidProperties[] = "'flow_id' can't be null";
        }
        if ($this->container['credential_type_id'] === null) {
            $invalidProperties[] = "'credential_type_id' can't be null";
        }
        if ($this->container['json_ld_context_url'] === null) {
            $invalidProperties[] = "'json_ld_context_url' can't be null";
        }
        if ($this->container['json_schema_url'] === null) {
            $invalidProperties[] = "'json_schema_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at [GEN] ISO 8601 string of the creation date/time the entity
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return string
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param string $modified_at [GEN] ISO 8601 string of the modification date/time the entity
     *
     * @return self
     */
    public function setModifiedAt($modified_at)
    {
        if (is_null($modified_at)) {
            throw new \InvalidArgumentException('non-nullable modified_at cannot be null');
        }
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets flow_id
     *
     * @return string
     */
    public function getFlowId()
    {
        return $this->container['flow_id'];
    }

    /**
     * Sets flow_id
     *
     * @param string $flow_id flow_id
     *
     * @return self
     */
    public function setFlowId($flow_id)
    {
        if (is_null($flow_id)) {
            throw new \InvalidArgumentException('non-nullable flow_id cannot be null');
        }
        $this->container['flow_id'] = $flow_id;

        return $this;
    }

    /**
     * Gets credential_type_id
     *
     * @return string
     */
    public function getCredentialTypeId()
    {
        return $this->container['credential_type_id'];
    }

    /**
     * Sets credential_type_id
     *
     * @param string $credential_type_id credential_type_id
     *
     * @return self
     */
    public function setCredentialTypeId($credential_type_id)
    {
        if (is_null($credential_type_id)) {
            throw new \InvalidArgumentException('non-nullable credential_type_id cannot be null');
        }
        $this->container['credential_type_id'] = $credential_type_id;

        return $this;
    }

    /**
     * Gets json_ld_context_url
     *
     * @return string
     */
    public function getJsonLdContextUrl()
    {
        return $this->container['json_ld_context_url'];
    }

    /**
     * Sets json_ld_context_url
     *
     * @param string $json_ld_context_url json_ld_context_url
     *
     * @return self
     */
    public function setJsonLdContextUrl($json_ld_context_url)
    {
        if (is_null($json_ld_context_url)) {
            throw new \InvalidArgumentException('non-nullable json_ld_context_url cannot be null');
        }
        $this->container['json_ld_context_url'] = $json_ld_context_url;

        return $this;
    }

    /**
     * Gets json_schema_url
     *
     * @return string
     */
    public function getJsonSchemaUrl()
    {
        return $this->container['json_schema_url'];
    }

    /**
     * Sets json_schema_url
     *
     * @param string $json_schema_url json_schema_url
     *
     * @return self
     */
    public function setJsonSchemaUrl($json_schema_url)
    {
        if (is_null($json_schema_url)) {
            throw new \InvalidArgumentException('non-nullable json_schema_url cannot be null');
        }
        $this->container['json_schema_url'] = $json_schema_url;

        return $this;
    }

    /**
     * Gets configuration_id
     *
     * @return string|null
     */
    public function getConfigurationId()
    {
        return $this->container['configuration_id'];
    }

    /**
     * Sets configuration_id
     *
     * @param string|null $configuration_id Id of configuration, used to issue VC.
     *
     * @return self
     */
    public function setConfigurationId($configuration_id)
    {
        if (is_null($configuration_id)) {
            throw new \InvalidArgumentException('non-nullable configuration_id cannot be null');
        }
        $this->container['configuration_id'] = $configuration_id;

        return $this;
    }

    /**
     * Gets issued_at
     *
     * @return string|null
     */
    public function getIssuedAt()
    {
        return $this->container['issued_at'];
    }

    /**
     * Sets issued_at
     *
     * @param string|null $issued_at when credential was issued to the holder (holder invoked generateCredentials endpoint)
     *
     * @return self
     */
    public function setIssuedAt($issued_at)
    {
        if (is_null($issued_at)) {
            throw new \InvalidArgumentException('non-nullable issued_at cannot be null');
        }
        $this->container['issued_at'] = $issued_at;

        return $this;
    }

    /**
     * Gets wallet_id
     *
     * @return string|null
     */
    public function getWalletId()
    {
        return $this->container['wallet_id'];
    }

    /**
     * Sets wallet_id
     *
     * @param string|null $wallet_id Id of wallet, used to issue VC.
     *
     * @return self
     */
    public function setWalletId($wallet_id)
    {
        if (is_null($wallet_id)) {
            throw new \InvalidArgumentException('non-nullable wallet_id cannot be null');
        }
        $this->container['wallet_id'] = $wallet_id;

        return $this;
    }

    /**
     * Gets project_id_configuration_id
     *
     * @return string|null
     */
    public function getProjectIdConfigurationId()
    {
        return $this->container['project_id_configuration_id'];
    }

    /**
     * Sets project_id_configuration_id
     *
     * @param string|null $project_id_configuration_id Id of configuration with which VC was issued. To use as an index, it is grouped together with projectId, as \"{projectIdConfigurationId}#{configurationId}\"
     *
     * @return self
     */
    public function setProjectIdConfigurationId($project_id_configuration_id)
    {
        if (is_null($project_id_configuration_id)) {
            throw new \InvalidArgumentException('non-nullable project_id_configuration_id cannot be null');
        }
        $this->container['project_id_configuration_id'] = $project_id_configuration_id;

        return $this;
    }

    /**
     * Gets project_id_configuration_id_wallet_id
     *
     * @return string|null
     */
    public function getProjectIdConfigurationIdWalletId()
    {
        return $this->container['project_id_configuration_id_wallet_id'];
    }

    /**
     * Sets project_id_configuration_id_wallet_id
     *
     * @param string|null $project_id_configuration_id_wallet_id Id of wallet which issued VC. To use as an index, it is grouped together with projectId, as \"{projectIdConfigurationId}#{walletId}\"
     *
     * @return self
     */
    public function setProjectIdConfigurationIdWalletId($project_id_configuration_id_wallet_id)
    {
        if (is_null($project_id_configuration_id_wallet_id)) {
            throw new \InvalidArgumentException('non-nullable project_id_configuration_id_wallet_id cannot be null');
        }
        $this->container['project_id_configuration_id_wallet_id'] = $project_id_configuration_id_wallet_id;

        return $this;
    }

    /**
     * Gets project_id_configuration_id_credential_type
     *
     * @return string|null
     */
    public function getProjectIdConfigurationIdCredentialType()
    {
        return $this->container['project_id_configuration_id_credential_type'];
    }

    /**
     * Sets project_id_configuration_id_credential_type
     *
     * @param string|null $project_id_configuration_id_credential_type VC.type value. To use as an index, it is grouped together with projectId, as \"{projectIdConfigurationId}#{credentialType}\"
     *
     * @return self
     */
    public function setProjectIdConfigurationIdCredentialType($project_id_configuration_id_credential_type)
    {
        if (is_null($project_id_configuration_id_credential_type)) {
            throw new \InvalidArgumentException('non-nullable project_id_configuration_id_credential_type cannot be null');
        }
        $this->container['project_id_configuration_id_credential_type'] = $project_id_configuration_id_credential_type;

        return $this;
    }

    /**
     * Gets status_lists_details
     *
     * @return \AffinidiTdk\Clients\CredentialIssuance\Model\FlowDataStatusListsDetailsInner[]|null
     */
    public function getStatusListsDetails()
    {
        return $this->container['status_lists_details'];
    }

    /**
     * Sets status_lists_details
     *
     * @param \AffinidiTdk\Clients\CredentialIssuance\Model\FlowDataStatusListsDetailsInner[]|null $status_lists_details status_lists_details
     *
     * @return self
     */
    public function setStatusListsDetails($status_lists_details)
    {
        if (is_null($status_lists_details)) {
            throw new \InvalidArgumentException('non-nullable status_lists_details cannot be null');
        }
        $this->container['status_lists_details'] = $status_lists_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


