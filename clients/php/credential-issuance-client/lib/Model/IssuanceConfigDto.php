<?php
/**
 * IssuanceConfigDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\CredentialIssuance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\CredentialIssuance\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\CredentialIssuance\ObjectSerializer;

/**
 * IssuanceConfigDto Class Doc Comment
 *
 * @category Class
 * @package  AffinidiTdk\Clients\CredentialIssuance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IssuanceConfigDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IssuanceConfigDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'issuer_did' => 'string',
        'issuer_wallet_id' => 'string',
        'credential_offer_duration' => 'float',
        'c_nonce_duration' => 'float',
        'format' => 'string',
        'issuer_uri' => 'string',
        'credential_supported' => '\AffinidiTdk\Clients\CredentialIssuance\Model\CredentialSupportedObject[]',
        'issuer_metadata' => 'array<string,mixed>',
        'version' => 'float',
        'return_uris' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'issuer_did' => null,
        'issuer_wallet_id' => null,
        'credential_offer_duration' => null,
        'c_nonce_duration' => null,
        'format' => null,
        'issuer_uri' => null,
        'credential_supported' => null,
        'issuer_metadata' => null,
        'version' => null,
        'return_uris' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'description' => false,
        'issuer_did' => false,
        'issuer_wallet_id' => false,
        'credential_offer_duration' => false,
        'c_nonce_duration' => false,
        'format' => false,
        'issuer_uri' => false,
        'credential_supported' => false,
        'issuer_metadata' => false,
        'version' => false,
        'return_uris' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'issuer_did' => 'issuerDid',
        'issuer_wallet_id' => 'issuerWalletId',
        'credential_offer_duration' => 'credentialOfferDuration',
        'c_nonce_duration' => 'cNonceDuration',
        'format' => 'format',
        'issuer_uri' => 'issuerUri',
        'credential_supported' => 'credentialSupported',
        'issuer_metadata' => 'issuerMetadata',
        'version' => 'version',
        'return_uris' => 'returnUris'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'issuer_did' => 'setIssuerDid',
        'issuer_wallet_id' => 'setIssuerWalletId',
        'credential_offer_duration' => 'setCredentialOfferDuration',
        'c_nonce_duration' => 'setCNonceDuration',
        'format' => 'setFormat',
        'issuer_uri' => 'setIssuerUri',
        'credential_supported' => 'setCredentialSupported',
        'issuer_metadata' => 'setIssuerMetadata',
        'version' => 'setVersion',
        'return_uris' => 'setReturnUris'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'issuer_did' => 'getIssuerDid',
        'issuer_wallet_id' => 'getIssuerWalletId',
        'credential_offer_duration' => 'getCredentialOfferDuration',
        'c_nonce_duration' => 'getCNonceDuration',
        'format' => 'getFormat',
        'issuer_uri' => 'getIssuerUri',
        'credential_supported' => 'getCredentialSupported',
        'issuer_metadata' => 'getIssuerMetadata',
        'version' => 'getVersion',
        'return_uris' => 'getReturnUris'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FORMAT_LDP_VC = 'ldp_vc';
    public const FORMAT_JWT_VC_JSON_LD = 'jwt_vc_json-ld';
    public const FORMAT_SD_JWT_VC_JSON_LD = 'sd_jwt_vc_json-ld';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormatAllowableValues()
    {
        return [
            self::FORMAT_LDP_VC,
            self::FORMAT_JWT_VC_JSON_LD,
            self::FORMAT_SD_JWT_VC_JSON_LD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('issuer_did', $data ?? [], null);
        $this->setIfExists('issuer_wallet_id', $data ?? [], null);
        $this->setIfExists('credential_offer_duration', $data ?? [], null);
        $this->setIfExists('c_nonce_duration', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
        $this->setIfExists('issuer_uri', $data ?? [], null);
        $this->setIfExists('credential_supported', $data ?? [], null);
        $this->setIfExists('issuer_metadata', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('return_uris', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($this->container['format']) && !in_array($this->container['format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'format', must be one of '%s'",
                $this->container['format'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['credential_supported']) && (count($this->container['credential_supported']) < 1)) {
            $invalidProperties[] = "invalid value for 'credential_supported', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets issuer_did
     *
     * @return string|null
     */
    public function getIssuerDid()
    {
        return $this->container['issuer_did'];
    }

    /**
     * Sets issuer_did
     *
     * @param string|null $issuer_did Issuer DID
     *
     * @return self
     */
    public function setIssuerDid($issuer_did)
    {
        if (is_null($issuer_did)) {
            throw new \InvalidArgumentException('non-nullable issuer_did cannot be null');
        }
        $this->container['issuer_did'] = $issuer_did;

        return $this;
    }

    /**
     * Gets issuer_wallet_id
     *
     * @return string|null
     */
    public function getIssuerWalletId()
    {
        return $this->container['issuer_wallet_id'];
    }

    /**
     * Sets issuer_wallet_id
     *
     * @param string|null $issuer_wallet_id Issuer Wallet id
     *
     * @return self
     */
    public function setIssuerWalletId($issuer_wallet_id)
    {
        if (is_null($issuer_wallet_id)) {
            throw new \InvalidArgumentException('non-nullable issuer_wallet_id cannot be null');
        }
        $this->container['issuer_wallet_id'] = $issuer_wallet_id;

        return $this;
    }

    /**
     * Gets credential_offer_duration
     *
     * @return float|null
     */
    public function getCredentialOfferDuration()
    {
        return $this->container['credential_offer_duration'];
    }

    /**
     * Sets credential_offer_duration
     *
     * @param float|null $credential_offer_duration credential offer duration in second
     *
     * @return self
     */
    public function setCredentialOfferDuration($credential_offer_duration)
    {
        if (is_null($credential_offer_duration)) {
            throw new \InvalidArgumentException('non-nullable credential_offer_duration cannot be null');
        }
        $this->container['credential_offer_duration'] = $credential_offer_duration;

        return $this;
    }

    /**
     * Gets c_nonce_duration
     *
     * @return float|null
     */
    public function getCNonceDuration()
    {
        return $this->container['c_nonce_duration'];
    }

    /**
     * Sets c_nonce_duration
     *
     * @param float|null $c_nonce_duration c_nonce duration in second
     *
     * @return self
     */
    public function setCNonceDuration($c_nonce_duration)
    {
        if (is_null($c_nonce_duration)) {
            throw new \InvalidArgumentException('non-nullable c_nonce_duration cannot be null');
        }
        $this->container['c_nonce_duration'] = $c_nonce_duration;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format String identifying the format of this Credential, i.e., jwt_vc_json-ld or ldp_vc. Depending on the format value, the object contains further elements defining the type
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }
        $allowedValues = $this->getFormatAllowableValues();
        if (!in_array($format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'format', must be one of '%s'",
                    $format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets issuer_uri
     *
     * @return string|null
     */
    public function getIssuerUri()
    {
        return $this->container['issuer_uri'];
    }

    /**
     * Sets issuer_uri
     *
     * @param string|null $issuer_uri Issuer URI
     *
     * @return self
     */
    public function setIssuerUri($issuer_uri)
    {
        if (is_null($issuer_uri)) {
            throw new \InvalidArgumentException('non-nullable issuer_uri cannot be null');
        }
        $this->container['issuer_uri'] = $issuer_uri;

        return $this;
    }

    /**
     * Gets credential_supported
     *
     * @return \AffinidiTdk\Clients\CredentialIssuance\Model\CredentialSupportedObject[]|null
     */
    public function getCredentialSupported()
    {
        return $this->container['credential_supported'];
    }

    /**
     * Sets credential_supported
     *
     * @param \AffinidiTdk\Clients\CredentialIssuance\Model\CredentialSupportedObject[]|null $credential_supported credential_supported
     *
     * @return self
     */
    public function setCredentialSupported($credential_supported)
    {
        if (is_null($credential_supported)) {
            throw new \InvalidArgumentException('non-nullable credential_supported cannot be null');
        }


        if ((count($credential_supported) < 1)) {
            throw new \InvalidArgumentException('invalid length for $credential_supported when calling IssuanceConfigDto., number of items must be greater than or equal to 1.');
        }
        $this->container['credential_supported'] = $credential_supported;

        return $this;
    }

    /**
     * Gets issuer_metadata
     *
     * @return array<string,mixed>|null
     */
    public function getIssuerMetadata()
    {
        return $this->container['issuer_metadata'];
    }

    /**
     * Sets issuer_metadata
     *
     * @param array<string,mixed>|null $issuer_metadata Issuer public information wallet may want to show to user during consent confirmation
     *
     * @return self
     */
    public function setIssuerMetadata($issuer_metadata)
    {
        if (is_null($issuer_metadata)) {
            throw new \InvalidArgumentException('non-nullable issuer_metadata cannot be null');
        }
        $this->container['issuer_metadata'] = $issuer_metadata;

        return $this;
    }

    /**
     * Gets version
     *
     * @return float|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param float|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets return_uris
     *
     * @return string[]|null
     */
    public function getReturnUris()
    {
        return $this->container['return_uris'];
    }

    /**
     * Sets return_uris
     *
     * @param string[]|null $return_uris List of allowed URIs to be returned to after issuance
     *
     * @return self
     */
    public function setReturnUris($return_uris)
    {
        if (is_null($return_uris)) {
            throw new \InvalidArgumentException('non-nullable return_uris cannot be null');
        }
        $this->container['return_uris'] = $return_uris;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


