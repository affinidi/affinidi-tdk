<?php
/**
 * W3cCredential
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\CredentialVerification
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VerificationService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\CredentialVerification\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\CredentialVerification\ObjectSerializer;

/**
 * W3cCredential Class Doc Comment
 *
 * @category Class
 * @package  AffinidiTdk\Clients\CredentialVerification
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class W3cCredential implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'W3cCredential';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_context' => '\AffinidiTdk\Clients\CredentialVerification\Model\W3cPresentationContext',
        'id' => 'string',
        'type' => 'string[]',
        'holder' => '\AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialHolder',
        'credential_subject' => '\AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialCredentialSubject',
        'credential_status' => '\AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialStatus',
        'issuance_date' => 'string',
        'issuer' => 'string',
        'expiration_date' => 'string',
        'proof' => '\AffinidiTdk\Clients\CredentialVerification\Model\W3cProof',
        'credential_schema' => '\AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialCredentialSchema'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_context' => null,
        'id' => null,
        'type' => null,
        'holder' => null,
        'credential_subject' => null,
        'credential_status' => null,
        'issuance_date' => null,
        'issuer' => null,
        'expiration_date' => null,
        'proof' => null,
        'credential_schema' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_context' => false,
        'id' => true,
        'type' => false,
        'holder' => false,
        'credential_subject' => false,
        'credential_status' => false,
        'issuance_date' => false,
        'issuer' => false,
        'expiration_date' => true,
        'proof' => false,
        'credential_schema' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_context' => '@context',
        'id' => 'id',
        'type' => 'type',
        'holder' => 'holder',
        'credential_subject' => 'credentialSubject',
        'credential_status' => 'credentialStatus',
        'issuance_date' => 'issuanceDate',
        'issuer' => 'issuer',
        'expiration_date' => 'expirationDate',
        'proof' => 'proof',
        'credential_schema' => 'credentialSchema'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_context' => 'setAtContext',
        'id' => 'setId',
        'type' => 'setType',
        'holder' => 'setHolder',
        'credential_subject' => 'setCredentialSubject',
        'credential_status' => 'setCredentialStatus',
        'issuance_date' => 'setIssuanceDate',
        'issuer' => 'setIssuer',
        'expiration_date' => 'setExpirationDate',
        'proof' => 'setProof',
        'credential_schema' => 'setCredentialSchema'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_context' => 'getAtContext',
        'id' => 'getId',
        'type' => 'getType',
        'holder' => 'getHolder',
        'credential_subject' => 'getCredentialSubject',
        'credential_status' => 'getCredentialStatus',
        'issuance_date' => 'getIssuanceDate',
        'issuer' => 'getIssuer',
        'expiration_date' => 'getExpirationDate',
        'proof' => 'getProof',
        'credential_schema' => 'getCredentialSchema'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_context', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('holder', $data ?? [], null);
        $this->setIfExists('credential_subject', $data ?? [], null);
        $this->setIfExists('credential_status', $data ?? [], null);
        $this->setIfExists('issuance_date', $data ?? [], null);
        $this->setIfExists('issuer', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('proof', $data ?? [], null);
        $this->setIfExists('credential_schema', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['at_context'] === null) {
            $invalidProperties[] = "'at_context' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['credential_subject'] === null) {
            $invalidProperties[] = "'credential_subject' can't be null";
        }
        if ($this->container['issuance_date'] === null) {
            $invalidProperties[] = "'issuance_date' can't be null";
        }
        if ($this->container['issuer'] === null) {
            $invalidProperties[] = "'issuer' can't be null";
        }
        if ($this->container['proof'] === null) {
            $invalidProperties[] = "'proof' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_context
     *
     * @return \AffinidiTdk\Clients\CredentialVerification\Model\W3cPresentationContext
     */
    public function getAtContext()
    {
        return $this->container['at_context'];
    }

    /**
     * Sets at_context
     *
     * @param \AffinidiTdk\Clients\CredentialVerification\Model\W3cPresentationContext $at_context at_context
     *
     * @return self
     */
    public function setAtContext($at_context)
    {
        if (is_null($at_context)) {
            throw new \InvalidArgumentException('non-nullable at_context cannot be null');
        }
        $this->container['at_context'] = $at_context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string[]
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string[] $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets holder
     *
     * @return \AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialHolder|null
     */
    public function getHolder()
    {
        return $this->container['holder'];
    }

    /**
     * Sets holder
     *
     * @param \AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialHolder|null $holder holder
     *
     * @return self
     */
    public function setHolder($holder)
    {
        if (is_null($holder)) {
            throw new \InvalidArgumentException('non-nullable holder cannot be null');
        }
        $this->container['holder'] = $holder;

        return $this;
    }

    /**
     * Gets credential_subject
     *
     * @return \AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialCredentialSubject
     */
    public function getCredentialSubject()
    {
        return $this->container['credential_subject'];
    }

    /**
     * Sets credential_subject
     *
     * @param \AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialCredentialSubject $credential_subject credential_subject
     *
     * @return self
     */
    public function setCredentialSubject($credential_subject)
    {
        if (is_null($credential_subject)) {
            throw new \InvalidArgumentException('non-nullable credential_subject cannot be null');
        }
        $this->container['credential_subject'] = $credential_subject;

        return $this;
    }

    /**
     * Gets credential_status
     *
     * @return \AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialStatus|null
     */
    public function getCredentialStatus()
    {
        return $this->container['credential_status'];
    }

    /**
     * Sets credential_status
     *
     * @param \AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialStatus|null $credential_status credential_status
     *
     * @return self
     */
    public function setCredentialStatus($credential_status)
    {
        if (is_null($credential_status)) {
            throw new \InvalidArgumentException('non-nullable credential_status cannot be null');
        }
        $this->container['credential_status'] = $credential_status;

        return $this;
    }

    /**
     * Gets issuance_date
     *
     * @return string
     */
    public function getIssuanceDate()
    {
        return $this->container['issuance_date'];
    }

    /**
     * Sets issuance_date
     *
     * @param string $issuance_date issuance_date
     *
     * @return self
     */
    public function setIssuanceDate($issuance_date)
    {
        if (is_null($issuance_date)) {
            throw new \InvalidArgumentException('non-nullable issuance_date cannot be null');
        }
        $this->container['issuance_date'] = $issuance_date;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return string
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param string $issuer issuer
     *
     * @return self
     */
    public function setIssuer($issuer)
    {
        if (is_null($issuer)) {
            throw new \InvalidArgumentException('non-nullable issuer cannot be null');
        }
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            array_push($this->openAPINullablesSetToNull, 'expiration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets proof
     *
     * @return \AffinidiTdk\Clients\CredentialVerification\Model\W3cProof
     */
    public function getProof()
    {
        return $this->container['proof'];
    }

    /**
     * Sets proof
     *
     * @param \AffinidiTdk\Clients\CredentialVerification\Model\W3cProof $proof proof
     *
     * @return self
     */
    public function setProof($proof)
    {
        if (is_null($proof)) {
            throw new \InvalidArgumentException('non-nullable proof cannot be null');
        }
        $this->container['proof'] = $proof;

        return $this;
    }

    /**
     * Gets credential_schema
     *
     * @return \AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialCredentialSchema|null
     */
    public function getCredentialSchema()
    {
        return $this->container['credential_schema'];
    }

    /**
     * Sets credential_schema
     *
     * @param \AffinidiTdk\Clients\CredentialVerification\Model\W3cCredentialCredentialSchema|null $credential_schema credential_schema
     *
     * @return self
     */
    public function setCredentialSchema($credential_schema)
    {
        if (is_null($credential_schema)) {
            throw new \InvalidArgumentException('non-nullable credential_schema cannot be null');
        }
        $this->container['credential_schema'] = $credential_schema;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


