<?php
/**
 * OIDCConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\LoginConfiguration
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\LoginConfiguration\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\LoginConfiguration\ObjectSerializer;

/**
 * OIDCConfig Class Doc Comment
 *
 * @category Class
 * @package  AffinidiTdk\Clients\LoginConfiguration
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OIDCConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OIDCConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorization_endpoint' => 'string',
        'backchannel_logout_session_supported' => 'bool',
        'backchannel_logout_supported' => 'bool',
        'claims_parameter_supported' => 'bool',
        'claims_supported' => 'string[]',
        'code_challenge_methods_supported' => 'string[]',
        'credentials_endpoint_draft_00' => 'string',
        'credentials_supported_draft_00' => '\AffinidiTdk\Clients\LoginConfiguration\Model\OIDCConfigCredentialsSupportedDraft00Inner[]',
        'end_session_endpoint' => 'string',
        'frontchannel_logout_session_supported' => 'bool',
        'frontchannel_logout_supported' => 'bool',
        'grant_types_supported' => 'string[]',
        'id_token_signed_response_alg' => 'string[]',
        'id_token_signing_alg_values_supported' => 'string[]',
        'issuer' => 'string',
        'jwks_uri' => 'string',
        'registration_endpoint' => 'string',
        'request_object_signing_alg_values_supported' => 'string[]',
        'request_parameter_supported' => 'bool',
        'request_uri_parameter_supported' => 'bool',
        'require_request_uri_registration' => 'bool',
        'response_modes_supported' => 'string[]',
        'response_types_supported' => 'string[]',
        'revocation_endpoint' => 'string',
        'scopes_supported' => 'string[]',
        'subject_types_supported' => 'string[]',
        'token_endpoint' => 'string',
        'token_endpoint_auth_methods_supported' => 'string[]',
        'userinfo_endpoint' => 'string',
        'userinfo_signed_response_alg' => 'string[]',
        'userinfo_signing_alg_values_supported' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authorization_endpoint' => null,
        'backchannel_logout_session_supported' => null,
        'backchannel_logout_supported' => null,
        'claims_parameter_supported' => null,
        'claims_supported' => null,
        'code_challenge_methods_supported' => null,
        'credentials_endpoint_draft_00' => null,
        'credentials_supported_draft_00' => null,
        'end_session_endpoint' => null,
        'frontchannel_logout_session_supported' => null,
        'frontchannel_logout_supported' => null,
        'grant_types_supported' => null,
        'id_token_signed_response_alg' => null,
        'id_token_signing_alg_values_supported' => null,
        'issuer' => null,
        'jwks_uri' => null,
        'registration_endpoint' => null,
        'request_object_signing_alg_values_supported' => null,
        'request_parameter_supported' => null,
        'request_uri_parameter_supported' => null,
        'require_request_uri_registration' => null,
        'response_modes_supported' => null,
        'response_types_supported' => null,
        'revocation_endpoint' => null,
        'scopes_supported' => null,
        'subject_types_supported' => null,
        'token_endpoint' => null,
        'token_endpoint_auth_methods_supported' => null,
        'userinfo_endpoint' => null,
        'userinfo_signed_response_alg' => null,
        'userinfo_signing_alg_values_supported' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authorization_endpoint' => false,
        'backchannel_logout_session_supported' => false,
        'backchannel_logout_supported' => false,
        'claims_parameter_supported' => false,
        'claims_supported' => false,
        'code_challenge_methods_supported' => false,
        'credentials_endpoint_draft_00' => false,
        'credentials_supported_draft_00' => false,
        'end_session_endpoint' => false,
        'frontchannel_logout_session_supported' => false,
        'frontchannel_logout_supported' => false,
        'grant_types_supported' => false,
        'id_token_signed_response_alg' => false,
        'id_token_signing_alg_values_supported' => false,
        'issuer' => false,
        'jwks_uri' => false,
        'registration_endpoint' => false,
        'request_object_signing_alg_values_supported' => false,
        'request_parameter_supported' => false,
        'request_uri_parameter_supported' => false,
        'require_request_uri_registration' => false,
        'response_modes_supported' => false,
        'response_types_supported' => false,
        'revocation_endpoint' => false,
        'scopes_supported' => false,
        'subject_types_supported' => false,
        'token_endpoint' => false,
        'token_endpoint_auth_methods_supported' => false,
        'userinfo_endpoint' => false,
        'userinfo_signed_response_alg' => false,
        'userinfo_signing_alg_values_supported' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_endpoint' => 'authorization_endpoint',
        'backchannel_logout_session_supported' => 'backchannel_logout_session_supported',
        'backchannel_logout_supported' => 'backchannel_logout_supported',
        'claims_parameter_supported' => 'claims_parameter_supported',
        'claims_supported' => 'claims_supported',
        'code_challenge_methods_supported' => 'code_challenge_methods_supported',
        'credentials_endpoint_draft_00' => 'credentials_endpoint_draft_00',
        'credentials_supported_draft_00' => 'credentials_supported_draft_00',
        'end_session_endpoint' => 'end_session_endpoint',
        'frontchannel_logout_session_supported' => 'frontchannel_logout_session_supported',
        'frontchannel_logout_supported' => 'frontchannel_logout_supported',
        'grant_types_supported' => 'grant_types_supported',
        'id_token_signed_response_alg' => 'id_token_signed_response_alg',
        'id_token_signing_alg_values_supported' => 'id_token_signing_alg_values_supported',
        'issuer' => 'issuer',
        'jwks_uri' => 'jwks_uri',
        'registration_endpoint' => 'registration_endpoint',
        'request_object_signing_alg_values_supported' => 'request_object_signing_alg_values_supported',
        'request_parameter_supported' => 'request_parameter_supported',
        'request_uri_parameter_supported' => 'request_uri_parameter_supported',
        'require_request_uri_registration' => 'require_request_uri_registration',
        'response_modes_supported' => 'response_modes_supported',
        'response_types_supported' => 'response_types_supported',
        'revocation_endpoint' => 'revocation_endpoint',
        'scopes_supported' => 'scopes_supported',
        'subject_types_supported' => 'subject_types_supported',
        'token_endpoint' => 'token_endpoint',
        'token_endpoint_auth_methods_supported' => 'token_endpoint_auth_methods_supported',
        'userinfo_endpoint' => 'userinfo_endpoint',
        'userinfo_signed_response_alg' => 'userinfo_signed_response_alg',
        'userinfo_signing_alg_values_supported' => 'userinfo_signing_alg_values_supported'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_endpoint' => 'setAuthorizationEndpoint',
        'backchannel_logout_session_supported' => 'setBackchannelLogoutSessionSupported',
        'backchannel_logout_supported' => 'setBackchannelLogoutSupported',
        'claims_parameter_supported' => 'setClaimsParameterSupported',
        'claims_supported' => 'setClaimsSupported',
        'code_challenge_methods_supported' => 'setCodeChallengeMethodsSupported',
        'credentials_endpoint_draft_00' => 'setCredentialsEndpointDraft00',
        'credentials_supported_draft_00' => 'setCredentialsSupportedDraft00',
        'end_session_endpoint' => 'setEndSessionEndpoint',
        'frontchannel_logout_session_supported' => 'setFrontchannelLogoutSessionSupported',
        'frontchannel_logout_supported' => 'setFrontchannelLogoutSupported',
        'grant_types_supported' => 'setGrantTypesSupported',
        'id_token_signed_response_alg' => 'setIdTokenSignedResponseAlg',
        'id_token_signing_alg_values_supported' => 'setIdTokenSigningAlgValuesSupported',
        'issuer' => 'setIssuer',
        'jwks_uri' => 'setJwksUri',
        'registration_endpoint' => 'setRegistrationEndpoint',
        'request_object_signing_alg_values_supported' => 'setRequestObjectSigningAlgValuesSupported',
        'request_parameter_supported' => 'setRequestParameterSupported',
        'request_uri_parameter_supported' => 'setRequestUriParameterSupported',
        'require_request_uri_registration' => 'setRequireRequestUriRegistration',
        'response_modes_supported' => 'setResponseModesSupported',
        'response_types_supported' => 'setResponseTypesSupported',
        'revocation_endpoint' => 'setRevocationEndpoint',
        'scopes_supported' => 'setScopesSupported',
        'subject_types_supported' => 'setSubjectTypesSupported',
        'token_endpoint' => 'setTokenEndpoint',
        'token_endpoint_auth_methods_supported' => 'setTokenEndpointAuthMethodsSupported',
        'userinfo_endpoint' => 'setUserinfoEndpoint',
        'userinfo_signed_response_alg' => 'setUserinfoSignedResponseAlg',
        'userinfo_signing_alg_values_supported' => 'setUserinfoSigningAlgValuesSupported'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_endpoint' => 'getAuthorizationEndpoint',
        'backchannel_logout_session_supported' => 'getBackchannelLogoutSessionSupported',
        'backchannel_logout_supported' => 'getBackchannelLogoutSupported',
        'claims_parameter_supported' => 'getClaimsParameterSupported',
        'claims_supported' => 'getClaimsSupported',
        'code_challenge_methods_supported' => 'getCodeChallengeMethodsSupported',
        'credentials_endpoint_draft_00' => 'getCredentialsEndpointDraft00',
        'credentials_supported_draft_00' => 'getCredentialsSupportedDraft00',
        'end_session_endpoint' => 'getEndSessionEndpoint',
        'frontchannel_logout_session_supported' => 'getFrontchannelLogoutSessionSupported',
        'frontchannel_logout_supported' => 'getFrontchannelLogoutSupported',
        'grant_types_supported' => 'getGrantTypesSupported',
        'id_token_signed_response_alg' => 'getIdTokenSignedResponseAlg',
        'id_token_signing_alg_values_supported' => 'getIdTokenSigningAlgValuesSupported',
        'issuer' => 'getIssuer',
        'jwks_uri' => 'getJwksUri',
        'registration_endpoint' => 'getRegistrationEndpoint',
        'request_object_signing_alg_values_supported' => 'getRequestObjectSigningAlgValuesSupported',
        'request_parameter_supported' => 'getRequestParameterSupported',
        'request_uri_parameter_supported' => 'getRequestUriParameterSupported',
        'require_request_uri_registration' => 'getRequireRequestUriRegistration',
        'response_modes_supported' => 'getResponseModesSupported',
        'response_types_supported' => 'getResponseTypesSupported',
        'revocation_endpoint' => 'getRevocationEndpoint',
        'scopes_supported' => 'getScopesSupported',
        'subject_types_supported' => 'getSubjectTypesSupported',
        'token_endpoint' => 'getTokenEndpoint',
        'token_endpoint_auth_methods_supported' => 'getTokenEndpointAuthMethodsSupported',
        'userinfo_endpoint' => 'getUserinfoEndpoint',
        'userinfo_signed_response_alg' => 'getUserinfoSignedResponseAlg',
        'userinfo_signing_alg_values_supported' => 'getUserinfoSigningAlgValuesSupported'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('authorization_endpoint', $data ?? [], null);
        $this->setIfExists('backchannel_logout_session_supported', $data ?? [], null);
        $this->setIfExists('backchannel_logout_supported', $data ?? [], null);
        $this->setIfExists('claims_parameter_supported', $data ?? [], null);
        $this->setIfExists('claims_supported', $data ?? [], null);
        $this->setIfExists('code_challenge_methods_supported', $data ?? [], null);
        $this->setIfExists('credentials_endpoint_draft_00', $data ?? [], null);
        $this->setIfExists('credentials_supported_draft_00', $data ?? [], null);
        $this->setIfExists('end_session_endpoint', $data ?? [], null);
        $this->setIfExists('frontchannel_logout_session_supported', $data ?? [], null);
        $this->setIfExists('frontchannel_logout_supported', $data ?? [], null);
        $this->setIfExists('grant_types_supported', $data ?? [], null);
        $this->setIfExists('id_token_signed_response_alg', $data ?? [], null);
        $this->setIfExists('id_token_signing_alg_values_supported', $data ?? [], null);
        $this->setIfExists('issuer', $data ?? [], null);
        $this->setIfExists('jwks_uri', $data ?? [], null);
        $this->setIfExists('registration_endpoint', $data ?? [], null);
        $this->setIfExists('request_object_signing_alg_values_supported', $data ?? [], null);
        $this->setIfExists('request_parameter_supported', $data ?? [], null);
        $this->setIfExists('request_uri_parameter_supported', $data ?? [], null);
        $this->setIfExists('require_request_uri_registration', $data ?? [], null);
        $this->setIfExists('response_modes_supported', $data ?? [], null);
        $this->setIfExists('response_types_supported', $data ?? [], null);
        $this->setIfExists('revocation_endpoint', $data ?? [], null);
        $this->setIfExists('scopes_supported', $data ?? [], null);
        $this->setIfExists('subject_types_supported', $data ?? [], null);
        $this->setIfExists('token_endpoint', $data ?? [], null);
        $this->setIfExists('token_endpoint_auth_methods_supported', $data ?? [], null);
        $this->setIfExists('userinfo_endpoint', $data ?? [], null);
        $this->setIfExists('userinfo_signed_response_alg', $data ?? [], null);
        $this->setIfExists('userinfo_signing_alg_values_supported', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['authorization_endpoint'] === null) {
            $invalidProperties[] = "'authorization_endpoint' can't be null";
        }
        if ($this->container['id_token_signed_response_alg'] === null) {
            $invalidProperties[] = "'id_token_signed_response_alg' can't be null";
        }
        if ($this->container['id_token_signing_alg_values_supported'] === null) {
            $invalidProperties[] = "'id_token_signing_alg_values_supported' can't be null";
        }
        if ($this->container['issuer'] === null) {
            $invalidProperties[] = "'issuer' can't be null";
        }
        if ($this->container['jwks_uri'] === null) {
            $invalidProperties[] = "'jwks_uri' can't be null";
        }
        if ($this->container['response_types_supported'] === null) {
            $invalidProperties[] = "'response_types_supported' can't be null";
        }
        if ($this->container['subject_types_supported'] === null) {
            $invalidProperties[] = "'subject_types_supported' can't be null";
        }
        if ($this->container['token_endpoint'] === null) {
            $invalidProperties[] = "'token_endpoint' can't be null";
        }
        if ($this->container['userinfo_signed_response_alg'] === null) {
            $invalidProperties[] = "'userinfo_signed_response_alg' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_endpoint
     *
     * @return string
     */
    public function getAuthorizationEndpoint()
    {
        return $this->container['authorization_endpoint'];
    }

    /**
     * Sets authorization_endpoint
     *
     * @param string $authorization_endpoint OAuth 2.0 Authorization Endpoint URL
     *
     * @return self
     */
    public function setAuthorizationEndpoint($authorization_endpoint)
    {
        if (is_null($authorization_endpoint)) {
            throw new \InvalidArgumentException('non-nullable authorization_endpoint cannot be null');
        }
        $this->container['authorization_endpoint'] = $authorization_endpoint;

        return $this;
    }

    /**
     * Gets backchannel_logout_session_supported
     *
     * @return bool|null
     */
    public function getBackchannelLogoutSessionSupported()
    {
        return $this->container['backchannel_logout_session_supported'];
    }

    /**
     * Sets backchannel_logout_session_supported
     *
     * @param bool|null $backchannel_logout_session_supported OpenID Connect Back-Channel Logout Session Required. Boolean value specifying whether the OP can pass a sid (session ID)  Claim in the Logout Token to identify the RP session with the OP. If  supported, the sid Claim is also included in ID Tokens issued by the OP
     *
     * @return self
     */
    public function setBackchannelLogoutSessionSupported($backchannel_logout_session_supported)
    {
        if (is_null($backchannel_logout_session_supported)) {
            throw new \InvalidArgumentException('non-nullable backchannel_logout_session_supported cannot be null');
        }
        $this->container['backchannel_logout_session_supported'] = $backchannel_logout_session_supported;

        return $this;
    }

    /**
     * Gets backchannel_logout_supported
     *
     * @return bool|null
     */
    public function getBackchannelLogoutSupported()
    {
        return $this->container['backchannel_logout_supported'];
    }

    /**
     * Sets backchannel_logout_supported
     *
     * @param bool|null $backchannel_logout_supported OpenID Connect Back-Channel Logout Supported. Boolean value specifying whether the OP supports  back-channel logout, with true indicating support.
     *
     * @return self
     */
    public function setBackchannelLogoutSupported($backchannel_logout_supported)
    {
        if (is_null($backchannel_logout_supported)) {
            throw new \InvalidArgumentException('non-nullable backchannel_logout_supported cannot be null');
        }
        $this->container['backchannel_logout_supported'] = $backchannel_logout_supported;

        return $this;
    }

    /**
     * Gets claims_parameter_supported
     *
     * @return bool|null
     */
    public function getClaimsParameterSupported()
    {
        return $this->container['claims_parameter_supported'];
    }

    /**
     * Sets claims_parameter_supported
     *
     * @param bool|null $claims_parameter_supported OpenID Connect Claims Parameter Parameter Supported Boolean value specifying whether the OP supports use  of the claims parameter, with true indicating support.
     *
     * @return self
     */
    public function setClaimsParameterSupported($claims_parameter_supported)
    {
        if (is_null($claims_parameter_supported)) {
            throw new \InvalidArgumentException('non-nullable claims_parameter_supported cannot be null');
        }
        $this->container['claims_parameter_supported'] = $claims_parameter_supported;

        return $this;
    }

    /**
     * Gets claims_supported
     *
     * @return string[]|null
     */
    public function getClaimsSupported()
    {
        return $this->container['claims_supported'];
    }

    /**
     * Sets claims_supported
     *
     * @param string[]|null $claims_supported OpenID Connect Supported Claims   JSON array containing a list of the Claim Names of the  Claims that the OpenID Provider MAY be able to supply  values for. Note that for privacy or other reasons,  this might not be an exhaustive list.
     *
     * @return self
     */
    public function setClaimsSupported($claims_supported)
    {
        if (is_null($claims_supported)) {
            throw new \InvalidArgumentException('non-nullable claims_supported cannot be null');
        }
        $this->container['claims_supported'] = $claims_supported;

        return $this;
    }

    /**
     * Gets code_challenge_methods_supported
     *
     * @return string[]|null
     */
    public function getCodeChallengeMethodsSupported()
    {
        return $this->container['code_challenge_methods_supported'];
    }

    /**
     * Sets code_challenge_methods_supported
     *
     * @param string[]|null $code_challenge_methods_supported OAuth 2.0 PKCE Supported Code Challenge Methods JSON array containing a list of Proof Key for Code  Exchange (PKCE) [RFC7636] code challenge methods  supported by this authorization server.
     *
     * @return self
     */
    public function setCodeChallengeMethodsSupported($code_challenge_methods_supported)
    {
        if (is_null($code_challenge_methods_supported)) {
            throw new \InvalidArgumentException('non-nullable code_challenge_methods_supported cannot be null');
        }
        $this->container['code_challenge_methods_supported'] = $code_challenge_methods_supported;

        return $this;
    }

    /**
     * Gets credentials_endpoint_draft_00
     *
     * @return string|null
     */
    public function getCredentialsEndpointDraft00()
    {
        return $this->container['credentials_endpoint_draft_00'];
    }

    /**
     * Sets credentials_endpoint_draft_00
     *
     * @param string|null $credentials_endpoint_draft_00 OpenID Connect Verifiable Credentials Endpoint Contains the URL of the Verifiable Credentials Endpoint.
     *
     * @return self
     */
    public function setCredentialsEndpointDraft00($credentials_endpoint_draft_00)
    {
        if (is_null($credentials_endpoint_draft_00)) {
            throw new \InvalidArgumentException('non-nullable credentials_endpoint_draft_00 cannot be null');
        }
        $this->container['credentials_endpoint_draft_00'] = $credentials_endpoint_draft_00;

        return $this;
    }

    /**
     * Gets credentials_supported_draft_00
     *
     * @return \AffinidiTdk\Clients\LoginConfiguration\Model\OIDCConfigCredentialsSupportedDraft00Inner[]|null
     */
    public function getCredentialsSupportedDraft00()
    {
        return $this->container['credentials_supported_draft_00'];
    }

    /**
     * Sets credentials_supported_draft_00
     *
     * @param \AffinidiTdk\Clients\LoginConfiguration\Model\OIDCConfigCredentialsSupportedDraft00Inner[]|null $credentials_supported_draft_00 OpenID Connect Verifiable Credentials Supported JSON array containing a list of the Verifiable  Credentials supported by this authorization server.
     *
     * @return self
     */
    public function setCredentialsSupportedDraft00($credentials_supported_draft_00)
    {
        if (is_null($credentials_supported_draft_00)) {
            throw new \InvalidArgumentException('non-nullable credentials_supported_draft_00 cannot be null');
        }
        $this->container['credentials_supported_draft_00'] = $credentials_supported_draft_00;

        return $this;
    }

    /**
     * Gets end_session_endpoint
     *
     * @return string|null
     */
    public function getEndSessionEndpoint()
    {
        return $this->container['end_session_endpoint'];
    }

    /**
     * Sets end_session_endpoint
     *
     * @param string|null $end_session_endpoint OpenID Connect End-Session Endpoint URL at the OP to which an RP can perform  a redirect to request that the End-User be  logged out at the OP.
     *
     * @return self
     */
    public function setEndSessionEndpoint($end_session_endpoint)
    {
        if (is_null($end_session_endpoint)) {
            throw new \InvalidArgumentException('non-nullable end_session_endpoint cannot be null');
        }
        $this->container['end_session_endpoint'] = $end_session_endpoint;

        return $this;
    }

    /**
     * Gets frontchannel_logout_session_supported
     *
     * @return bool|null
     */
    public function getFrontchannelLogoutSessionSupported()
    {
        return $this->container['frontchannel_logout_session_supported'];
    }

    /**
     * Sets frontchannel_logout_session_supported
     *
     * @param bool|null $frontchannel_logout_session_supported OpenID Connect Front-Channel Logout Session Required Boolean value specifying whether the OP can pass iss  (issuer) and sid (session ID) query parameters to identify  the RP session with the OP when the frontchannel_logout_uri  is used. If supported, the sid Claim is also included in ID  Tokens issued by the OP.
     *
     * @return self
     */
    public function setFrontchannelLogoutSessionSupported($frontchannel_logout_session_supported)
    {
        if (is_null($frontchannel_logout_session_supported)) {
            throw new \InvalidArgumentException('non-nullable frontchannel_logout_session_supported cannot be null');
        }
        $this->container['frontchannel_logout_session_supported'] = $frontchannel_logout_session_supported;

        return $this;
    }

    /**
     * Gets frontchannel_logout_supported
     *
     * @return bool|null
     */
    public function getFrontchannelLogoutSupported()
    {
        return $this->container['frontchannel_logout_supported'];
    }

    /**
     * Sets frontchannel_logout_supported
     *
     * @param bool|null $frontchannel_logout_supported OpenID Connect Front-Channel Logout Supported Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
     *
     * @return self
     */
    public function setFrontchannelLogoutSupported($frontchannel_logout_supported)
    {
        if (is_null($frontchannel_logout_supported)) {
            throw new \InvalidArgumentException('non-nullable frontchannel_logout_supported cannot be null');
        }
        $this->container['frontchannel_logout_supported'] = $frontchannel_logout_supported;

        return $this;
    }

    /**
     * Gets grant_types_supported
     *
     * @return string[]|null
     */
    public function getGrantTypesSupported()
    {
        return $this->container['grant_types_supported'];
    }

    /**
     * Sets grant_types_supported
     *
     * @param string[]|null $grant_types_supported OAuth 2.0 Supported Grant Types JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
     *
     * @return self
     */
    public function setGrantTypesSupported($grant_types_supported)
    {
        if (is_null($grant_types_supported)) {
            throw new \InvalidArgumentException('non-nullable grant_types_supported cannot be null');
        }
        $this->container['grant_types_supported'] = $grant_types_supported;

        return $this;
    }

    /**
     * Gets id_token_signed_response_alg
     *
     * @return string[]
     */
    public function getIdTokenSignedResponseAlg()
    {
        return $this->container['id_token_signed_response_alg'];
    }

    /**
     * Sets id_token_signed_response_alg
     *
     * @param string[] $id_token_signed_response_alg OpenID Connect Default ID Token Signing Algorithms Algorithm used to sign OpenID Connect ID Tokens.
     *
     * @return self
     */
    public function setIdTokenSignedResponseAlg($id_token_signed_response_alg)
    {
        if (is_null($id_token_signed_response_alg)) {
            throw new \InvalidArgumentException('non-nullable id_token_signed_response_alg cannot be null');
        }
        $this->container['id_token_signed_response_alg'] = $id_token_signed_response_alg;

        return $this;
    }

    /**
     * Gets id_token_signing_alg_values_supported
     *
     * @return string[]
     */
    public function getIdTokenSigningAlgValuesSupported()
    {
        return $this->container['id_token_signing_alg_values_supported'];
    }

    /**
     * Sets id_token_signing_alg_values_supported
     *
     * @param string[] $id_token_signing_alg_values_supported OpenID Connect Supported ID Token Signing Algorithms JSON array containing a list of the JWS signing algorithms  (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
     *
     * @return self
     */
    public function setIdTokenSigningAlgValuesSupported($id_token_signing_alg_values_supported)
    {
        if (is_null($id_token_signing_alg_values_supported)) {
            throw new \InvalidArgumentException('non-nullable id_token_signing_alg_values_supported cannot be null');
        }
        $this->container['id_token_signing_alg_values_supported'] = $id_token_signing_alg_values_supported;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return string
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param string $issuer OpenID Connect Issuer URL An URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery  is supported , this value MUST be identical to the issuer value returned by WebFinger.  This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
     *
     * @return self
     */
    public function setIssuer($issuer)
    {
        if (is_null($issuer)) {
            throw new \InvalidArgumentException('non-nullable issuer cannot be null');
        }
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets jwks_uri
     *
     * @return string
     */
    public function getJwksUri()
    {
        return $this->container['jwks_uri'];
    }

    /**
     * Sets jwks_uri
     *
     * @param string $jwks_uri OpenID Connect Well-Known JSON Web Keys URL URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP  uses to validate signatures from the OP. The JWK Set MAY also contain the Server's  encryption key(s), which are used by RPs to encrypt requests to the Server. When both  signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED  for all keys in the referenced JWK Set to indicate each key's intended usage. Although some  algorithms allow the same key to be used for both signatures and encryption, doing so is  NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509  representations of keys provided. When used, the bare key values MUST still be present and  MUST match those in the certificate.
     *
     * @return self
     */
    public function setJwksUri($jwks_uri)
    {
        if (is_null($jwks_uri)) {
            throw new \InvalidArgumentException('non-nullable jwks_uri cannot be null');
        }
        $this->container['jwks_uri'] = $jwks_uri;

        return $this;
    }

    /**
     * Gets registration_endpoint
     *
     * @return string|null
     */
    public function getRegistrationEndpoint()
    {
        return $this->container['registration_endpoint'];
    }

    /**
     * Sets registration_endpoint
     *
     * @param string|null $registration_endpoint OpenID Connect Dynamic Client Registration Endpoint URL
     *
     * @return self
     */
    public function setRegistrationEndpoint($registration_endpoint)
    {
        if (is_null($registration_endpoint)) {
            throw new \InvalidArgumentException('non-nullable registration_endpoint cannot be null');
        }
        $this->container['registration_endpoint'] = $registration_endpoint;

        return $this;
    }

    /**
     * Gets request_object_signing_alg_values_supported
     *
     * @return string[]|null
     */
    public function getRequestObjectSigningAlgValuesSupported()
    {
        return $this->container['request_object_signing_alg_values_supported'];
    }

    /**
     * Sets request_object_signing_alg_values_supported
     *
     * @param string[]|null $request_object_signing_alg_values_supported OpenID Connect Supported Request Object Signing Algorithms JSON array containing a list of the JWS signing algorithms (alg values) supported by  the OP for Request Objects, which are described in Section 6.1 of  OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the  Request Object is passed by value (using the request parameter) and when it is  passed by reference (using the request_uri parameter).
     *
     * @return self
     */
    public function setRequestObjectSigningAlgValuesSupported($request_object_signing_alg_values_supported)
    {
        if (is_null($request_object_signing_alg_values_supported)) {
            throw new \InvalidArgumentException('non-nullable request_object_signing_alg_values_supported cannot be null');
        }
        $this->container['request_object_signing_alg_values_supported'] = $request_object_signing_alg_values_supported;

        return $this;
    }

    /**
     * Gets request_parameter_supported
     *
     * @return bool|null
     */
    public function getRequestParameterSupported()
    {
        return $this->container['request_parameter_supported'];
    }

    /**
     * Sets request_parameter_supported
     *
     * @param bool|null $request_parameter_supported OpenID Connect Request Parameter Supported Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
     *
     * @return self
     */
    public function setRequestParameterSupported($request_parameter_supported)
    {
        if (is_null($request_parameter_supported)) {
            throw new \InvalidArgumentException('non-nullable request_parameter_supported cannot be null');
        }
        $this->container['request_parameter_supported'] = $request_parameter_supported;

        return $this;
    }

    /**
     * Gets request_uri_parameter_supported
     *
     * @return bool|null
     */
    public function getRequestUriParameterSupported()
    {
        return $this->container['request_uri_parameter_supported'];
    }

    /**
     * Sets request_uri_parameter_supported
     *
     * @param bool|null $request_uri_parameter_supported OpenID Connect Request URI Parameter Supported Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
     *
     * @return self
     */
    public function setRequestUriParameterSupported($request_uri_parameter_supported)
    {
        if (is_null($request_uri_parameter_supported)) {
            throw new \InvalidArgumentException('non-nullable request_uri_parameter_supported cannot be null');
        }
        $this->container['request_uri_parameter_supported'] = $request_uri_parameter_supported;

        return $this;
    }

    /**
     * Gets require_request_uri_registration
     *
     * @return bool|null
     */
    public function getRequireRequestUriRegistration()
    {
        return $this->container['require_request_uri_registration'];
    }

    /**
     * Sets require_request_uri_registration
     *
     * @param bool|null $require_request_uri_registration OpenID Connect Requires Request URI Registration Boolean value specifying whether the OP requires any request_uri values used to be  pre-registered using the request_uris registration parameter.
     *
     * @return self
     */
    public function setRequireRequestUriRegistration($require_request_uri_registration)
    {
        if (is_null($require_request_uri_registration)) {
            throw new \InvalidArgumentException('non-nullable require_request_uri_registration cannot be null');
        }
        $this->container['require_request_uri_registration'] = $require_request_uri_registration;

        return $this;
    }

    /**
     * Gets response_modes_supported
     *
     * @return string[]|null
     */
    public function getResponseModesSupported()
    {
        return $this->container['response_modes_supported'];
    }

    /**
     * Sets response_modes_supported
     *
     * @param string[]|null $response_modes_supported OAuth 2.0 Supported Response Modes JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
     *
     * @return self
     */
    public function setResponseModesSupported($response_modes_supported)
    {
        if (is_null($response_modes_supported)) {
            throw new \InvalidArgumentException('non-nullable response_modes_supported cannot be null');
        }
        $this->container['response_modes_supported'] = $response_modes_supported;

        return $this;
    }

    /**
     * Gets response_types_supported
     *
     * @return string[]
     */
    public function getResponseTypesSupported()
    {
        return $this->container['response_types_supported'];
    }

    /**
     * Sets response_types_supported
     *
     * @param string[] $response_types_supported OAuth 2.0 Supported Response Types JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.  Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
     *
     * @return self
     */
    public function setResponseTypesSupported($response_types_supported)
    {
        if (is_null($response_types_supported)) {
            throw new \InvalidArgumentException('non-nullable response_types_supported cannot be null');
        }
        $this->container['response_types_supported'] = $response_types_supported;

        return $this;
    }

    /**
     * Gets revocation_endpoint
     *
     * @return string|null
     */
    public function getRevocationEndpoint()
    {
        return $this->container['revocation_endpoint'];
    }

    /**
     * Sets revocation_endpoint
     *
     * @param string|null $revocation_endpoint OAuth 2.0 Token Revocation URL URL of the authorization server's OAuth 2.0 revocation endpoint.
     *
     * @return self
     */
    public function setRevocationEndpoint($revocation_endpoint)
    {
        if (is_null($revocation_endpoint)) {
            throw new \InvalidArgumentException('non-nullable revocation_endpoint cannot be null');
        }
        $this->container['revocation_endpoint'] = $revocation_endpoint;

        return $this;
    }

    /**
     * Gets scopes_supported
     *
     * @return string[]|null
     */
    public function getScopesSupported()
    {
        return $this->container['scopes_supported'];
    }

    /**
     * Sets scopes_supported
     *
     * @param string[]|null $scopes_supported OAuth 2.0 Supported Scope Values JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports.  The server MUST support the openid scope value. Servers MAY choose not to advertise  some supported scope values even when this parameter is used
     *
     * @return self
     */
    public function setScopesSupported($scopes_supported)
    {
        if (is_null($scopes_supported)) {
            throw new \InvalidArgumentException('non-nullable scopes_supported cannot be null');
        }
        $this->container['scopes_supported'] = $scopes_supported;

        return $this;
    }

    /**
     * Gets subject_types_supported
     *
     * @return string[]
     */
    public function getSubjectTypesSupported()
    {
        return $this->container['subject_types_supported'];
    }

    /**
     * Sets subject_types_supported
     *
     * @param string[] $subject_types_supported OpenID Connect Supported Subject Types JSON array containing a list of the Subject Identifier types that this OP supports.  Valid types include pairwise and public.
     *
     * @return self
     */
    public function setSubjectTypesSupported($subject_types_supported)
    {
        if (is_null($subject_types_supported)) {
            throw new \InvalidArgumentException('non-nullable subject_types_supported cannot be null');
        }
        $this->container['subject_types_supported'] = $subject_types_supported;

        return $this;
    }

    /**
     * Gets token_endpoint
     *
     * @return string
     */
    public function getTokenEndpoint()
    {
        return $this->container['token_endpoint'];
    }

    /**
     * Sets token_endpoint
     *
     * @param string $token_endpoint OAuth 2.0 Token Endpoint URL
     *
     * @return self
     */
    public function setTokenEndpoint($token_endpoint)
    {
        if (is_null($token_endpoint)) {
            throw new \InvalidArgumentException('non-nullable token_endpoint cannot be null');
        }
        $this->container['token_endpoint'] = $token_endpoint;

        return $this;
    }

    /**
     * Gets token_endpoint_auth_methods_supported
     *
     * @return string[]|null
     */
    public function getTokenEndpointAuthMethodsSupported()
    {
        return $this->container['token_endpoint_auth_methods_supported'];
    }

    /**
     * Sets token_endpoint_auth_methods_supported
     *
     * @param string[]|null $token_endpoint_auth_methods_supported OAuth 2.0 Supported Client Authentication Methods JSON array containing a list of Client Authentication methods supported by this Token Endpoint.  The options are client_secret_post, client_secret_basic, client_secret_jwt,  and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
     *
     * @return self
     */
    public function setTokenEndpointAuthMethodsSupported($token_endpoint_auth_methods_supported)
    {
        if (is_null($token_endpoint_auth_methods_supported)) {
            throw new \InvalidArgumentException('non-nullable token_endpoint_auth_methods_supported cannot be null');
        }
        $this->container['token_endpoint_auth_methods_supported'] = $token_endpoint_auth_methods_supported;

        return $this;
    }

    /**
     * Gets userinfo_endpoint
     *
     * @return string|null
     */
    public function getUserinfoEndpoint()
    {
        return $this->container['userinfo_endpoint'];
    }

    /**
     * Sets userinfo_endpoint
     *
     * @param string|null $userinfo_endpoint OpenID Connect Userinfo URL URL of the OP's UserInfo Endpoint.
     *
     * @return self
     */
    public function setUserinfoEndpoint($userinfo_endpoint)
    {
        if (is_null($userinfo_endpoint)) {
            throw new \InvalidArgumentException('non-nullable userinfo_endpoint cannot be null');
        }
        $this->container['userinfo_endpoint'] = $userinfo_endpoint;

        return $this;
    }

    /**
     * Gets userinfo_signed_response_alg
     *
     * @return string[]
     */
    public function getUserinfoSignedResponseAlg()
    {
        return $this->container['userinfo_signed_response_alg'];
    }

    /**
     * Sets userinfo_signed_response_alg
     *
     * @param string[] $userinfo_signed_response_alg OpenID Connect User Userinfo Signing Algorithm Algorithm used to sign OpenID Connect Userinfo Responses.
     *
     * @return self
     */
    public function setUserinfoSignedResponseAlg($userinfo_signed_response_alg)
    {
        if (is_null($userinfo_signed_response_alg)) {
            throw new \InvalidArgumentException('non-nullable userinfo_signed_response_alg cannot be null');
        }
        $this->container['userinfo_signed_response_alg'] = $userinfo_signed_response_alg;

        return $this;
    }

    /**
     * Gets userinfo_signing_alg_values_supported
     *
     * @return string[]|null
     */
    public function getUserinfoSigningAlgValuesSupported()
    {
        return $this->container['userinfo_signing_alg_values_supported'];
    }

    /**
     * Sets userinfo_signing_alg_values_supported
     *
     * @param string[]|null $userinfo_signing_alg_values_supported OpenID Connect Supported Userinfo Signing Algorithm JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA]  supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
     *
     * @return self
     */
    public function setUserinfoSigningAlgValuesSupported($userinfo_signing_alg_values_supported)
    {
        if (is_null($userinfo_signing_alg_values_supported)) {
            throw new \InvalidArgumentException('non-nullable userinfo_signing_alg_values_supported cannot be null');
        }
        $this->container['userinfo_signing_alg_values_supported'] = $userinfo_signing_alg_values_supported;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


