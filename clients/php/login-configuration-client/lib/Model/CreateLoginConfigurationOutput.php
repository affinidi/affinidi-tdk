<?php
/**
 * CreateLoginConfigurationOutput
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\LoginConfiguration
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\LoginConfiguration\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\LoginConfiguration\ObjectSerializer;

/**
 * CreateLoginConfigurationOutput Class Doc Comment
 *
 * @category Class
 * @package  AffinidiTdk\Clients\LoginConfiguration
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateLoginConfigurationOutput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateLoginConfigurationOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ari' => 'string',
        'project_id' => 'string',
        'configuration_id' => 'string',
        'name' => 'string',
        'auth' => '\AffinidiTdk\Clients\LoginConfiguration\Model\CreateLoginConfigurationOutputAuth',
        'redirect_uris' => 'string[]',
        'client_metadata' => '\AffinidiTdk\Clients\LoginConfiguration\Model\LoginConfigurationClientMetadataOutput',
        'creation_date' => 'string',
        'post_logout_redirect_uris' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ari' => null,
        'project_id' => null,
        'configuration_id' => null,
        'name' => null,
        'auth' => null,
        'redirect_uris' => null,
        'client_metadata' => null,
        'creation_date' => null,
        'post_logout_redirect_uris' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ari' => false,
        'project_id' => false,
        'configuration_id' => false,
        'name' => false,
        'auth' => false,
        'redirect_uris' => false,
        'client_metadata' => false,
        'creation_date' => false,
        'post_logout_redirect_uris' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ari' => 'ari',
        'project_id' => 'projectId',
        'configuration_id' => 'configurationId',
        'name' => 'name',
        'auth' => 'auth',
        'redirect_uris' => 'redirectUris',
        'client_metadata' => 'clientMetadata',
        'creation_date' => 'creationDate',
        'post_logout_redirect_uris' => 'postLogoutRedirectUris'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ari' => 'setAri',
        'project_id' => 'setProjectId',
        'configuration_id' => 'setConfigurationId',
        'name' => 'setName',
        'auth' => 'setAuth',
        'redirect_uris' => 'setRedirectUris',
        'client_metadata' => 'setClientMetadata',
        'creation_date' => 'setCreationDate',
        'post_logout_redirect_uris' => 'setPostLogoutRedirectUris'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ari' => 'getAri',
        'project_id' => 'getProjectId',
        'configuration_id' => 'getConfigurationId',
        'name' => 'getName',
        'auth' => 'getAuth',
        'redirect_uris' => 'getRedirectUris',
        'client_metadata' => 'getClientMetadata',
        'creation_date' => 'getCreationDate',
        'post_logout_redirect_uris' => 'getPostLogoutRedirectUris'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ari', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('configuration_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('auth', $data ?? [], null);
        $this->setIfExists('redirect_uris', $data ?? [], null);
        $this->setIfExists('client_metadata', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('post_logout_redirect_uris', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ari'] === null) {
            $invalidProperties[] = "'ari' can't be null";
        }
        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['auth'] === null) {
            $invalidProperties[] = "'auth' can't be null";
        }
        if ($this->container['redirect_uris'] === null) {
            $invalidProperties[] = "'redirect_uris' can't be null";
        }
        if ($this->container['client_metadata'] === null) {
            $invalidProperties[] = "'client_metadata' can't be null";
        }
        if ($this->container['creation_date'] === null) {
            $invalidProperties[] = "'creation_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ari
     *
     * @return string
     */
    public function getAri()
    {
        return $this->container['ari'];
    }

    /**
     * Sets ari
     *
     * @param string $ari Configuration ari
     *
     * @return self
     */
    public function setAri($ari)
    {
        if (is_null($ari)) {
            throw new \InvalidArgumentException('non-nullable ari cannot be null');
        }
        $this->container['ari'] = $ari;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id Project id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets configuration_id
     *
     * @return string|null
     */
    public function getConfigurationId()
    {
        return $this->container['configuration_id'];
    }

    /**
     * Sets configuration_id
     *
     * @param string|null $configuration_id Configuration id
     *
     * @return self
     */
    public function setConfigurationId($configuration_id)
    {
        if (is_null($configuration_id)) {
            throw new \InvalidArgumentException('non-nullable configuration_id cannot be null');
        }
        $this->container['configuration_id'] = $configuration_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name User defined login configuration name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return \AffinidiTdk\Clients\LoginConfiguration\Model\CreateLoginConfigurationOutputAuth
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \AffinidiTdk\Clients\LoginConfiguration\Model\CreateLoginConfigurationOutputAuth $auth auth
     *
     * @return self
     */
    public function setAuth($auth)
    {
        if (is_null($auth)) {
            throw new \InvalidArgumentException('non-nullable auth cannot be null');
        }
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets redirect_uris
     *
     * @return string[]
     */
    public function getRedirectUris()
    {
        return $this->container['redirect_uris'];
    }

    /**
     * Sets redirect_uris
     *
     * @param string[] $redirect_uris OAuth 2.0 Redirect URIs
     *
     * @return self
     */
    public function setRedirectUris($redirect_uris)
    {
        if (is_null($redirect_uris)) {
            throw new \InvalidArgumentException('non-nullable redirect_uris cannot be null');
        }
        $this->container['redirect_uris'] = $redirect_uris;

        return $this;
    }

    /**
     * Gets client_metadata
     *
     * @return \AffinidiTdk\Clients\LoginConfiguration\Model\LoginConfigurationClientMetadataOutput
     */
    public function getClientMetadata()
    {
        return $this->container['client_metadata'];
    }

    /**
     * Sets client_metadata
     *
     * @param \AffinidiTdk\Clients\LoginConfiguration\Model\LoginConfigurationClientMetadataOutput $client_metadata client_metadata
     *
     * @return self
     */
    public function setClientMetadata($client_metadata)
    {
        if (is_null($client_metadata)) {
            throw new \InvalidArgumentException('non-nullable client_metadata cannot be null');
        }
        $this->container['client_metadata'] = $client_metadata;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string $creation_date OAuth 2.0 Client Creation Date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets post_logout_redirect_uris
     *
     * @return string[]|null
     */
    public function getPostLogoutRedirectUris()
    {
        return $this->container['post_logout_redirect_uris'];
    }

    /**
     * Sets post_logout_redirect_uris
     *
     * @param string[]|null $post_logout_redirect_uris Post Logout Redirect URIs, Used to redirect the user's browser to a specified URL after the logout process is complete. Must match the domain, port, scheme of at least one of the registered redirect URIs
     *
     * @return self
     */
    public function setPostLogoutRedirectUris($post_logout_redirect_uris)
    {
        if (is_null($post_logout_redirect_uris)) {
            throw new \InvalidArgumentException('non-nullable post_logout_redirect_uris cannot be null');
        }
        $this->container['post_logout_redirect_uris'] = $post_logout_redirect_uris;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


