<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\Iam
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Iam
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\Iam\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AffinidiTdk\Clients\Iam\ApiException;
use AffinidiTdk\Clients\Iam\Configuration;
use AffinidiTdk\Clients\Iam\HeaderSelector;
use AffinidiTdk\Clients\Iam\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  AffinidiTdk\Clients\Iam
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1AuthProxyDelete' => [
            'application/json',
        ],
        'v1AuthProxyGet' => [
            'application/json',
        ],
        'v1AuthProxyPatch' => [
            'application/json',
        ],
        'v1AuthProxyPost' => [
            'application/json',
        ],
        'v1AuthProxyPut' => [
            'application/json',
        ],
        'v1IdpProxyDelete' => [
            'application/json',
        ],
        'v1IdpProxyGet' => [
            'application/json',
        ],
        'v1IdpProxyPatch' => [
            'application/json',
        ],
        'v1IdpProxyPost' => [
            'application/json',
        ],
        'v1IdpProxyPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1AuthProxyDelete
     *
     * @param  string $proxy proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyDelete'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1AuthProxyDelete($proxy, string $contentType = self::contentTypes['v1AuthProxyDelete'][0])
    {
        $this->v1AuthProxyDeleteWithHttpInfo($proxy, $contentType);
    }

    /**
     * Operation v1AuthProxyDeleteWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyDelete'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AuthProxyDeleteWithHttpInfo($proxy, string $contentType = self::contentTypes['v1AuthProxyDelete'][0])
    {
        $request = $this->v1AuthProxyDeleteRequest($proxy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1AuthProxyDeleteAsync
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AuthProxyDeleteAsync($proxy, string $contentType = self::contentTypes['v1AuthProxyDelete'][0])
    {
        return $this->v1AuthProxyDeleteAsyncWithHttpInfo($proxy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AuthProxyDeleteAsyncWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AuthProxyDeleteAsyncWithHttpInfo($proxy, string $contentType = self::contentTypes['v1AuthProxyDelete'][0])
    {
        $returnType = '';
        $request = $this->v1AuthProxyDeleteRequest($proxy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AuthProxyDelete'
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AuthProxyDeleteRequest($proxy, string $contentType = self::contentTypes['v1AuthProxyDelete'][0])
    {

        // verify the required parameter 'proxy' is set
        if ($proxy === null || (is_array($proxy) && count($proxy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy when calling v1AuthProxyDelete'
            );
        }


        $resourcePath = '/v1/auth/{proxy+}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proxy !== null) {
            $resourcePath = str_replace(
                '{' . 'proxy' . '}',
                ObjectSerializer::toPathValue($proxy),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AuthProxyGet
     *
     * @param  string $proxy proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyGet'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1AuthProxyGet($proxy, string $contentType = self::contentTypes['v1AuthProxyGet'][0])
    {
        $this->v1AuthProxyGetWithHttpInfo($proxy, $contentType);
    }

    /**
     * Operation v1AuthProxyGetWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyGet'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AuthProxyGetWithHttpInfo($proxy, string $contentType = self::contentTypes['v1AuthProxyGet'][0])
    {
        $request = $this->v1AuthProxyGetRequest($proxy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1AuthProxyGetAsync
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AuthProxyGetAsync($proxy, string $contentType = self::contentTypes['v1AuthProxyGet'][0])
    {
        return $this->v1AuthProxyGetAsyncWithHttpInfo($proxy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AuthProxyGetAsyncWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AuthProxyGetAsyncWithHttpInfo($proxy, string $contentType = self::contentTypes['v1AuthProxyGet'][0])
    {
        $returnType = '';
        $request = $this->v1AuthProxyGetRequest($proxy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AuthProxyGet'
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AuthProxyGetRequest($proxy, string $contentType = self::contentTypes['v1AuthProxyGet'][0])
    {

        // verify the required parameter 'proxy' is set
        if ($proxy === null || (is_array($proxy) && count($proxy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy when calling v1AuthProxyGet'
            );
        }


        $resourcePath = '/v1/auth/{proxy+}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proxy !== null) {
            $resourcePath = str_replace(
                '{' . 'proxy' . '}',
                ObjectSerializer::toPathValue($proxy),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AuthProxyPatch
     *
     * @param  string $proxy proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPatch'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1AuthProxyPatch($proxy, string $contentType = self::contentTypes['v1AuthProxyPatch'][0])
    {
        $this->v1AuthProxyPatchWithHttpInfo($proxy, $contentType);
    }

    /**
     * Operation v1AuthProxyPatchWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPatch'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AuthProxyPatchWithHttpInfo($proxy, string $contentType = self::contentTypes['v1AuthProxyPatch'][0])
    {
        $request = $this->v1AuthProxyPatchRequest($proxy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1AuthProxyPatchAsync
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AuthProxyPatchAsync($proxy, string $contentType = self::contentTypes['v1AuthProxyPatch'][0])
    {
        return $this->v1AuthProxyPatchAsyncWithHttpInfo($proxy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AuthProxyPatchAsyncWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AuthProxyPatchAsyncWithHttpInfo($proxy, string $contentType = self::contentTypes['v1AuthProxyPatch'][0])
    {
        $returnType = '';
        $request = $this->v1AuthProxyPatchRequest($proxy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AuthProxyPatch'
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AuthProxyPatchRequest($proxy, string $contentType = self::contentTypes['v1AuthProxyPatch'][0])
    {

        // verify the required parameter 'proxy' is set
        if ($proxy === null || (is_array($proxy) && count($proxy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy when calling v1AuthProxyPatch'
            );
        }


        $resourcePath = '/v1/auth/{proxy+}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proxy !== null) {
            $resourcePath = str_replace(
                '{' . 'proxy' . '}',
                ObjectSerializer::toPathValue($proxy),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AuthProxyPost
     *
     * @param  string $proxy proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPost'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1AuthProxyPost($proxy, string $contentType = self::contentTypes['v1AuthProxyPost'][0])
    {
        $this->v1AuthProxyPostWithHttpInfo($proxy, $contentType);
    }

    /**
     * Operation v1AuthProxyPostWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPost'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AuthProxyPostWithHttpInfo($proxy, string $contentType = self::contentTypes['v1AuthProxyPost'][0])
    {
        $request = $this->v1AuthProxyPostRequest($proxy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1AuthProxyPostAsync
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AuthProxyPostAsync($proxy, string $contentType = self::contentTypes['v1AuthProxyPost'][0])
    {
        return $this->v1AuthProxyPostAsyncWithHttpInfo($proxy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AuthProxyPostAsyncWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AuthProxyPostAsyncWithHttpInfo($proxy, string $contentType = self::contentTypes['v1AuthProxyPost'][0])
    {
        $returnType = '';
        $request = $this->v1AuthProxyPostRequest($proxy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AuthProxyPost'
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AuthProxyPostRequest($proxy, string $contentType = self::contentTypes['v1AuthProxyPost'][0])
    {

        // verify the required parameter 'proxy' is set
        if ($proxy === null || (is_array($proxy) && count($proxy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy when calling v1AuthProxyPost'
            );
        }


        $resourcePath = '/v1/auth/{proxy+}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proxy !== null) {
            $resourcePath = str_replace(
                '{' . 'proxy' . '}',
                ObjectSerializer::toPathValue($proxy),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AuthProxyPut
     *
     * @param  string $proxy proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPut'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1AuthProxyPut($proxy, string $contentType = self::contentTypes['v1AuthProxyPut'][0])
    {
        $this->v1AuthProxyPutWithHttpInfo($proxy, $contentType);
    }

    /**
     * Operation v1AuthProxyPutWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPut'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AuthProxyPutWithHttpInfo($proxy, string $contentType = self::contentTypes['v1AuthProxyPut'][0])
    {
        $request = $this->v1AuthProxyPutRequest($proxy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1AuthProxyPutAsync
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AuthProxyPutAsync($proxy, string $contentType = self::contentTypes['v1AuthProxyPut'][0])
    {
        return $this->v1AuthProxyPutAsyncWithHttpInfo($proxy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AuthProxyPutAsyncWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AuthProxyPutAsyncWithHttpInfo($proxy, string $contentType = self::contentTypes['v1AuthProxyPut'][0])
    {
        $returnType = '';
        $request = $this->v1AuthProxyPutRequest($proxy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AuthProxyPut'
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AuthProxyPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AuthProxyPutRequest($proxy, string $contentType = self::contentTypes['v1AuthProxyPut'][0])
    {

        // verify the required parameter 'proxy' is set
        if ($proxy === null || (is_array($proxy) && count($proxy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy when calling v1AuthProxyPut'
            );
        }


        $resourcePath = '/v1/auth/{proxy+}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proxy !== null) {
            $resourcePath = str_replace(
                '{' . 'proxy' . '}',
                ObjectSerializer::toPathValue($proxy),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1IdpProxyDelete
     *
     * @param  string $proxy proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyDelete'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1IdpProxyDelete($proxy, string $contentType = self::contentTypes['v1IdpProxyDelete'][0])
    {
        $this->v1IdpProxyDeleteWithHttpInfo($proxy, $contentType);
    }

    /**
     * Operation v1IdpProxyDeleteWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyDelete'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1IdpProxyDeleteWithHttpInfo($proxy, string $contentType = self::contentTypes['v1IdpProxyDelete'][0])
    {
        $request = $this->v1IdpProxyDeleteRequest($proxy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1IdpProxyDeleteAsync
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1IdpProxyDeleteAsync($proxy, string $contentType = self::contentTypes['v1IdpProxyDelete'][0])
    {
        return $this->v1IdpProxyDeleteAsyncWithHttpInfo($proxy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1IdpProxyDeleteAsyncWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1IdpProxyDeleteAsyncWithHttpInfo($proxy, string $contentType = self::contentTypes['v1IdpProxyDelete'][0])
    {
        $returnType = '';
        $request = $this->v1IdpProxyDeleteRequest($proxy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1IdpProxyDelete'
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1IdpProxyDeleteRequest($proxy, string $contentType = self::contentTypes['v1IdpProxyDelete'][0])
    {

        // verify the required parameter 'proxy' is set
        if ($proxy === null || (is_array($proxy) && count($proxy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy when calling v1IdpProxyDelete'
            );
        }


        $resourcePath = '/v1/idp/{proxy+}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proxy !== null) {
            $resourcePath = str_replace(
                '{' . 'proxy' . '}',
                ObjectSerializer::toPathValue($proxy),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1IdpProxyGet
     *
     * @param  string $proxy proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyGet'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1IdpProxyGet($proxy, string $contentType = self::contentTypes['v1IdpProxyGet'][0])
    {
        $this->v1IdpProxyGetWithHttpInfo($proxy, $contentType);
    }

    /**
     * Operation v1IdpProxyGetWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyGet'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1IdpProxyGetWithHttpInfo($proxy, string $contentType = self::contentTypes['v1IdpProxyGet'][0])
    {
        $request = $this->v1IdpProxyGetRequest($proxy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1IdpProxyGetAsync
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1IdpProxyGetAsync($proxy, string $contentType = self::contentTypes['v1IdpProxyGet'][0])
    {
        return $this->v1IdpProxyGetAsyncWithHttpInfo($proxy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1IdpProxyGetAsyncWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1IdpProxyGetAsyncWithHttpInfo($proxy, string $contentType = self::contentTypes['v1IdpProxyGet'][0])
    {
        $returnType = '';
        $request = $this->v1IdpProxyGetRequest($proxy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1IdpProxyGet'
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1IdpProxyGetRequest($proxy, string $contentType = self::contentTypes['v1IdpProxyGet'][0])
    {

        // verify the required parameter 'proxy' is set
        if ($proxy === null || (is_array($proxy) && count($proxy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy when calling v1IdpProxyGet'
            );
        }


        $resourcePath = '/v1/idp/{proxy+}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proxy !== null) {
            $resourcePath = str_replace(
                '{' . 'proxy' . '}',
                ObjectSerializer::toPathValue($proxy),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1IdpProxyPatch
     *
     * @param  string $proxy proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPatch'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1IdpProxyPatch($proxy, string $contentType = self::contentTypes['v1IdpProxyPatch'][0])
    {
        $this->v1IdpProxyPatchWithHttpInfo($proxy, $contentType);
    }

    /**
     * Operation v1IdpProxyPatchWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPatch'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1IdpProxyPatchWithHttpInfo($proxy, string $contentType = self::contentTypes['v1IdpProxyPatch'][0])
    {
        $request = $this->v1IdpProxyPatchRequest($proxy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1IdpProxyPatchAsync
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1IdpProxyPatchAsync($proxy, string $contentType = self::contentTypes['v1IdpProxyPatch'][0])
    {
        return $this->v1IdpProxyPatchAsyncWithHttpInfo($proxy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1IdpProxyPatchAsyncWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1IdpProxyPatchAsyncWithHttpInfo($proxy, string $contentType = self::contentTypes['v1IdpProxyPatch'][0])
    {
        $returnType = '';
        $request = $this->v1IdpProxyPatchRequest($proxy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1IdpProxyPatch'
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1IdpProxyPatchRequest($proxy, string $contentType = self::contentTypes['v1IdpProxyPatch'][0])
    {

        // verify the required parameter 'proxy' is set
        if ($proxy === null || (is_array($proxy) && count($proxy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy when calling v1IdpProxyPatch'
            );
        }


        $resourcePath = '/v1/idp/{proxy+}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proxy !== null) {
            $resourcePath = str_replace(
                '{' . 'proxy' . '}',
                ObjectSerializer::toPathValue($proxy),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1IdpProxyPost
     *
     * @param  string $proxy proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPost'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1IdpProxyPost($proxy, string $contentType = self::contentTypes['v1IdpProxyPost'][0])
    {
        $this->v1IdpProxyPostWithHttpInfo($proxy, $contentType);
    }

    /**
     * Operation v1IdpProxyPostWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPost'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1IdpProxyPostWithHttpInfo($proxy, string $contentType = self::contentTypes['v1IdpProxyPost'][0])
    {
        $request = $this->v1IdpProxyPostRequest($proxy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1IdpProxyPostAsync
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1IdpProxyPostAsync($proxy, string $contentType = self::contentTypes['v1IdpProxyPost'][0])
    {
        return $this->v1IdpProxyPostAsyncWithHttpInfo($proxy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1IdpProxyPostAsyncWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1IdpProxyPostAsyncWithHttpInfo($proxy, string $contentType = self::contentTypes['v1IdpProxyPost'][0])
    {
        $returnType = '';
        $request = $this->v1IdpProxyPostRequest($proxy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1IdpProxyPost'
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1IdpProxyPostRequest($proxy, string $contentType = self::contentTypes['v1IdpProxyPost'][0])
    {

        // verify the required parameter 'proxy' is set
        if ($proxy === null || (is_array($proxy) && count($proxy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy when calling v1IdpProxyPost'
            );
        }


        $resourcePath = '/v1/idp/{proxy+}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proxy !== null) {
            $resourcePath = str_replace(
                '{' . 'proxy' . '}',
                ObjectSerializer::toPathValue($proxy),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1IdpProxyPut
     *
     * @param  string $proxy proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPut'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1IdpProxyPut($proxy, string $contentType = self::contentTypes['v1IdpProxyPut'][0])
    {
        $this->v1IdpProxyPutWithHttpInfo($proxy, $contentType);
    }

    /**
     * Operation v1IdpProxyPutWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPut'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\Iam\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1IdpProxyPutWithHttpInfo($proxy, string $contentType = self::contentTypes['v1IdpProxyPut'][0])
    {
        $request = $this->v1IdpProxyPutRequest($proxy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1IdpProxyPutAsync
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1IdpProxyPutAsync($proxy, string $contentType = self::contentTypes['v1IdpProxyPut'][0])
    {
        return $this->v1IdpProxyPutAsyncWithHttpInfo($proxy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1IdpProxyPutAsyncWithHttpInfo
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1IdpProxyPutAsyncWithHttpInfo($proxy, string $contentType = self::contentTypes['v1IdpProxyPut'][0])
    {
        $returnType = '';
        $request = $this->v1IdpProxyPutRequest($proxy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1IdpProxyPut'
     *
     * @param  string $proxy (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1IdpProxyPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1IdpProxyPutRequest($proxy, string $contentType = self::contentTypes['v1IdpProxyPut'][0])
    {

        // verify the required parameter 'proxy' is set
        if ($proxy === null || (is_array($proxy) && count($proxy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy when calling v1IdpProxyPut'
            );
        }


        $resourcePath = '/v1/idp/{proxy+}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proxy !== null) {
            $resourcePath = str_replace(
                '{' . 'proxy' . '}',
                ObjectSerializer::toPathValue($proxy),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
