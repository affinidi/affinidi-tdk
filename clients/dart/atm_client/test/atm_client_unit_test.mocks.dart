// Mocks generated by Mockito 5.4.6 from annotations
// in atm_client/test/atm_client_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i8;

import 'package:atm_client/atm_client.dart' as _i7;
import 'package:atm_client/src/common/atm_mediator_client.dart' as _i5;
import 'package:mediator_client/mediator_client.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:ssi/ssi.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDidDocument_0 extends _i1.SmartFake implements _i2.DidDocument {
  _FakeDidDocument_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeyPair_1 extends _i1.SmartFake implements _i2.KeyPair {
  _FakeKeyPair_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDidSigner_2 extends _i1.SmartFake implements _i2.DidSigner {
  _FakeDidSigner_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForwardMessageOptions_3 extends _i1.SmartFake
    implements _i3.ForwardMessageOptions {
  _FakeForwardMessageOptions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebSocketOptions_4 extends _i1.SmartFake
    implements _i3.WebSocketOptions {
  _FakeWebSocketOptions_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlainTextMessage_5 extends _i1.SmartFake
    implements _i3.PlainTextMessage {
  _FakePlainTextMessage_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDidcommMessage_6 extends _i1.SmartFake
    implements _i3.DidcommMessage {
  _FakeDidcommMessage_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_7<T> extends _i1.SmartFake
    implements _i4.StreamSubscription<T> {
  _FakeStreamSubscription_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePublicKey_8 extends _i1.SmartFake implements _i2.PublicKey {
  _FakePublicKey_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AtmMediatorClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockAtmMediatorClient extends _i1.Mock implements _i5.AtmMediatorClient {
  MockAtmMediatorClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DidDocument get mediatorDidDocument => (super.noSuchMethod(
        Invocation.getter(#mediatorDidDocument),
        returnValue: _FakeDidDocument_0(
          this,
          Invocation.getter(#mediatorDidDocument),
        ),
      ) as _i2.DidDocument);

  @override
  _i2.KeyPair get keyPair => (super.noSuchMethod(
        Invocation.getter(#keyPair),
        returnValue: _FakeKeyPair_1(
          this,
          Invocation.getter(#keyPair),
        ),
      ) as _i2.KeyPair);

  @override
  String get didKeyId => (super.noSuchMethod(
        Invocation.getter(#didKeyId),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#didKeyId),
        ),
      ) as String);

  @override
  _i2.DidSigner get signer => (super.noSuchMethod(
        Invocation.getter(#signer),
        returnValue: _FakeDidSigner_2(
          this,
          Invocation.getter(#signer),
        ),
      ) as _i2.DidSigner);

  @override
  _i3.ForwardMessageOptions get forwardMessageOptions => (super.noSuchMethod(
        Invocation.getter(#forwardMessageOptions),
        returnValue: _FakeForwardMessageOptions_3(
          this,
          Invocation.getter(#forwardMessageOptions),
        ),
      ) as _i3.ForwardMessageOptions);

  @override
  _i3.WebSocketOptions get webSocketOptions => (super.noSuchMethod(
        Invocation.getter(#webSocketOptions),
        returnValue: _FakeWebSocketOptions_4(
          this,
          Invocation.getter(#webSocketOptions),
        ),
      ) as _i3.WebSocketOptions);

  @override
  _i4.Future<_i3.PlainTextMessage> waitForMessage({
    required String? messageType,
    required String? accessToken,
    required _i2.DidManager? didManager,
    required _i2.DidDocument? atmServiceDidDocument,
    required _i7.ClientOptions? clientOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #waitForMessage,
          [],
          {
            #messageType: messageType,
            #accessToken: accessToken,
            #didManager: didManager,
            #atmServiceDidDocument: atmServiceDidDocument,
            #clientOptions: clientOptions,
          },
        ),
        returnValue:
            _i4.Future<_i3.PlainTextMessage>.value(_FakePlainTextMessage_5(
          this,
          Invocation.method(
            #waitForMessage,
            [],
            {
              #messageType: messageType,
              #accessToken: accessToken,
              #didManager: didManager,
              #atmServiceDidDocument: atmServiceDidDocument,
              #clientOptions: clientOptions,
            },
          ),
        )),
      ) as _i4.Future<_i3.PlainTextMessage>);

  @override
  _i4.Future<_i3.DidcommMessage> sendMessage(
    _i3.ForwardMessage? message, {
    String? accessToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
          {#accessToken: accessToken},
        ),
        returnValue: _i4.Future<_i3.DidcommMessage>.value(_FakeDidcommMessage_6(
          this,
          Invocation.method(
            #sendMessage,
            [message],
            {#accessToken: accessToken},
          ),
        )),
      ) as _i4.Future<_i3.DidcommMessage>);

  @override
  _i4.Future<List<String>> listInboxMessageIds({String? accessToken}) =>
      (super.noSuchMethod(
        Invocation.method(
          #listInboxMessageIds,
          [],
          {#accessToken: accessToken},
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> receiveMessages({
    required List<String>? messageIds,
    bool? deleteOnMediator = true,
    String? accessToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #receiveMessages,
          [],
          {
            #messageIds: messageIds,
            #deleteOnMediator: deleteOnMediator,
            #accessToken: accessToken,
          },
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<_i4.StreamSubscription<dynamic>> listenForIncomingMessages(
    void Function(Map<String, dynamic>)? onMessage, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
    String? accessToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenForIncomingMessages,
          [onMessage],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
            #accessToken: accessToken,
          },
        ),
        returnValue: _i4.Future<_i4.StreamSubscription<dynamic>>.value(
            _FakeStreamSubscription_7<dynamic>(
          this,
          Invocation.method(
            #listenForIncomingMessages,
            [onMessage],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
              #accessToken: accessToken,
            },
          ),
        )),
      ) as _i4.Future<_i4.StreamSubscription<dynamic>>);

  @override
  _i4.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i3.DidcommMessage> packMessage(
    _i3.PlainTextMessage? message, {
    required _i3.MessageOptions? messageOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #packMessage,
          [message],
          {#messageOptions: messageOptions},
        ),
        returnValue: _i4.Future<_i3.DidcommMessage>.value(_FakeDidcommMessage_6(
          this,
          Invocation.method(
            #packMessage,
            [message],
            {#messageOptions: messageOptions},
          ),
        )),
      ) as _i4.Future<_i3.DidcommMessage>);
}

/// A class which mocks [KeyPair].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyPair extends _i1.Mock implements _i2.KeyPair {
  MockKeyPair() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  List<_i2.SignatureScheme> get supportedSignatureSchemes =>
      (super.noSuchMethod(
        Invocation.getter(#supportedSignatureSchemes),
        returnValue: <_i2.SignatureScheme>[],
      ) as List<_i2.SignatureScheme>);

  @override
  _i2.SignatureScheme get defaultSignatureScheme => (super.noSuchMethod(
        Invocation.getter(#defaultSignatureScheme),
        returnValue: _i2.SignatureScheme.ecdsa_secp256k1_sha256,
      ) as _i2.SignatureScheme);

  @override
  _i2.PublicKey get publicKey => (super.noSuchMethod(
        Invocation.getter(#publicKey),
        returnValue: _FakePublicKey_8(
          this,
          Invocation.getter(#publicKey),
        ),
      ) as _i2.PublicKey);

  @override
  _i4.Future<_i8.Uint8List> internalSign(
    _i8.Uint8List? data,
    _i2.SignatureScheme? signatureScheme,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #internalSign,
          [
            data,
            signatureScheme,
          ],
        ),
        returnValue: _i4.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i4.Future<_i8.Uint8List>);

  @override
  _i4.Future<_i8.Uint8List> sign(
    _i8.Uint8List? data, {
    _i2.SignatureScheme? signatureScheme,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sign,
          [data],
          {#signatureScheme: signatureScheme},
        ),
        returnValue: _i4.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i4.Future<_i8.Uint8List>);

  @override
  _i4.Future<bool> internalVerify(
    _i8.Uint8List? data,
    _i8.Uint8List? signature,
    _i2.SignatureScheme? signatureScheme,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #internalVerify,
          [
            data,
            signature,
            signatureScheme,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> verify(
    _i8.Uint8List? data,
    _i8.Uint8List? signature, {
    _i2.SignatureScheme? signatureScheme,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verify,
          [
            data,
            signature,
          ],
          {#signatureScheme: signatureScheme},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i8.Uint8List> encrypt(
    _i8.Uint8List? data, {
    _i8.Uint8List? publicKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #encrypt,
          [data],
          {#publicKey: publicKey},
        ),
        returnValue: _i4.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i4.Future<_i8.Uint8List>);

  @override
  _i4.Future<_i8.Uint8List> decrypt(
    _i8.Uint8List? data, {
    _i8.Uint8List? publicKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #decrypt,
          [data],
          {#publicKey: publicKey},
        ),
        returnValue: _i4.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i4.Future<_i8.Uint8List>);

  @override
  _i4.Future<_i8.Uint8List> computeEcdhSecret(_i8.Uint8List? publicKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #computeEcdhSecret,
          [publicKey],
        ),
        returnValue: _i4.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i4.Future<_i8.Uint8List>);
}

/// A class which mocks [DidSigner].
///
/// See the documentation for Mockito's code generation for more information.
class MockDidSigner extends _i1.Mock implements _i2.DidSigner {
  MockDidSigner() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SignatureScheme get signatureScheme => (super.noSuchMethod(
        Invocation.getter(#signatureScheme),
        returnValue: _i2.SignatureScheme.ecdsa_secp256k1_sha256,
      ) as _i2.SignatureScheme);

  @override
  String get did => (super.noSuchMethod(
        Invocation.getter(#did),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#did),
        ),
      ) as String);

  @override
  String get keyId => (super.noSuchMethod(
        Invocation.getter(#keyId),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#keyId),
        ),
      ) as String);

  @override
  String get didKeyId => (super.noSuchMethod(
        Invocation.getter(#didKeyId),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#didKeyId),
        ),
      ) as String);

  @override
  _i4.Future<_i8.Uint8List> sign(_i8.Uint8List? data) => (super.noSuchMethod(
        Invocation.method(
          #sign,
          [data],
        ),
        returnValue: _i4.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i4.Future<_i8.Uint8List>);
}

/// A class which mocks [PersistentWallet].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistentWallet extends _i1.Mock implements _i2.PersistentWallet {
  MockPersistentWallet() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> hasKey(String? keyId) => (super.noSuchMethod(
        Invocation.method(
          #hasKey,
          [keyId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.SignatureScheme>> getSupportedSignatureSchemes(
          String? keyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSupportedSignatureSchemes,
          [keyId],
        ),
        returnValue: _i4.Future<List<_i2.SignatureScheme>>.value(
            <_i2.SignatureScheme>[]),
      ) as _i4.Future<List<_i2.SignatureScheme>>);

  @override
  _i4.Future<_i8.Uint8List> sign(
    _i8.Uint8List? data, {
    required String? keyId,
    _i2.SignatureScheme? signatureScheme,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sign,
          [data],
          {
            #keyId: keyId,
            #signatureScheme: signatureScheme,
          },
        ),
        returnValue: _i4.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i4.Future<_i8.Uint8List>);

  @override
  _i4.Future<bool> verify(
    _i8.Uint8List? data, {
    required _i8.Uint8List? signature,
    required String? keyId,
    _i2.SignatureScheme? signatureScheme,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verify,
          [data],
          {
            #signature: signature,
            #keyId: keyId,
            #signatureScheme: signatureScheme,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.KeyPair> generateKey({
    String? keyId,
    _i2.KeyType? keyType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateKey,
          [],
          {
            #keyId: keyId,
            #keyType: keyType,
          },
        ),
        returnValue: _i4.Future<_i2.KeyPair>.value(_FakeKeyPair_1(
          this,
          Invocation.method(
            #generateKey,
            [],
            {
              #keyId: keyId,
              #keyType: keyType,
            },
          ),
        )),
      ) as _i4.Future<_i2.KeyPair>);

  @override
  _i4.Future<_i2.PublicKey> getPublicKey(String? keyId) => (super.noSuchMethod(
        Invocation.method(
          #getPublicKey,
          [keyId],
        ),
        returnValue: _i4.Future<_i2.PublicKey>.value(_FakePublicKey_8(
          this,
          Invocation.method(
            #getPublicKey,
            [keyId],
          ),
        )),
      ) as _i4.Future<_i2.PublicKey>);

  @override
  _i4.Future<_i2.PublicKey> getX25519PublicKey(String? keyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getX25519PublicKey,
          [keyId],
        ),
        returnValue: _i4.Future<_i2.PublicKey>.value(_FakePublicKey_8(
          this,
          Invocation.method(
            #getX25519PublicKey,
            [keyId],
          ),
        )),
      ) as _i4.Future<_i2.PublicKey>);

  @override
  _i4.Future<_i8.Uint8List> encrypt(
    _i8.Uint8List? data, {
    required String? keyId,
    _i8.Uint8List? publicKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #encrypt,
          [data],
          {
            #keyId: keyId,
            #publicKey: publicKey,
          },
        ),
        returnValue: _i4.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i4.Future<_i8.Uint8List>);

  @override
  _i4.Future<_i8.Uint8List> decrypt(
    _i8.Uint8List? data, {
    required String? keyId,
    _i8.Uint8List? publicKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #decrypt,
          [data],
          {
            #keyId: keyId,
            #publicKey: publicKey,
          },
        ),
        returnValue: _i4.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i4.Future<_i8.Uint8List>);

  @override
  _i4.Future<_i2.KeyPair> getKeyPair(String? keyId) => (super.noSuchMethod(
        Invocation.method(
          #getKeyPair,
          [keyId],
        ),
        returnValue: _i4.Future<_i2.KeyPair>.value(_FakeKeyPair_1(
          this,
          Invocation.method(
            #getKeyPair,
            [keyId],
          ),
        )),
      ) as _i4.Future<_i2.KeyPair>);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PublicKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockPublicKey extends _i1.Mock implements _i2.PublicKey {
  MockPublicKey() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i2.KeyType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.KeyType.secp256k1,
      ) as _i2.KeyType);

  @override
  _i8.Uint8List get bytes => (super.noSuchMethod(
        Invocation.getter(#bytes),
        returnValue: _i8.Uint8List(0),
      ) as _i8.Uint8List);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set type(_i2.KeyType? _type) => super.noSuchMethod(
        Invocation.setter(
          #type,
          _type,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set bytes(_i8.Uint8List? _bytes) => super.noSuchMethod(
        Invocation.setter(
          #bytes,
          _bytes,
        ),
        returnValueForMissingStub: null,
      );
}
