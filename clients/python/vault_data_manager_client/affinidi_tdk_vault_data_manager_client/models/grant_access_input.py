# coding: utf-8

"""
    VaultFileSystem

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator

class GrantAccessInput(BaseModel):
    """
    GrantAccessInput
    """
    subject_did: constr(strict=True) = Field(default=..., alias="subjectDid", description="DID of the consumer to share Nodes hierarchy with")
    rights: conlist(StrictStr) = Field(default=..., description="types of access to grant")
    __properties = ["subjectDid", "rights"]

    @validator('subject_did')
    def subject_did_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^did:.*$", value):
            raise ValueError(r"must validate the regular expression /^did:.*$/")
        return value

    @validator('rights')
    def rights_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('READ', 'WRITE'):
                raise ValueError("each list item must be one of ('READ', 'WRITE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GrantAccessInput:
        """Create an instance of GrantAccessInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GrantAccessInput:
        """Create an instance of GrantAccessInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GrantAccessInput.parse_obj(obj)

        _obj = GrantAccessInput.parse_obj({
            "subject_did": obj.get("subjectDid"),
            "rights": obj.get("rights")
        })
        return _obj


