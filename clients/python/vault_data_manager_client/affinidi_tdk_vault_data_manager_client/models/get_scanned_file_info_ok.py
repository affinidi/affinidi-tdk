# coding: utf-8

"""
    VaultFileSystem

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class GetScannedFileInfoOK(BaseModel):
    """
    GetScannedFileInfoOK
    """
    data: Dict[str, Any] = Field(...)
    job_id: StrictStr = Field(default=..., alias="jobId", description="A unique, randomly generated idetifier")
    status: StrictStr = Field(default=..., description="Status of the file scanning once initiated")
    profile_id: StrictStr = Field(default=..., alias="profileId", description="A unique, randomly generated identifier")
    exclusive_start_key: Optional[StrictStr] = Field(default=None, alias="exclusiveStartKey", description="The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation.")
    node_id: StrictStr = Field(default=..., alias="nodeId", description="A unique, randomly generated identifier")
    created_at: StrictStr = Field(default=..., alias="createdAt")
    name: StrictStr = Field(...)
    __properties = ["data", "jobId", "status", "profileId", "exclusiveStartKey", "nodeId", "createdAt", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetScannedFileInfoOK:
        """Create an instance of GetScannedFileInfoOK from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetScannedFileInfoOK:
        """Create an instance of GetScannedFileInfoOK from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetScannedFileInfoOK.parse_obj(obj)

        _obj = GetScannedFileInfoOK.parse_obj({
            "data": obj.get("data"),
            "job_id": obj.get("jobId"),
            "status": obj.get("status"),
            "profile_id": obj.get("profileId"),
            "exclusive_start_key": obj.get("exclusiveStartKey"),
            "node_id": obj.get("nodeId"),
            "created_at": obj.get("createdAt"),
            "name": obj.get("name")
        })
        return _obj


