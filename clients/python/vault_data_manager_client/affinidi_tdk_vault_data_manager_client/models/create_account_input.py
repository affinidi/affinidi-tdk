# coding: utf-8

"""
    VaultFileSystem

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, constr, validator

class CreateAccountInput(BaseModel):
    """
    CreateAccountInput
    """
    account_index: StrictStr = Field(default=..., alias="accountIndex", description="number that is used for profile DID derivation")
    profile_did: constr(strict=True) = Field(default=..., alias="profileDid", description="DID that is associated with the account number")
    did_proof: StrictStr = Field(default=..., alias="didProof", description="JWT that proves ownership of profile DID by requester")
    __properties = ["accountIndex", "profileDid", "didProof"]

    @validator('profile_did')
    def profile_did_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^did:.*$", value):
            raise ValueError(r"must validate the regular expression /^did:.*$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAccountInput:
        """Create an instance of CreateAccountInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAccountInput:
        """Create an instance of CreateAccountInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAccountInput.parse_obj(obj)

        _obj = CreateAccountInput.parse_obj({
            "account_index": obj.get("accountIndex"),
            "profile_did": obj.get("profileDid"),
            "did_proof": obj.get("didProof")
        })
        return _obj


