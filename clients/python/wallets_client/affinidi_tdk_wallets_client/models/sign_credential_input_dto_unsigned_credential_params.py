# coding: utf-8

"""
    CloudWalletEssentials

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic import BaseModel, Field, StrictStr, constr, validator

class SignCredentialInputDtoUnsignedCredentialParams(BaseModel):
    """
    unsignedCredentialParams. Used to build an unsigned credential before the signing. This param is not accepted when \"unsignedCredential\" is given  # noqa: E501
    """
    json_ld_context_url: StrictStr = Field(default=..., alias="jsonLdContextUrl")
    json_schema_url: StrictStr = Field(default=..., alias="jsonSchemaUrl")
    type_name: StrictStr = Field(default=..., alias="typeName")
    credential_subject: Dict[str, Any] = Field(default=..., alias="credentialSubject")
    holder_did: constr(strict=True) = Field(default=..., alias="holderDid")
    expires_at: StrictStr = Field(default=..., alias="expiresAt")
    __properties = ["jsonLdContextUrl", "jsonSchemaUrl", "typeName", "credentialSubject", "holderDid", "expiresAt"]

    @validator('holder_did')
    def holder_did_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^did:.*$", value):
            raise ValueError(r"must validate the regular expression /^did:.*$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignCredentialInputDtoUnsignedCredentialParams:
        """Create an instance of SignCredentialInputDtoUnsignedCredentialParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignCredentialInputDtoUnsignedCredentialParams:
        """Create an instance of SignCredentialInputDtoUnsignedCredentialParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SignCredentialInputDtoUnsignedCredentialParams.parse_obj(obj)

        _obj = SignCredentialInputDtoUnsignedCredentialParams.parse_obj({
            "json_ld_context_url": obj.get("jsonLdContextUrl"),
            "json_schema_url": obj.get("jsonSchemaUrl"),
            "type_name": obj.get("typeName"),
            "credential_subject": obj.get("credentialSubject"),
            "holder_did": obj.get("holderDid"),
            "expires_at": obj.get("expiresAt")
        })
        return _obj


