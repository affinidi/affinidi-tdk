# coding: utf-8

"""
    CloudWalletEssentials

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class SignCredentialsDm2SdJwtInputDto(BaseModel):
    """
    DTO contains params to sign credential  # noqa: E501
    """
    unsigned_credential: Dict[str, Any] = Field(default=..., alias="unsignedCredential", description="Unsigned Credential in Dm2 format")
    revocable: Optional[StrictBool] = None
    disclosure_frame: Dict[str, Any] = Field(default=..., alias="disclosureFrame")
    signature_scheme: Optional[StrictStr] = Field(default=None, alias="signatureScheme")
    __properties = ["unsignedCredential", "revocable", "disclosureFrame", "signatureScheme"]

    @validator('signature_scheme')
    def signature_scheme_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ecdsa_secp256k1_sha256', 'ecdsa_p256_sha256', 'ed25519',):
            raise ValueError("must be one of enum values ('ecdsa_secp256k1_sha256', 'ecdsa_p256_sha256', 'ed25519')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignCredentialsDm2SdJwtInputDto:
        """Create an instance of SignCredentialsDm2SdJwtInputDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignCredentialsDm2SdJwtInputDto:
        """Create an instance of SignCredentialsDm2SdJwtInputDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SignCredentialsDm2SdJwtInputDto.parse_obj(obj)

        _obj = SignCredentialsDm2SdJwtInputDto.parse_obj({
            "unsigned_credential": obj.get("unsignedCredential"),
            "revocable": obj.get("revocable"),
            "disclosure_frame": obj.get("disclosureFrame"),
            "signature_scheme": obj.get("signatureScheme")
        })
        return _obj


