# coding: utf-8

"""
    DcfOrchestrator

    # Affinidi Data Connector Framework (DCF) Affinidi DCF is a developer/contributor-focused suite of tools that enables contributors to configure, create, validate and manage data connectors for public consumption. This involves configuring connections to a third party data source and configuring transformation mapping from the data source to a target, “canonical” schema. After setup, DCF validates the configuration of the data connectors and transformation mapping. Following successful validation, created connectors are published.  The Affinidi DCF Orchestrator API covers every step of the data ingestion process, enabling builders to onboard new third-party services as connectors, create authenticated user connections, and pull data to be streamed to Affinidi Vault. It provides a standardized approach to interact with REST APIs, which is also configuration-driven, allowing builders to easily customise the connector's behaviour by modifying configuration files.  The DCF Orchestrator API is organised around three main concepts: Data Source & Configuration, Connector, and User Connection. Below you will find a brief explanation of these and other useful terms:  *Data Source & Configuration* Data Sources represent the third-party service API in our framework. They consist of two entities: the details on how to authenticate with the third-party service are mapped to DataSourceConfig, while the service’s endpoints and data transformation templates are mapped to  DataSource .  Builders can list available DataSourceConfigs and DataSources, create new ones and modify them using our API.  *Connector* This is the building block of our framework. It brings together a Data Source and its Configuration with the builder credentials necessary for connections to be made, for example client ID or client secret. Our endpoints allow builders to list available Connectors, create new ones and modify them.  *User Connection* A user connection is created each time an end user authenticates with a data source via DCF. It holds user specific information relative to a connector and application, including credentials. Our API enables builders to list, create and delete available Connections as well as to execute them to pull data.  *Templates* Builder-defined configuration objects that describe how to interact with a specific third-party service's API, allowing developers to easily connect to and interact with a variety of sources, as well as customising the connector's behaviour. 

    The version of the OpenAPI document: 1.0.0
    Contact: robert.k@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from affinidi_tdk_client_dcf.models.data_source_config import DataSourceConfig  # noqa: E501

class TestDataSourceConfig(unittest.TestCase):
    """DataSourceConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataSourceConfig:
        """Test DataSourceConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataSourceConfig`
        """
        model = DataSourceConfig()  # noqa: E501
        if include_optional:
            return DataSourceConfig(
                data_source_config_name = 'HqXzyCBw3_uufVPIPFhB9J0',
                status = 'DRAFT',
                auth_config_info = affinidi_tdk_client_dcf.models.auth_config_info_dto.AuthConfigInfoDto(
                    auth_details = affinidi_tdk_client_dcf.models.auth_config_info_dto_auth_details.AuthConfigInfoDto_authDetails(
                        auth_url = 'UR,rZ#UM/?R,Fp^l6$ARjbhJk C>0', 
                        template = '', ), 
                    exchange_token_template = affinidi_tdk_client_dcf.models.auth_config_info_dto_exchange_token_template.AuthConfigInfoDto_exchangeTokenTemplate(
                        options = { }, 
                        operations = [
                            affinidi_tdk_client_dcf.models.auth_config_info_dto_exchange_token_template_operations_inner.AuthConfigInfoDto_exchangeTokenTemplate_operations_inner(
                                template = { }, 
                                functions = affinidi_tdk_client_dcf.models.auth_config_info_dto_exchange_token_template_operations_inner_functions.AuthConfigInfoDto_exchangeTokenTemplate_operations_inner_functions(
                                    get_data = [
                                        ''
                                        ], ), )
                            ], ), 
                    refresh_token_template = affinidi_tdk_client_dcf.models.auth_config_info_dto_refresh_token_template.AuthConfigInfoDto_refreshTokenTemplate(
                        options = affinidi_tdk_client_dcf.models.options.options(), 
                        operations = [
                            affinidi_tdk_client_dcf.models.auth_config_info_dto_refresh_token_template_operations_inner.AuthConfigInfoDto_refreshTokenTemplate_operations_inner(
                                template = { }, 
                                functions = affinidi_tdk_client_dcf.models.auth_config_info_dto_refresh_token_template_operations_inner_functions.AuthConfigInfoDto_refreshTokenTemplate_operations_inner_functions(
                                    get_data = [
                                        ''
                                        ], ), )
                            ], ), )
            )
        else:
            return DataSourceConfig(
                data_source_config_name = 'HqXzyCBw3_uufVPIPFhB9J0',
                auth_config_info = affinidi_tdk_client_dcf.models.auth_config_info_dto.AuthConfigInfoDto(
                    auth_details = affinidi_tdk_client_dcf.models.auth_config_info_dto_auth_details.AuthConfigInfoDto_authDetails(
                        auth_url = 'UR,rZ#UM/?R,Fp^l6$ARjbhJk C>0', 
                        template = '', ), 
                    exchange_token_template = affinidi_tdk_client_dcf.models.auth_config_info_dto_exchange_token_template.AuthConfigInfoDto_exchangeTokenTemplate(
                        options = { }, 
                        operations = [
                            affinidi_tdk_client_dcf.models.auth_config_info_dto_exchange_token_template_operations_inner.AuthConfigInfoDto_exchangeTokenTemplate_operations_inner(
                                template = { }, 
                                functions = affinidi_tdk_client_dcf.models.auth_config_info_dto_exchange_token_template_operations_inner_functions.AuthConfigInfoDto_exchangeTokenTemplate_operations_inner_functions(
                                    get_data = [
                                        ''
                                        ], ), )
                            ], ), 
                    refresh_token_template = affinidi_tdk_client_dcf.models.auth_config_info_dto_refresh_token_template.AuthConfigInfoDto_refreshTokenTemplate(
                        options = affinidi_tdk_client_dcf.models.options.options(), 
                        operations = [
                            affinidi_tdk_client_dcf.models.auth_config_info_dto_refresh_token_template_operations_inner.AuthConfigInfoDto_refreshTokenTemplate_operations_inner(
                                template = { }, 
                                functions = affinidi_tdk_client_dcf.models.auth_config_info_dto_refresh_token_template_operations_inner_functions.AuthConfigInfoDto_refreshTokenTemplate_operations_inner_functions(
                                    get_data = [
                                        ''
                                        ], ), )
                            ], ), ),
        )
        """

    def testDataSourceConfig(self):
        """Test DataSourceConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
