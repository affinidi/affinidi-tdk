# coding: utf-8

"""
    KnowYourCustomer

    Affinidi KnowYourCustomer Structure

    The version of the OpenAPI document: 1.0.0
    Contact: consumer-eng@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr, validator

class CompleteRequest(BaseModel):
    """
    completeOtp operation request  # noqa: E501
    """
    email: constr(strict=True, max_length=320, min_length=3) = Field(...)
    did: constr(strict=True, max_length=400, min_length=6) = Field(...)
    confirmation_code: constr(strict=True, max_length=6) = Field(..., alias="confirmationCode")
    __properties = ["email", "did", "confirmationCode"]

    @validator('email')
    def email_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\S+@\S+\.\S+$", value):
            raise ValueError(r"must validate the regular expression /^\S+@\S+\.\S+$/")
        return value

    @validator('confirmation_code')
    def confirmation_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{6}$", value):
            raise ValueError(r"must validate the regular expression /^\d{6}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompleteRequest:
        """Create an instance of CompleteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompleteRequest:
        """Create an instance of CompleteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompleteRequest.parse_obj(obj)

        _obj = CompleteRequest.parse_obj({
            "email": obj.get("email"),
            "did": obj.get("did"),
            "confirmation_code": obj.get("confirmationCode")
        })
        return _obj


