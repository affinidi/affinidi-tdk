# coding: utf-8

"""
    OidcVpAdapterBackend

    Affinidi OIDC VP Adapter Backend  An authorization token is necessary to create or obtain a project Access Token and access Admin APIs. Follow these step-by-step [instructions](https://lemmatree.atlassian.net/wiki/spaces/NETCORE/pages/2735317648020/ASA+Developer+Flow#Instructions-on-how-to-create-the-Project.)  to set up an authorization token 

    The version of the OpenAPI document: 1.0.0
    Contact: nucleus.team@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import Optional

from affinidi_tdk_client_vpa.models.login_session_accept_response_input import LoginSessionAcceptResponseInput
from affinidi_tdk_client_vpa.models.login_session_accept_response_output import LoginSessionAcceptResponseOutput
from affinidi_tdk_client_vpa.models.login_session_dto import LoginSessionDto
from affinidi_tdk_client_vpa.models.login_session_for_idp_input import LoginSessionForIDPInput
from affinidi_tdk_client_vpa.models.login_session_reject_response_input import LoginSessionRejectResponseInput
from affinidi_tdk_client_vpa.models.login_session_reject_response_output import LoginSessionRejectResponseOutput

from affinidi_tdk_client_vpa.api_client import ApiClient
from affinidi_tdk_client_vpa.api_response import ApiResponse
from affinidi_tdk_client_vpa.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SessionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def login_session_accept_response(self, session_id : Annotated[StrictStr, Field(..., description="The id of the login session")], login_session_accept_response_input : Annotated[Optional[LoginSessionAcceptResponseInput], Field(description="LoginSessionAcceptResponse")] = None, **kwargs) -> LoginSessionAcceptResponseOutput:  # noqa: E501
        """Accept OIDC VP Response for Login Session  # noqa: E501

        Accepts and Validates the OIDC VP Response sent by the Wallet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.login_session_accept_response(session_id, login_session_accept_response_input, async_req=True)
        >>> result = thread.get()

        :param session_id: The id of the login session (required)
        :type session_id: str
        :param login_session_accept_response_input: LoginSessionAcceptResponse
        :type login_session_accept_response_input: LoginSessionAcceptResponseInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LoginSessionAcceptResponseOutput
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the login_session_accept_response_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.login_session_accept_response_with_http_info(session_id, login_session_accept_response_input, **kwargs)  # noqa: E501

    @validate_arguments
    def login_session_accept_response_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="The id of the login session")], login_session_accept_response_input : Annotated[Optional[LoginSessionAcceptResponseInput], Field(description="LoginSessionAcceptResponse")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Accept OIDC VP Response for Login Session  # noqa: E501

        Accepts and Validates the OIDC VP Response sent by the Wallet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.login_session_accept_response_with_http_info(session_id, login_session_accept_response_input, async_req=True)
        >>> result = thread.get()

        :param session_id: The id of the login session (required)
        :type session_id: str
        :param login_session_accept_response_input: LoginSessionAcceptResponse
        :type login_session_accept_response_input: LoginSessionAcceptResponseInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LoginSessionAcceptResponseOutput, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'login_session_accept_response_input'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_session_accept_response" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['session_id'] is not None:
            _path_params['sessionId'] = _params['session_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['login_session_accept_response_input'] is not None:
            _body_params = _params['login_session_accept_response_input']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "LoginSessionAcceptResponseOutput",
            '400': "LoginSessionAcceptResponse400Response",
            '401': "UnauthorizedError",
        }

        return self.api_client.call_api(
            '/v1/login/sessions/{sessionId}/accept-response', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def login_session_for_idp(self, login_session_for_idp_input : Annotated[Optional[LoginSessionForIDPInput], Field(description="LoginSessionForIdp")] = None, **kwargs) -> LoginSessionDto:  # noqa: E501
        """Create Login Session for IDP Login  # noqa: E501

        Creates Login Session for IDP Login by using the Login Challenge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.login_session_for_idp(login_session_for_idp_input, async_req=True)
        >>> result = thread.get()

        :param login_session_for_idp_input: LoginSessionForIdp
        :type login_session_for_idp_input: LoginSessionForIDPInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LoginSessionDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the login_session_for_idp_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.login_session_for_idp_with_http_info(login_session_for_idp_input, **kwargs)  # noqa: E501

    @validate_arguments
    def login_session_for_idp_with_http_info(self, login_session_for_idp_input : Annotated[Optional[LoginSessionForIDPInput], Field(description="LoginSessionForIdp")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Login Session for IDP Login  # noqa: E501

        Creates Login Session for IDP Login by using the Login Challenge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.login_session_for_idp_with_http_info(login_session_for_idp_input, async_req=True)
        >>> result = thread.get()

        :param login_session_for_idp_input: LoginSessionForIdp
        :type login_session_for_idp_input: LoginSessionForIDPInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LoginSessionDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'login_session_for_idp_input'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_session_for_idp" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['login_session_for_idp_input'] is not None:
            _body_params = _params['login_session_for_idp_input']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '201': "LoginSessionDto",
            '400': "LoginConfigurationReadInvalidClientIdError",
            '401': "UnauthorizedError",
            '403': "ActionForbiddenError",
        }

        return self.api_client.call_api(
            '/v1/login/sessions/for-idp', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def login_session_reject_response(self, session_id : Annotated[StrictStr, Field(..., description="The id of the login session")], login_session_reject_response_input : Annotated[Optional[LoginSessionRejectResponseInput], Field(description="LoginSessionRejectResponse")] = None, **kwargs) -> LoginSessionRejectResponseOutput:  # noqa: E501
        """Reject Response for Login Session  # noqa: E501

        The user declines the request for access to their data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.login_session_reject_response(session_id, login_session_reject_response_input, async_req=True)
        >>> result = thread.get()

        :param session_id: The id of the login session (required)
        :type session_id: str
        :param login_session_reject_response_input: LoginSessionRejectResponse
        :type login_session_reject_response_input: LoginSessionRejectResponseInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LoginSessionRejectResponseOutput
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the login_session_reject_response_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.login_session_reject_response_with_http_info(session_id, login_session_reject_response_input, **kwargs)  # noqa: E501

    @validate_arguments
    def login_session_reject_response_with_http_info(self, session_id : Annotated[StrictStr, Field(..., description="The id of the login session")], login_session_reject_response_input : Annotated[Optional[LoginSessionRejectResponseInput], Field(description="LoginSessionRejectResponse")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Reject Response for Login Session  # noqa: E501

        The user declines the request for access to their data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.login_session_reject_response_with_http_info(session_id, login_session_reject_response_input, async_req=True)
        >>> result = thread.get()

        :param session_id: The id of the login session (required)
        :type session_id: str
        :param login_session_reject_response_input: LoginSessionRejectResponse
        :type login_session_reject_response_input: LoginSessionRejectResponseInput
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LoginSessionRejectResponseOutput, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'session_id',
            'login_session_reject_response_input'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_session_reject_response" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['session_id'] is not None:
            _path_params['sessionId'] = _params['session_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['login_session_reject_response_input'] is not None:
            _body_params = _params['login_session_reject_response_input']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "LoginSessionRejectResponseOutput",
        }

        return self.api_client.call_api(
            '/v1/login/sessions/{sessionId}/reject-response', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
