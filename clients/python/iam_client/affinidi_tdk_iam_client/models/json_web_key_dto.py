# coding: utf-8

"""
    Iam

    Affinidi IAM

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class JsonWebKeyDto(BaseModel):
    """
    JsonWebKeyDto
    """
    kid: StrictStr = Field(...)
    kty: StrictStr = Field(...)
    n: Optional[StrictStr] = None
    e: Optional[StrictStr] = None
    x: Optional[StrictStr] = None
    y: Optional[StrictStr] = None
    crv: Optional[StrictStr] = None
    alg: StrictStr = Field(...)
    use: StrictStr = Field(...)
    __properties = ["kid", "kty", "n", "e", "x", "y", "crv", "alg", "use"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JsonWebKeyDto:
        """Create an instance of JsonWebKeyDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JsonWebKeyDto:
        """Create an instance of JsonWebKeyDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JsonWebKeyDto.parse_obj(obj)

        _obj = JsonWebKeyDto.parse_obj({
            "kid": obj.get("kid"),
            "kty": obj.get("kty"),
            "n": obj.get("n"),
            "e": obj.get("e"),
            "x": obj.get("x"),
            "y": obj.get("y"),
            "crv": obj.get("crv"),
            "alg": obj.get("alg"),
            "use": obj.get("use")
        })
        return _obj


