# coding: utf-8

"""
    Iam

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ProjectDto(BaseModel):
    """
    ProjectDto
    """
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    owner_id: Optional[StrictStr] = Field(default=None, alias="ownerId")
    description: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt", description="creation date and time in ISO-8601 format, e.g. 2023-09-20T07:12:13")
    updated_at: Optional[StrictStr] = Field(default=None, alias="updatedAt", description="last update date and time in ISO-8601 format, e.g. 2023-09-20T07:12:13")
    __properties = ["id", "name", "ownerId", "description", "createdAt", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProjectDto:
        """Create an instance of ProjectDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProjectDto:
        """Create an instance of ProjectDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProjectDto.parse_obj(obj)

        _obj = ProjectDto.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "owner_id": obj.get("ownerId"),
            "description": obj.get("description"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


