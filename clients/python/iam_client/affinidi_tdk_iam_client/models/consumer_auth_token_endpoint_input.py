# coding: utf-8

"""
    Iam

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ConsumerAuthTokenEndpointInput(BaseModel):
    """
    ConsumerAuthTokenEndpointInput
    """
    grant_type: StrictStr = Field(...)
    code: Optional[StrictStr] = None
    refresh_token: Optional[StrictStr] = None
    redirect_uri: Optional[StrictStr] = None
    client_id: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["grant_type", "code", "refresh_token", "redirect_uri", "client_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConsumerAuthTokenEndpointInput:
        """Create an instance of ConsumerAuthTokenEndpointInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConsumerAuthTokenEndpointInput:
        """Create an instance of ConsumerAuthTokenEndpointInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConsumerAuthTokenEndpointInput.parse_obj(obj)

        _obj = ConsumerAuthTokenEndpointInput.parse_obj({
            "grant_type": obj.get("grant_type"),
            "code": obj.get("code"),
            "refresh_token": obj.get("refresh_token"),
            "redirect_uri": obj.get("redirect_uri"),
            "client_id": obj.get("client_id")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


