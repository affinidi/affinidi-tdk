# coding: utf-8

"""
    CredentialIssuanceService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from affinidi_tdk_credential_issuance_client.models.well_known_open_id_credential_issuer_response_display_logo import WellKnownOpenIdCredentialIssuerResponseDisplayLogo

class WellKnownOpenIdCredentialIssuerResponseDisplay(BaseModel):
    """
    WellKnownOpenIdCredentialIssuerResponseDisplay
    """
    name: Optional[StrictStr] = None
    locale: Optional[StrictStr] = None
    logo: Optional[WellKnownOpenIdCredentialIssuerResponseDisplayLogo] = None
    __properties = ["name", "locale", "logo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WellKnownOpenIdCredentialIssuerResponseDisplay:
        """Create an instance of WellKnownOpenIdCredentialIssuerResponseDisplay from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WellKnownOpenIdCredentialIssuerResponseDisplay:
        """Create an instance of WellKnownOpenIdCredentialIssuerResponseDisplay from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WellKnownOpenIdCredentialIssuerResponseDisplay.parse_obj(obj)

        _obj = WellKnownOpenIdCredentialIssuerResponseDisplay.parse_obj({
            "name": obj.get("name"),
            "locale": obj.get("locale"),
            "logo": WellKnownOpenIdCredentialIssuerResponseDisplayLogo.from_dict(obj.get("logo")) if obj.get("logo") is not None else None
        })
        return _obj


