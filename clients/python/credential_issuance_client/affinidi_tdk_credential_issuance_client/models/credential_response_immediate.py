# coding: utf-8

"""
    CredentialIssuanceService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from affinidi_tdk_credential_issuance_client.models.credential_response_immediate_c_nonce_expires_in import CredentialResponseImmediateCNonceExpiresIn
from affinidi_tdk_credential_issuance_client.models.credential_response_immediate_credential import CredentialResponseImmediateCredential

class CredentialResponseImmediate(BaseModel):
    """
    CredentialResponseImmediate
    """
    credential: CredentialResponseImmediateCredential = Field(...)
    c_nonce: StrictStr = Field(default=..., description="String containing a nonce to be used when creating a proof of possession of the key proof")
    c_nonce_expires_in: CredentialResponseImmediateCNonceExpiresIn = Field(...)
    __properties = ["credential", "c_nonce", "c_nonce_expires_in"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CredentialResponseImmediate:
        """Create an instance of CredentialResponseImmediate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of credential
        if self.credential:
            _dict['credential'] = self.credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of c_nonce_expires_in
        if self.c_nonce_expires_in:
            _dict['c_nonce_expires_in'] = self.c_nonce_expires_in.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CredentialResponseImmediate:
        """Create an instance of CredentialResponseImmediate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CredentialResponseImmediate.parse_obj(obj)

        _obj = CredentialResponseImmediate.parse_obj({
            "credential": CredentialResponseImmediateCredential.from_dict(obj.get("credential")) if obj.get("credential") is not None else None,
            "c_nonce": obj.get("c_nonce"),
            "c_nonce_expires_in": CredentialResponseImmediateCNonceExpiresIn.from_dict(obj.get("c_nonce_expires_in")) if obj.get("c_nonce_expires_in") is not None else None
        })
        return _obj


