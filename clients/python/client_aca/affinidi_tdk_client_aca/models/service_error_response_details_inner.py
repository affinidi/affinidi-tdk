# coding: utf-8

"""
    AivCloudApi

    Affinidi AivCloudApi Structure

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class ServiceErrorResponseDetailsInner(BaseModel):
    """
    ServiceErrorResponseDetailsInner
    """
    issue: StrictStr = Field(..., description="what went wrong")
    field: Optional[StrictStr] = Field(None, description="the fields that caused the error")
    value: Optional[StrictStr] = Field(None, description="expected values of the errored field")
    location: Optional[StrictStr] = Field(None, description="location of error")
    __properties = ["issue", "field", "value", "location"]

    @validator('location')
    def location_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('BODY', 'PATH', 'QUERY'):
            raise ValueError("must be one of enum values ('BODY', 'PATH', 'QUERY')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServiceErrorResponseDetailsInner:
        """Create an instance of ServiceErrorResponseDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceErrorResponseDetailsInner:
        """Create an instance of ServiceErrorResponseDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServiceErrorResponseDetailsInner.parse_obj(obj)

        _obj = ServiceErrorResponseDetailsInner.parse_obj({
            "issue": obj.get("issue"),
            "field": obj.get("field"),
            "value": obj.get("value"),
            "location": obj.get("location")
        })
        return _obj


