# coding: utf-8

"""
    VerificationService

    Affinidi VerificationService Structure

    The version of the OpenAPI document: 1.0.0
    Contact: nucleus.team@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from affinidi_tdk_credential_verification_client.models.format import Format  # noqa: E501

class TestFormat(unittest.TestCase):
    """Format unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Format:
        """Test Format
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Format`
        """
        model = Format()  # noqa: E501
        if include_optional:
            return Format(
                jwt = affinidi_tdk_credential_verification_client.models.jwt_object.JwtObject(
                    alg = [
                        ''
                        ], ),
                jwt_vc = affinidi_tdk_credential_verification_client.models.jwt_object.JwtObject(
                    alg = [
                        ''
                        ], ),
                jwt_vp = affinidi_tdk_credential_verification_client.models.jwt_object.JwtObject(
                    alg = [
                        ''
                        ], ),
                ldp = affinidi_tdk_credential_verification_client.models.ldp_object.LdpObject(
                    proof_type = [
                        ''
                        ], ),
                ldp_vc = affinidi_tdk_credential_verification_client.models.ldp_object.LdpObject(
                    proof_type = [
                        ''
                        ], ),
                ldp_vp = affinidi_tdk_credential_verification_client.models.ldp_object.LdpObject(
                    proof_type = [
                        ''
                        ], )
            )
        else:
            return Format(
        )
        """

    def testFormat(self):
        """Test Format"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
