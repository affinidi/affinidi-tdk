# coding: utf-8

"""
    VerificationService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from affinidi_tdk_credential_verification_client.models.verify_presentation_input import VerifyPresentationInput  # noqa: E501

class TestVerifyPresentationInput(unittest.TestCase):
    """VerifyPresentationInput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VerifyPresentationInput:
        """Test VerifyPresentationInput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VerifyPresentationInput`
        """
        model = VerifyPresentationInput()  # noqa: E501
        if include_optional:
            return VerifyPresentationInput(
                verifiable_presentation = affinidi_tdk_credential_verification_client.models.w3c_presentation.W3cPresentation(
                    @context = null, 
                    id = '', 
                    type = [
                        ''
                        ], 
                    holder = affinidi_tdk_credential_verification_client.models.holder.holder(), 
                    verifiable_credential = [
                        affinidi_tdk_credential_verification_client.models.w3c_credential.W3cCredential(
                            @context = null, 
                            id = '', 
                            type = [
                                ''
                                ], 
                            holder = null, 
                            credential_subject = null, 
                            credential_status = affinidi_tdk_credential_verification_client.models.w3c_credential_status.W3cCredentialStatus(
                                id = '', 
                                type = '', 
                                revocation_list_index = '', 
                                revocation_list_credential = '', ), 
                            issuance_date = '', 
                            issuer = '', 
                            expiration_date = '', 
                            proof = affinidi_tdk_credential_verification_client.models.w3c_proof.W3cProof(
                                created = '', 
                                verification_method = '', 
                                proof_purpose = '', 
                                jws = '', 
                                proof_value = '', 
                                nonce = '', ), 
                            credential_schema = affinidi_tdk_credential_verification_client.models.w3c_credential_credential_schema.W3cCredential_credentialSchema(
                                id = '', ), )
                        ], 
                    presentation_submission = affinidi_tdk_credential_verification_client.models.presentation_submission.PresentationSubmission(
                        id = '', 
                        definition_id = '', 
                        descriptor_map = [
                            affinidi_tdk_credential_verification_client.models.descriptor.Descriptor(
                                id = '', 
                                path = '', 
                                path_nested = affinidi_tdk_credential_verification_client.models.nested_descriptor.NestedDescriptor(
                                    id = '', 
                                    path = '', 
                                    format = '', ), 
                                format = '', )
                            ], ), 
                    proof = affinidi_tdk_credential_verification_client.models.proof.proof(), ),
                signed_presentation = affinidi_tdk_credential_verification_client.models.w3c_presentation.W3cPresentation(
                    @context = null, 
                    id = '', 
                    type = [
                        ''
                        ], 
                    holder = affinidi_tdk_credential_verification_client.models.holder.holder(), 
                    verifiable_credential = [
                        affinidi_tdk_credential_verification_client.models.w3c_credential.W3cCredential(
                            @context = null, 
                            id = '', 
                            type = [
                                ''
                                ], 
                            holder = null, 
                            credential_subject = null, 
                            credential_status = affinidi_tdk_credential_verification_client.models.w3c_credential_status.W3cCredentialStatus(
                                id = '', 
                                type = '', 
                                revocation_list_index = '', 
                                revocation_list_credential = '', ), 
                            issuance_date = '', 
                            issuer = '', 
                            expiration_date = '', 
                            proof = affinidi_tdk_credential_verification_client.models.w3c_proof.W3cProof(
                                created = '', 
                                verification_method = '', 
                                proof_purpose = '', 
                                jws = '', 
                                proof_value = '', 
                                nonce = '', ), 
                            credential_schema = affinidi_tdk_credential_verification_client.models.w3c_credential_credential_schema.W3cCredential_credentialSchema(
                                id = '', ), )
                        ], 
                    presentation_submission = affinidi_tdk_credential_verification_client.models.presentation_submission.PresentationSubmission(
                        id = '', 
                        definition_id = '', 
                        descriptor_map = [
                            affinidi_tdk_credential_verification_client.models.descriptor.Descriptor(
                                id = '', 
                                path = '', 
                                path_nested = affinidi_tdk_credential_verification_client.models.nested_descriptor.NestedDescriptor(
                                    id = '', 
                                    path = '', 
                                    format = '', ), 
                                format = '', )
                            ], ), 
                    proof = affinidi_tdk_credential_verification_client.models.proof.proof(), ),
                presentation_definition = None,
                presentation_submission = None,
                challenge = ''
            )
        else:
            return VerifyPresentationInput(
        )
        """

    def testVerifyPresentationInput(self):
        """Test VerifyPresentationInput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
