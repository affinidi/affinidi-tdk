# coding: utf-8

"""
    VerificationService

    Affinidi VerificationService Structure

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from affinidi_tdk_credential_verification_client.models.w3c_credential_credential_schema import W3cCredentialCredentialSchema
from affinidi_tdk_credential_verification_client.models.w3c_credential_credential_subject import W3cCredentialCredentialSubject
from affinidi_tdk_credential_verification_client.models.w3c_credential_holder import W3cCredentialHolder
from affinidi_tdk_credential_verification_client.models.w3c_credential_status import W3cCredentialStatus
from affinidi_tdk_credential_verification_client.models.w3c_presentation_context import W3cPresentationContext
from affinidi_tdk_credential_verification_client.models.w3c_proof import W3cProof

class W3cCredential(BaseModel):
    """
    W3cCredential
    """
    context: W3cPresentationContext = Field(..., alias="@context")
    id: Optional[StrictStr] = None
    type: conlist(StrictStr) = Field(...)
    holder: Optional[W3cCredentialHolder] = None
    credential_subject: W3cCredentialCredentialSubject = Field(..., alias="credentialSubject")
    credential_status: Optional[W3cCredentialStatus] = Field(None, alias="credentialStatus")
    issuance_date: StrictStr = Field(..., alias="issuanceDate")
    issuer: StrictStr = Field(...)
    expiration_date: Optional[StrictStr] = Field(None, alias="expirationDate")
    proof: W3cProof = Field(...)
    credential_schema: Optional[W3cCredentialCredentialSchema] = Field(None, alias="credentialSchema")
    __properties = ["@context", "id", "type", "holder", "credentialSubject", "credentialStatus", "issuanceDate", "issuer", "expirationDate", "proof", "credentialSchema"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> W3cCredential:
        """Create an instance of W3cCredential from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['@context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of holder
        if self.holder:
            _dict['holder'] = self.holder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credential_subject
        if self.credential_subject:
            _dict['credentialSubject'] = self.credential_subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credential_status
        if self.credential_status:
            _dict['credentialStatus'] = self.credential_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proof
        if self.proof:
            _dict['proof'] = self.proof.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credential_schema
        if self.credential_schema:
            _dict['credentialSchema'] = self.credential_schema.to_dict()
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if expiration_date (nullable) is None
        # and __fields_set__ contains the field
        if self.expiration_date is None and "expiration_date" in self.__fields_set__:
            _dict['expirationDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> W3cCredential:
        """Create an instance of W3cCredential from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return W3cCredential.parse_obj(obj)

        _obj = W3cCredential.parse_obj({
            "context": W3cPresentationContext.from_dict(obj.get("@context")) if obj.get("@context") is not None else None,
            "id": obj.get("id"),
            "type": obj.get("type"),
            "holder": W3cCredentialHolder.from_dict(obj.get("holder")) if obj.get("holder") is not None else None,
            "credential_subject": W3cCredentialCredentialSubject.from_dict(obj.get("credentialSubject")) if obj.get("credentialSubject") is not None else None,
            "credential_status": W3cCredentialStatus.from_dict(obj.get("credentialStatus")) if obj.get("credentialStatus") is not None else None,
            "issuance_date": obj.get("issuanceDate"),
            "issuer": obj.get("issuer"),
            "expiration_date": obj.get("expirationDate"),
            "proof": W3cProof.from_dict(obj.get("proof")) if obj.get("proof") is not None else None,
            "credential_schema": W3cCredentialCredentialSchema.from_dict(obj.get("credentialSchema")) if obj.get("credentialSchema") is not None else None
        })
        return _obj


