# coding: utf-8

"""
    VerificationService

    Affinidi VerificationService Structure

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from affinidi_tdk_credential_verification_client.models.constraints import Constraints
from affinidi_tdk_credential_verification_client.models.format import Format

class InputDescriptor(BaseModel):
    """
    InputDescriptor
    """
    id: StrictStr = Field(...)
    constraints: Constraints = Field(...)
    name: Optional[StrictStr] = None
    purpose: Optional[StrictStr] = None
    format: Optional[Format] = None
    group: Optional[conlist(StrictStr)] = None
    __properties = ["id", "constraints", "name", "purpose", "format", "group"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InputDescriptor:
        """Create an instance of InputDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of constraints
        if self.constraints:
            _dict['constraints'] = self.constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of format
        if self.format:
            _dict['format'] = self.format.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InputDescriptor:
        """Create an instance of InputDescriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InputDescriptor.parse_obj(obj)

        _obj = InputDescriptor.parse_obj({
            "id": obj.get("id"),
            "constraints": Constraints.from_dict(obj.get("constraints")) if obj.get("constraints") is not None else None,
            "name": obj.get("name"),
            "purpose": obj.get("purpose"),
            "format": Format.from_dict(obj.get("format")) if obj.get("format") is not None else None,
            "group": obj.get("group")
        })
        return _obj


