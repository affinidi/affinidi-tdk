# coding: utf-8

"""
    VerificationService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from affinidi_tdk_credential_verification_client.models.w3c_presentation import W3cPresentation

class VerifyPresentationInput(BaseModel):
    """
    Request model of /verify-vp  # noqa: E501
    """
    verifiable_presentation: Optional[W3cPresentation] = Field(default=None, alias="verifiablePresentation")
    signed_presentation: Optional[W3cPresentation] = Field(default=None, alias="signedPresentation")
    presentation_definition: Optional[Dict[str, Any]] = Field(default=None, alias="presentationDefinition")
    presentation_submission: Optional[Dict[str, Any]] = Field(default=None, alias="presentationSubmission")
    challenge: Optional[StrictStr] = None
    __properties = ["verifiablePresentation", "signedPresentation", "presentationDefinition", "presentationSubmission", "challenge"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VerifyPresentationInput:
        """Create an instance of VerifyPresentationInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of verifiable_presentation
        if self.verifiable_presentation:
            _dict['verifiablePresentation'] = self.verifiable_presentation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signed_presentation
        if self.signed_presentation:
            _dict['signedPresentation'] = self.signed_presentation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VerifyPresentationInput:
        """Create an instance of VerifyPresentationInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VerifyPresentationInput.parse_obj(obj)

        _obj = VerifyPresentationInput.parse_obj({
            "verifiable_presentation": W3cPresentation.from_dict(obj.get("verifiablePresentation")) if obj.get("verifiablePresentation") is not None else None,
            "signed_presentation": W3cPresentation.from_dict(obj.get("signedPresentation")) if obj.get("signedPresentation") is not None else None,
            "presentation_definition": obj.get("presentationDefinition"),
            "presentation_submission": obj.get("presentationSubmission"),
            "challenge": obj.get("challenge")
        })
        return _obj


