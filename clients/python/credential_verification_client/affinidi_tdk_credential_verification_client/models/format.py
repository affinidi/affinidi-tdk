# coding: utf-8

"""
    VerificationService

    Affinidi VerificationService Structure

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from affinidi_tdk_credential_verification_client.models.jwt_object import JwtObject
from affinidi_tdk_credential_verification_client.models.ldp_object import LdpObject

class Format(BaseModel):
    """
    Format
    """
    jwt: Optional[JwtObject] = None
    jwt_vc: Optional[JwtObject] = None
    jwt_vp: Optional[JwtObject] = None
    ldp: Optional[LdpObject] = None
    ldp_vc: Optional[LdpObject] = None
    ldp_vp: Optional[LdpObject] = None
    __properties = ["jwt", "jwt_vc", "jwt_vp", "ldp", "ldp_vc", "ldp_vp"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Format:
        """Create an instance of Format from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of jwt
        if self.jwt:
            _dict['jwt'] = self.jwt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jwt_vc
        if self.jwt_vc:
            _dict['jwt_vc'] = self.jwt_vc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jwt_vp
        if self.jwt_vp:
            _dict['jwt_vp'] = self.jwt_vp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ldp
        if self.ldp:
            _dict['ldp'] = self.ldp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ldp_vc
        if self.ldp_vc:
            _dict['ldp_vc'] = self.ldp_vc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ldp_vp
        if self.ldp_vp:
            _dict['ldp_vp'] = self.ldp_vp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Format:
        """Create an instance of Format from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Format.parse_obj(obj)

        _obj = Format.parse_obj({
            "jwt": JwtObject.from_dict(obj.get("jwt")) if obj.get("jwt") is not None else None,
            "jwt_vc": JwtObject.from_dict(obj.get("jwt_vc")) if obj.get("jwt_vc") is not None else None,
            "jwt_vp": JwtObject.from_dict(obj.get("jwt_vp")) if obj.get("jwt_vp") is not None else None,
            "ldp": LdpObject.from_dict(obj.get("ldp")) if obj.get("ldp") is not None else None,
            "ldp_vc": LdpObject.from_dict(obj.get("ldp_vc")) if obj.get("ldp_vc") is not None else None,
            "ldp_vp": LdpObject.from_dict(obj.get("ldp_vp")) if obj.get("ldp_vp") is not None else None
        })
        return _obj


