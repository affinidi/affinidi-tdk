# coding: utf-8

"""
    VerificationService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist, validator
from affinidi_tdk_credential_verification_client.models.filter import Filter

class Field(BaseModel):
    """
    Field
    """
    id: Optional[StrictStr] = None
    path: Optional[conlist(StrictStr)] = None
    purpose: Optional[StrictStr] = None
    filter: Optional[Filter] = None
    predicate: Optional[StrictStr] = None
    __properties = ["id", "path", "purpose", "filter", "predicate"]

    @validator('predicate')
    def predicate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('required', 'preferred'):
            raise ValueError("must be one of enum values ('required', 'preferred')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Field:
        """Create an instance of Field from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Field:
        """Create an instance of Field from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Field.parse_obj(obj)

        _obj = Field.parse_obj({
            "id": obj.get("id"),
            "path": obj.get("path"),
            "purpose": obj.get("purpose"),
            "filter": Filter.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "predicate": obj.get("predicate")
        })
        return _obj


