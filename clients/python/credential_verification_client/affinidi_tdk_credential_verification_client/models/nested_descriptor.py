# coding: utf-8

"""
    VerificationService

    Affinidi VerificationService Structure

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class NestedDescriptor(BaseModel):
    """
    NestedDescriptor
    """
    id: Optional[StrictStr] = None
    path: StrictStr = Field(...)
    path_nested: Optional[NestedDescriptor] = None
    format: StrictStr = Field(...)
    __properties = ["id", "path", "path_nested", "format"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NestedDescriptor:
        """Create an instance of NestedDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of path_nested
        if self.path_nested:
            _dict['path_nested'] = self.path_nested.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NestedDescriptor:
        """Create an instance of NestedDescriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NestedDescriptor.parse_obj(obj)

        _obj = NestedDescriptor.parse_obj({
            "id": obj.get("id"),
            "path": obj.get("path"),
            "path_nested": NestedDescriptor.from_dict(obj.get("path_nested")) if obj.get("path_nested") is not None else None,
            "format": obj.get("format")
        })
        return _obj

NestedDescriptor.update_forward_refs()

