# coding: utf-8

"""
    VerificationService

    Affinidi VerificationService Structure

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from affinidi_tdk_credential_verification_client.models.pd_status import PdStatus

class ConstraintsStatuses(BaseModel):
    """
    ConstraintsStatuses
    """
    active: Optional[PdStatus] = None
    suspended: Optional[PdStatus] = None
    revoked: Optional[PdStatus] = None
    __properties = ["active", "suspended", "revoked"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConstraintsStatuses:
        """Create an instance of ConstraintsStatuses from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of active
        if self.active:
            _dict['active'] = self.active.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suspended
        if self.suspended:
            _dict['suspended'] = self.suspended.to_dict()
        # override the default output from pydantic by calling `to_dict()` of revoked
        if self.revoked:
            _dict['revoked'] = self.revoked.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConstraintsStatuses:
        """Create an instance of ConstraintsStatuses from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConstraintsStatuses.parse_obj(obj)

        _obj = ConstraintsStatuses.parse_obj({
            "active": PdStatus.from_dict(obj.get("active")) if obj.get("active") is not None else None,
            "suspended": PdStatus.from_dict(obj.get("suspended")) if obj.get("suspended") is not None else None,
            "revoked": PdStatus.from_dict(obj.get("revoked")) if obj.get("revoked") is not None else None
        })
        return _obj


