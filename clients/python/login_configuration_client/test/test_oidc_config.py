# coding: utf-8

"""
    OidcVpAdapterBackend

    Affinidi OIDC VP Adapter Backend  An authorization token is necessary to create or obtain a project Access Token and access Admin APIs. Follow these step-by-step [instructions](https://lemmatree.atlassian.net/wiki/spaces/NETCORE/pages/2735317648020/ASA+Developer+Flow#Instructions-on-how-to-create-the-Project.)  to set up an authorization token 

    The version of the OpenAPI document: 1.0.0
    Contact: nucleus.team@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from affinidi_tdk_login_configuration_client.models.oidc_config import OIDCConfig  # noqa: E501

class TestOIDCConfig(unittest.TestCase):
    """OIDCConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OIDCConfig:
        """Test OIDCConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OIDCConfig`
        """
        model = OIDCConfig()  # noqa: E501
        if include_optional:
            return OIDCConfig(
                authorization_endpoint = '',
                backchannel_logout_session_supported = True,
                backchannel_logout_supported = True,
                claims_parameter_supported = True,
                claims_supported = [
                    ''
                    ],
                code_challenge_methods_supported = [
                    ''
                    ],
                credentials_endpoint_draft_00 = '',
                credentials_supported_draft_00 = [
                    affinidi_tdk_login_configuration_client.models.oidc_config_credentials_supported_draft_00_inner.OIDCConfig_credentials_supported_draft_00_inner(
                        cryptographic_binding_methods_supported = [
                            ''
                            ], 
                        cryptographic_suites_supported = [
                            ''
                            ], 
                        format = '', 
                        types = [
                            ''
                            ], )
                    ],
                end_session_endpoint = '',
                frontchannel_logout_session_supported = True,
                frontchannel_logout_supported = True,
                grant_types_supported = [
                    ''
                    ],
                id_token_signed_response_alg = [
                    ''
                    ],
                id_token_signing_alg_values_supported = [
                    ''
                    ],
                issuer = '',
                jwks_uri = '',
                registration_endpoint = '',
                request_object_signing_alg_values_supported = [
                    ''
                    ],
                request_parameter_supported = True,
                request_uri_parameter_supported = True,
                require_request_uri_registration = True,
                response_modes_supported = [
                    ''
                    ],
                response_types_supported = [
                    ''
                    ],
                revocation_endpoint = '',
                scopes_supported = [
                    ''
                    ],
                subject_types_supported = [
                    ''
                    ],
                token_endpoint = '',
                token_endpoint_auth_methods_supported = [
                    ''
                    ],
                userinfo_endpoint = '',
                userinfo_signed_response_alg = [
                    ''
                    ],
                userinfo_signing_alg_values_supported = [
                    ''
                    ]
            )
        else:
            return OIDCConfig(
                authorization_endpoint = '',
                id_token_signed_response_alg = [
                    ''
                    ],
                id_token_signing_alg_values_supported = [
                    ''
                    ],
                issuer = '',
                jwks_uri = '',
                response_types_supported = [
                    ''
                    ],
                subject_types_supported = [
                    ''
                    ],
                token_endpoint = '',
                userinfo_signed_response_alg = [
                    ''
                    ],
        )
        """

    def testOIDCConfig(self):
        """Test OIDCConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
