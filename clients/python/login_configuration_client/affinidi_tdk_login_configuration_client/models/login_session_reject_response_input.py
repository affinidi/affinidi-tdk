# coding: utf-8

"""
    OidcVpAdapterBackend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class LoginSessionRejectResponseInput(BaseModel):
    """
    Authorization Response per OpenID for Verifiable Presentations Specification  # noqa: E501
    """
    error: Optional[StrictStr] = Field(default=None, description="The error should follow the OAuth2 error format (e.g. invalid_request, login_required). Defaults to request_denied")
    error_description: Optional[StrictStr] = Field(default=None, alias="errorDescription", description="Description of the error in a human readable format")
    state: StrictStr = Field(default=..., description="Random state associated to the Session")
    additional_properties: Dict[str, Any] = {}
    __properties = ["error", "errorDescription", "state"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoginSessionRejectResponseInput:
        """Create an instance of LoginSessionRejectResponseInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoginSessionRejectResponseInput:
        """Create an instance of LoginSessionRejectResponseInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoginSessionRejectResponseInput.parse_obj(obj)

        _obj = LoginSessionRejectResponseInput.parse_obj({
            "error": obj.get("error"),
            "error_description": obj.get("errorDescription"),
            "state": obj.get("state")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


