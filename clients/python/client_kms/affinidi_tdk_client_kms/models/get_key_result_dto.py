# coding: utf-8

"""
    KeyManagementService

    Affinidi Key Management Service

    The version of the OpenAPI document: 1.0.0
    Contact: nucleus.team@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class GetKeyResultDto(BaseModel):
    """
    DTO contains key record  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="id of the key record")
    project_id: Optional[StrictStr] = Field(None, alias="projectId", description="id of the project")
    ari: Optional[StrictStr] = Field(None, description="ARI of the key record")
    algorithm: Optional[StrictStr] = Field(None, description="algorithm of the key record")
    did_method: Optional[StrictStr] = Field(None, alias="didMethod", description="did method of the key record")
    derivation_path: Optional[StrictStr] = Field(None, alias="derivationPath", description="derivation path of the key record")
    seed_id: Optional[StrictStr] = Field(None, alias="seedId", description="id of the parent seed record")
    seed_ari: Optional[StrictStr] = Field(None, alias="seedAri", description="ARI of the parent seed record")
    public_key_hex: Optional[StrictStr] = Field(None, alias="publicKeyHex", description="public key of the key config in HEX format")
    __properties = ["id", "projectId", "ari", "algorithm", "didMethod", "derivationPath", "seedId", "seedAri", "publicKeyHex"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetKeyResultDto:
        """Create an instance of GetKeyResultDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetKeyResultDto:
        """Create an instance of GetKeyResultDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetKeyResultDto.parse_obj(obj)

        _obj = GetKeyResultDto.parse_obj({
            "id": obj.get("id"),
            "project_id": obj.get("projectId"),
            "ari": obj.get("ari"),
            "algorithm": obj.get("algorithm"),
            "did_method": obj.get("didMethod"),
            "derivation_path": obj.get("derivationPath"),
            "seed_id": obj.get("seedId"),
            "seed_ari": obj.get("seedAri"),
            "public_key_hex": obj.get("publicKeyHex")
        })
        return _obj


