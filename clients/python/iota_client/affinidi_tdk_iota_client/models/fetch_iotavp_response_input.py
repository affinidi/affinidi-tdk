# coding: utf-8

"""
    IotaService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class FetchIOTAVPResponseInput(BaseModel):
    """
    FetchIOTAVPResponseInput
    """
    correlation_id: StrictStr = Field(default=..., alias="correlationId", description="The correlation ID")
    transaction_id: StrictStr = Field(default=..., alias="transactionId", description="The transaction ID")
    response_code: StrictStr = Field(default=..., alias="responseCode", description="The response code.")
    __properties = ["correlationId", "transactionId", "responseCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FetchIOTAVPResponseInput:
        """Create an instance of FetchIOTAVPResponseInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FetchIOTAVPResponseInput:
        """Create an instance of FetchIOTAVPResponseInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FetchIOTAVPResponseInput.parse_obj(obj)

        _obj = FetchIOTAVPResponseInput.parse_obj({
            "correlation_id": obj.get("correlationId"),
            "transaction_id": obj.get("transactionId"),
            "response_code": obj.get("responseCode")
        })
        return _obj


