# coding: utf-8

"""
    VerificationService

    Affinidi VerificationService Structure

    The version of the OpenAPI document: 1.0.0
    Contact: nucleus.team@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from affinidi_tdk_client_ver.models.credential_requirements import CredentialRequirements

class BuildCredentialRequestInput(BaseModel):
    """
    Request model of /build-credential-request  # noqa: E501
    """
    callback_url: Optional[constr(strict=True)] = Field(None, alias="callbackUrl", description="Type of the URL")
    credential_requirements: conlist(CredentialRequirements) = Field(..., alias="credentialRequirements", description="Requirements of the VC")
    issuer_did: Optional[constr(strict=True)] = Field(None, alias="issuerDid", description="Type of the DID")
    subject_did: Optional[constr(strict=True)] = Field(None, alias="subjectDid", description="Type of the DID")
    audience_did: Optional[constr(strict=True)] = Field(None, alias="audienceDid", description="Type of the DID")
    expires_at: Optional[constr(strict=True)] = Field(None, alias="expiresAt", description="Type of the Date ISO")
    nonce: Optional[StrictStr] = Field(None, description="Credential request nonce")
    __properties = ["callbackUrl", "credentialRequirements", "issuerDid", "subjectDid", "audienceDid", "expiresAt", "nonce"]

    @validator('callback_url')
    def callback_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/.*$", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/.*$/")
        return value

    @validator('issuer_did')
    def issuer_did_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"did:.*", value):
            raise ValueError(r"must validate the regular expression /did:.*/")
        return value

    @validator('subject_did')
    def subject_did_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"did:.*", value):
            raise ValueError(r"must validate the regular expression /did:.*/")
        return value

    @validator('audience_did')
    def audience_did_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"did:.*", value):
            raise ValueError(r"must validate the regular expression /did:.*/")
        return value

    @validator('expires_at')
    def expires_at_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)", value):
            raise ValueError(r"must validate the regular expression /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BuildCredentialRequestInput:
        """Create an instance of BuildCredentialRequestInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in credential_requirements (list)
        _items = []
        if self.credential_requirements:
            for _item in self.credential_requirements:
                if _item:
                    _items.append(_item.to_dict())
            _dict['credentialRequirements'] = _items
        # set to None if callback_url (nullable) is None
        # and __fields_set__ contains the field
        if self.callback_url is None and "callback_url" in self.__fields_set__:
            _dict['callbackUrl'] = None

        # set to None if issuer_did (nullable) is None
        # and __fields_set__ contains the field
        if self.issuer_did is None and "issuer_did" in self.__fields_set__:
            _dict['issuerDid'] = None

        # set to None if subject_did (nullable) is None
        # and __fields_set__ contains the field
        if self.subject_did is None and "subject_did" in self.__fields_set__:
            _dict['subjectDid'] = None

        # set to None if audience_did (nullable) is None
        # and __fields_set__ contains the field
        if self.audience_did is None and "audience_did" in self.__fields_set__:
            _dict['audienceDid'] = None

        # set to None if expires_at (nullable) is None
        # and __fields_set__ contains the field
        if self.expires_at is None and "expires_at" in self.__fields_set__:
            _dict['expiresAt'] = None

        # set to None if nonce (nullable) is None
        # and __fields_set__ contains the field
        if self.nonce is None and "nonce" in self.__fields_set__:
            _dict['nonce'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BuildCredentialRequestInput:
        """Create an instance of BuildCredentialRequestInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BuildCredentialRequestInput.parse_obj(obj)

        _obj = BuildCredentialRequestInput.parse_obj({
            "callback_url": obj.get("callbackUrl"),
            "credential_requirements": [CredentialRequirements.from_dict(_item) for _item in obj.get("credentialRequirements")] if obj.get("credentialRequirements") is not None else None,
            "issuer_did": obj.get("issuerDid"),
            "subject_did": obj.get("subjectDid"),
            "audience_did": obj.get("audienceDid"),
            "expires_at": obj.get("expiresAt"),
            "nonce": obj.get("nonce")
        })
        return _obj


