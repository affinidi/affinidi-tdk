# coding: utf-8

"""
    VerificationService

    Affinidi VerificationService Structure

    The version of the OpenAPI document: 1.0.0
    Contact: nucleus.team@affinidi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class VerifyCredentialShareResponseInput(BaseModel):
    """
    Request model of /verify-share-response  # noqa: E501
    """
    credential_share_request_token: Optional[StrictStr] = Field(None, alias="credentialShareRequestToken", description="Token of the credential share request")
    credential_share_response_token: StrictStr = Field(..., alias="credentialShareResponseToken", description="Token of the credential share response")
    is_holder_must_be_subject: Optional[StrictBool] = Field(None, alias="isHolderMustBeSubject", description="Defines if holder did should be a subject")
    __properties = ["credentialShareRequestToken", "credentialShareResponseToken", "isHolderMustBeSubject"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VerifyCredentialShareResponseInput:
        """Create an instance of VerifyCredentialShareResponseInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if credential_share_request_token (nullable) is None
        # and __fields_set__ contains the field
        if self.credential_share_request_token is None and "credential_share_request_token" in self.__fields_set__:
            _dict['credentialShareRequestToken'] = None

        # set to None if is_holder_must_be_subject (nullable) is None
        # and __fields_set__ contains the field
        if self.is_holder_must_be_subject is None and "is_holder_must_be_subject" in self.__fields_set__:
            _dict['isHolderMustBeSubject'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VerifyCredentialShareResponseInput:
        """Create an instance of VerifyCredentialShareResponseInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VerifyCredentialShareResponseInput.parse_obj(obj)

        _obj = VerifyCredentialShareResponseInput.parse_obj({
            "credential_share_request_token": obj.get("credentialShareRequestToken"),
            "credential_share_response_token": obj.get("credentialShareResponseToken"),
            "is_holder_must_be_subject": obj.get("isHolderMustBeSubject")
        })
        return _obj


