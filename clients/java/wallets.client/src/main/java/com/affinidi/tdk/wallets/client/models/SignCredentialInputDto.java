/*
 * CloudWalletEssentials
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.wallets.client.models;

import java.util.Objects;
import com.affinidi.tdk.wallets.client.models.SignCredentialInputDtoUnsignedCredentialParams;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.wallets.client.JSON;

/**
 * DTO contains params to sign credential
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-10T09:26:11.452580855Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class SignCredentialInputDto {
  public static final String SERIALIZED_NAME_UNSIGNED_CREDENTIAL = "unsignedCredential";
  @SerializedName(SERIALIZED_NAME_UNSIGNED_CREDENTIAL)
  private Object unsignedCredential;

  public static final String SERIALIZED_NAME_REVOCABLE = "revocable";
  @SerializedName(SERIALIZED_NAME_REVOCABLE)
  private Boolean revocable;

  /**
   * Gets or Sets credentialFormat
   */
  @JsonAdapter(CredentialFormatEnum.Adapter.class)
  public enum CredentialFormatEnum {
    LDP_VC("ldp_vc"),
    
    JWT_VC_JSON_LD("jwt_vc_json-ld"),
    
    SD_JWT_VC_JSON_LD("sd_jwt_vc_json-ld");

    private String value;

    CredentialFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CredentialFormatEnum fromValue(String value) {
      for (CredentialFormatEnum b : CredentialFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CredentialFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CredentialFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CredentialFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CredentialFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CredentialFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREDENTIAL_FORMAT = "credentialFormat";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_FORMAT)
  private CredentialFormatEnum credentialFormat;

  public static final String SERIALIZED_NAME_UNSIGNED_CREDENTIAL_PARAMS = "unsignedCredentialParams";
  @SerializedName(SERIALIZED_NAME_UNSIGNED_CREDENTIAL_PARAMS)
  private SignCredentialInputDtoUnsignedCredentialParams unsignedCredentialParams;

  public SignCredentialInputDto() {
  }

  public SignCredentialInputDto unsignedCredential(Object unsignedCredential) {
    this.unsignedCredential = unsignedCredential;
    return this;
  }

  /**
   * Unsigned Credential. If provided \&quot;unsignedCredentialParams\&quot; is not accepted
   * @return unsignedCredential
   */
  @javax.annotation.Nullable
  public Object getUnsignedCredential() {
    return unsignedCredential;
  }

  public void setUnsignedCredential(Object unsignedCredential) {
    this.unsignedCredential = unsignedCredential;
  }


  public SignCredentialInputDto revocable(Boolean revocable) {
    this.revocable = revocable;
    return this;
  }

  /**
   * Get revocable
   * @return revocable
   */
  @javax.annotation.Nullable
  public Boolean getRevocable() {
    return revocable;
  }

  public void setRevocable(Boolean revocable) {
    this.revocable = revocable;
  }


  public SignCredentialInputDto credentialFormat(CredentialFormatEnum credentialFormat) {
    this.credentialFormat = credentialFormat;
    return this;
  }

  /**
   * Get credentialFormat
   * @return credentialFormat
   */
  @javax.annotation.Nullable
  public CredentialFormatEnum getCredentialFormat() {
    return credentialFormat;
  }

  public void setCredentialFormat(CredentialFormatEnum credentialFormat) {
    this.credentialFormat = credentialFormat;
  }


  public SignCredentialInputDto unsignedCredentialParams(SignCredentialInputDtoUnsignedCredentialParams unsignedCredentialParams) {
    this.unsignedCredentialParams = unsignedCredentialParams;
    return this;
  }

  /**
   * Get unsignedCredentialParams
   * @return unsignedCredentialParams
   */
  @javax.annotation.Nullable
  public SignCredentialInputDtoUnsignedCredentialParams getUnsignedCredentialParams() {
    return unsignedCredentialParams;
  }

  public void setUnsignedCredentialParams(SignCredentialInputDtoUnsignedCredentialParams unsignedCredentialParams) {
    this.unsignedCredentialParams = unsignedCredentialParams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignCredentialInputDto signCredentialInputDto = (SignCredentialInputDto) o;
    return Objects.equals(this.unsignedCredential, signCredentialInputDto.unsignedCredential) &&
        Objects.equals(this.revocable, signCredentialInputDto.revocable) &&
        Objects.equals(this.credentialFormat, signCredentialInputDto.credentialFormat) &&
        Objects.equals(this.unsignedCredentialParams, signCredentialInputDto.unsignedCredentialParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unsignedCredential, revocable, credentialFormat, unsignedCredentialParams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignCredentialInputDto {\n");
    sb.append("    unsignedCredential: ").append(toIndentedString(unsignedCredential)).append("\n");
    sb.append("    revocable: ").append(toIndentedString(revocable)).append("\n");
    sb.append("    credentialFormat: ").append(toIndentedString(credentialFormat)).append("\n");
    sb.append("    unsignedCredentialParams: ").append(toIndentedString(unsignedCredentialParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unsignedCredential");
    openapiFields.add("revocable");
    openapiFields.add("credentialFormat");
    openapiFields.add("unsignedCredentialParams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignCredentialInputDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignCredentialInputDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignCredentialInputDto is not found in the empty JSON string", SignCredentialInputDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignCredentialInputDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignCredentialInputDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("credentialFormat") != null && !jsonObj.get("credentialFormat").isJsonNull()) && !jsonObj.get("credentialFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialFormat").toString()));
      }
      // validate the optional field `credentialFormat`
      if (jsonObj.get("credentialFormat") != null && !jsonObj.get("credentialFormat").isJsonNull()) {
        CredentialFormatEnum.validateJsonElement(jsonObj.get("credentialFormat"));
      }
      // validate the optional field `unsignedCredentialParams`
      if (jsonObj.get("unsignedCredentialParams") != null && !jsonObj.get("unsignedCredentialParams").isJsonNull()) {
        SignCredentialInputDtoUnsignedCredentialParams.validateJsonElement(jsonObj.get("unsignedCredentialParams"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignCredentialInputDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignCredentialInputDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignCredentialInputDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignCredentialInputDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SignCredentialInputDto>() {
           @Override
           public void write(JsonWriter out, SignCredentialInputDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignCredentialInputDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignCredentialInputDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignCredentialInputDto
   * @throws IOException if the JSON string is invalid with respect to SignCredentialInputDto
   */
  public static SignCredentialInputDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignCredentialInputDto.class);
  }

  /**
   * Convert an instance of SignCredentialInputDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

