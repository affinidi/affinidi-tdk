/*
 * CloudWalletEssentials
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.wallets.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.wallets.client.JSON;

/**
 * unsignedCredentialParams. Used to build an unsigned credential before the signing. This param is not accepted when \&quot;unsignedCredential\&quot; is given
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-08T23:16:44.326296176Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class SignCredentialInputDtoUnsignedCredentialParams {
  public static final String SERIALIZED_NAME_JSON_LD_CONTEXT_URL = "jsonLdContextUrl";
  @SerializedName(SERIALIZED_NAME_JSON_LD_CONTEXT_URL)
  private String jsonLdContextUrl;

  public static final String SERIALIZED_NAME_JSON_SCHEMA_URL = "jsonSchemaUrl";
  @SerializedName(SERIALIZED_NAME_JSON_SCHEMA_URL)
  private String jsonSchemaUrl;

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_CREDENTIAL_SUBJECT = "credentialSubject";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_SUBJECT)
  private Map<String, Object> credentialSubject = new HashMap<>();

  public static final String SERIALIZED_NAME_HOLDER_DID = "holderDid";
  @SerializedName(SERIALIZED_NAME_HOLDER_DID)
  private String holderDid;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public SignCredentialInputDtoUnsignedCredentialParams() {
  }

  public SignCredentialInputDtoUnsignedCredentialParams jsonLdContextUrl(String jsonLdContextUrl) {
    this.jsonLdContextUrl = jsonLdContextUrl;
    return this;
  }

  /**
   * Get jsonLdContextUrl
   * @return jsonLdContextUrl
   */
  @javax.annotation.Nonnull
  public String getJsonLdContextUrl() {
    return jsonLdContextUrl;
  }

  public void setJsonLdContextUrl(String jsonLdContextUrl) {
    this.jsonLdContextUrl = jsonLdContextUrl;
  }


  public SignCredentialInputDtoUnsignedCredentialParams jsonSchemaUrl(String jsonSchemaUrl) {
    this.jsonSchemaUrl = jsonSchemaUrl;
    return this;
  }

  /**
   * Get jsonSchemaUrl
   * @return jsonSchemaUrl
   */
  @javax.annotation.Nonnull
  public String getJsonSchemaUrl() {
    return jsonSchemaUrl;
  }

  public void setJsonSchemaUrl(String jsonSchemaUrl) {
    this.jsonSchemaUrl = jsonSchemaUrl;
  }


  public SignCredentialInputDtoUnsignedCredentialParams typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nonnull
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public SignCredentialInputDtoUnsignedCredentialParams credentialSubject(Map<String, Object> credentialSubject) {
    this.credentialSubject = credentialSubject;
    return this;
  }

  public SignCredentialInputDtoUnsignedCredentialParams putCredentialSubjectItem(String key, Object credentialSubjectItem) {
    if (this.credentialSubject == null) {
      this.credentialSubject = new HashMap<>();
    }
    this.credentialSubject.put(key, credentialSubjectItem);
    return this;
  }

  /**
   * Get credentialSubject
   * @return credentialSubject
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getCredentialSubject() {
    return credentialSubject;
  }

  public void setCredentialSubject(Map<String, Object> credentialSubject) {
    this.credentialSubject = credentialSubject;
  }


  public SignCredentialInputDtoUnsignedCredentialParams holderDid(String holderDid) {
    this.holderDid = holderDid;
    return this;
  }

  /**
   * Get holderDid
   * @return holderDid
   */
  @javax.annotation.Nonnull
  public String getHolderDid() {
    return holderDid;
  }

  public void setHolderDid(String holderDid) {
    this.holderDid = holderDid;
  }


  public SignCredentialInputDtoUnsignedCredentialParams expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Get expiresAt
   * @return expiresAt
   */
  @javax.annotation.Nonnull
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignCredentialInputDtoUnsignedCredentialParams signCredentialInputDtoUnsignedCredentialParams = (SignCredentialInputDtoUnsignedCredentialParams) o;
    return Objects.equals(this.jsonLdContextUrl, signCredentialInputDtoUnsignedCredentialParams.jsonLdContextUrl) &&
        Objects.equals(this.jsonSchemaUrl, signCredentialInputDtoUnsignedCredentialParams.jsonSchemaUrl) &&
        Objects.equals(this.typeName, signCredentialInputDtoUnsignedCredentialParams.typeName) &&
        Objects.equals(this.credentialSubject, signCredentialInputDtoUnsignedCredentialParams.credentialSubject) &&
        Objects.equals(this.holderDid, signCredentialInputDtoUnsignedCredentialParams.holderDid) &&
        Objects.equals(this.expiresAt, signCredentialInputDtoUnsignedCredentialParams.expiresAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jsonLdContextUrl, jsonSchemaUrl, typeName, credentialSubject, holderDid, expiresAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignCredentialInputDtoUnsignedCredentialParams {\n");
    sb.append("    jsonLdContextUrl: ").append(toIndentedString(jsonLdContextUrl)).append("\n");
    sb.append("    jsonSchemaUrl: ").append(toIndentedString(jsonSchemaUrl)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    credentialSubject: ").append(toIndentedString(credentialSubject)).append("\n");
    sb.append("    holderDid: ").append(toIndentedString(holderDid)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jsonLdContextUrl");
    openapiFields.add("jsonSchemaUrl");
    openapiFields.add("typeName");
    openapiFields.add("credentialSubject");
    openapiFields.add("holderDid");
    openapiFields.add("expiresAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jsonLdContextUrl");
    openapiRequiredFields.add("jsonSchemaUrl");
    openapiRequiredFields.add("typeName");
    openapiRequiredFields.add("credentialSubject");
    openapiRequiredFields.add("holderDid");
    openapiRequiredFields.add("expiresAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignCredentialInputDtoUnsignedCredentialParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignCredentialInputDtoUnsignedCredentialParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignCredentialInputDtoUnsignedCredentialParams is not found in the empty JSON string", SignCredentialInputDtoUnsignedCredentialParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignCredentialInputDtoUnsignedCredentialParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignCredentialInputDtoUnsignedCredentialParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SignCredentialInputDtoUnsignedCredentialParams.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("jsonLdContextUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonLdContextUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonLdContextUrl").toString()));
      }
      if (!jsonObj.get("jsonSchemaUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonSchemaUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonSchemaUrl").toString()));
      }
      if (!jsonObj.get("typeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeName").toString()));
      }
      if (!jsonObj.get("holderDid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holderDid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holderDid").toString()));
      }
      if (!jsonObj.get("expiresAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiresAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiresAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignCredentialInputDtoUnsignedCredentialParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignCredentialInputDtoUnsignedCredentialParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignCredentialInputDtoUnsignedCredentialParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignCredentialInputDtoUnsignedCredentialParams.class));

       return (TypeAdapter<T>) new TypeAdapter<SignCredentialInputDtoUnsignedCredentialParams>() {
           @Override
           public void write(JsonWriter out, SignCredentialInputDtoUnsignedCredentialParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignCredentialInputDtoUnsignedCredentialParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignCredentialInputDtoUnsignedCredentialParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignCredentialInputDtoUnsignedCredentialParams
   * @throws IOException if the JSON string is invalid with respect to SignCredentialInputDtoUnsignedCredentialParams
   */
  public static SignCredentialInputDtoUnsignedCredentialParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignCredentialInputDtoUnsignedCredentialParams.class);
  }

  /**
   * Convert an instance of SignCredentialInputDtoUnsignedCredentialParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

