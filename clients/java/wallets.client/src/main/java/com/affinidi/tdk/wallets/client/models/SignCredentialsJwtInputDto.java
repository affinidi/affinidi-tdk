/*
 * CloudWalletEssentials
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.wallets.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * DTO contains params to sign credential
 */
@JsonPropertyOrder({
  SignCredentialsJwtInputDto.JSON_PROPERTY_UNSIGNED_CREDENTIAL,
  SignCredentialsJwtInputDto.JSON_PROPERTY_REVOCABLE,
  SignCredentialsJwtInputDto.JSON_PROPERTY_SIGNATURE_SCHEME
})
@JsonTypeName("signCredentialsJwtInputDto")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class SignCredentialsJwtInputDto {
  public static final String JSON_PROPERTY_UNSIGNED_CREDENTIAL = "unsignedCredential";
  @javax.annotation.Nonnull
  private Object unsignedCredential;

  public static final String JSON_PROPERTY_REVOCABLE = "revocable";
  @javax.annotation.Nullable
  private Boolean revocable;

  /**
   * Gets or Sets signatureScheme
   */
  public enum SignatureSchemeEnum {
    ECDSA_SECP256K1_SHA256(String.valueOf("ecdsa_secp256k1_sha256")),
    
    ECDSA_P256_SHA256(String.valueOf("ecdsa_p256_sha256")),
    
    ED25519(String.valueOf("ed25519"));

    private String value;

    SignatureSchemeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SignatureSchemeEnum fromValue(String value) {
      for (SignatureSchemeEnum b : SignatureSchemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SIGNATURE_SCHEME = "signatureScheme";
  @javax.annotation.Nullable
  private SignatureSchemeEnum signatureScheme;

  public SignCredentialsJwtInputDto() {
  }

  public SignCredentialsJwtInputDto unsignedCredential(@javax.annotation.Nonnull Object unsignedCredential) {
    
    this.unsignedCredential = unsignedCredential;
    return this;
  }

  /**
   * Unsigned Credential in Dm1 format
   * @return unsignedCredential
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNSIGNED_CREDENTIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getUnsignedCredential() {
    return unsignedCredential;
  }


  @JsonProperty(JSON_PROPERTY_UNSIGNED_CREDENTIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnsignedCredential(@javax.annotation.Nonnull Object unsignedCredential) {
    this.unsignedCredential = unsignedCredential;
  }

  public SignCredentialsJwtInputDto revocable(@javax.annotation.Nullable Boolean revocable) {
    
    this.revocable = revocable;
    return this;
  }

  /**
   * Get revocable
   * @return revocable
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REVOCABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRevocable() {
    return revocable;
  }


  @JsonProperty(JSON_PROPERTY_REVOCABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevocable(@javax.annotation.Nullable Boolean revocable) {
    this.revocable = revocable;
  }

  public SignCredentialsJwtInputDto signatureScheme(@javax.annotation.Nullable SignatureSchemeEnum signatureScheme) {
    
    this.signatureScheme = signatureScheme;
    return this;
  }

  /**
   * Get signatureScheme
   * @return signatureScheme
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNATURE_SCHEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignatureSchemeEnum getSignatureScheme() {
    return signatureScheme;
  }


  @JsonProperty(JSON_PROPERTY_SIGNATURE_SCHEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignatureScheme(@javax.annotation.Nullable SignatureSchemeEnum signatureScheme) {
    this.signatureScheme = signatureScheme;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignCredentialsJwtInputDto signCredentialsJwtInputDto = (SignCredentialsJwtInputDto) o;
    return Objects.equals(this.unsignedCredential, signCredentialsJwtInputDto.unsignedCredential) &&
        Objects.equals(this.revocable, signCredentialsJwtInputDto.revocable) &&
        Objects.equals(this.signatureScheme, signCredentialsJwtInputDto.signatureScheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unsignedCredential, revocable, signatureScheme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignCredentialsJwtInputDto {\n");
    sb.append("    unsignedCredential: ").append(toIndentedString(unsignedCredential)).append("\n");
    sb.append("    revocable: ").append(toIndentedString(revocable)).append("\n");
    sb.append("    signatureScheme: ").append(toIndentedString(signatureScheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `unsignedCredential` to the URL query string
    if (getUnsignedCredential() != null) {
      try {
        joiner.add(String.format("%sunsignedCredential%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUnsignedCredential()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `revocable` to the URL query string
    if (getRevocable() != null) {
      try {
        joiner.add(String.format("%srevocable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRevocable()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `signatureScheme` to the URL query string
    if (getSignatureScheme() != null) {
      try {
        joiner.add(String.format("%ssignatureScheme%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSignatureScheme()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

