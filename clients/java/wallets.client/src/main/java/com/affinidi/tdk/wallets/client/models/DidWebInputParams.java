/*
 * CloudWalletEssentials
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.wallets.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.wallets.client.JSON;

/**
 * Additional params for did method web
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-24T23:18:52.625894528Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class DidWebInputParams {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets didMethod
   */
  @JsonAdapter(DidMethodEnum.Adapter.class)
  public enum DidMethodEnum {
    WEB("web");

    private String value;

    DidMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DidMethodEnum fromValue(String value) {
      for (DidMethodEnum b : DidMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DidMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DidMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DidMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DidMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DidMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DID_METHOD = "didMethod";
  @SerializedName(SERIALIZED_NAME_DID_METHOD)
  private DidMethodEnum didMethod;

  public static final String SERIALIZED_NAME_DID_WEB_URL = "didWebUrl";
  @SerializedName(SERIALIZED_NAME_DID_WEB_URL)
  private String didWebUrl;

  public DidWebInputParams() {
  }

  public DidWebInputParams name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the wallet
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DidWebInputParams description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the wallet
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DidWebInputParams didMethod(DidMethodEnum didMethod) {
    this.didMethod = didMethod;
    return this;
  }

  /**
   * Get didMethod
   * @return didMethod
   */
  @javax.annotation.Nonnull
  public DidMethodEnum getDidMethod() {
    return didMethod;
  }

  public void setDidMethod(DidMethodEnum didMethod) {
    this.didMethod = didMethod;
  }


  public DidWebInputParams didWebUrl(String didWebUrl) {
    this.didWebUrl = didWebUrl;
    return this;
  }

  /**
   * If the did method is web, this is the URL of the did
   * @return didWebUrl
   */
  @javax.annotation.Nonnull
  public String getDidWebUrl() {
    return didWebUrl;
  }

  public void setDidWebUrl(String didWebUrl) {
    this.didWebUrl = didWebUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DidWebInputParams didWebInputParams = (DidWebInputParams) o;
    return Objects.equals(this.name, didWebInputParams.name) &&
        Objects.equals(this.description, didWebInputParams.description) &&
        Objects.equals(this.didMethod, didWebInputParams.didMethod) &&
        Objects.equals(this.didWebUrl, didWebInputParams.didWebUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, didMethod, didWebUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DidWebInputParams {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    didMethod: ").append(toIndentedString(didMethod)).append("\n");
    sb.append("    didWebUrl: ").append(toIndentedString(didWebUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("didMethod");
    openapiFields.add("didWebUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("didMethod");
    openapiRequiredFields.add("didWebUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DidWebInputParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DidWebInputParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DidWebInputParams is not found in the empty JSON string", DidWebInputParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DidWebInputParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DidWebInputParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DidWebInputParams.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("didMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `didMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("didMethod").toString()));
      }
      // validate the required field `didMethod`
      DidMethodEnum.validateJsonElement(jsonObj.get("didMethod"));
      if (!jsonObj.get("didWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `didWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("didWebUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DidWebInputParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DidWebInputParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DidWebInputParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DidWebInputParams.class));

       return (TypeAdapter<T>) new TypeAdapter<DidWebInputParams>() {
           @Override
           public void write(JsonWriter out, DidWebInputParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DidWebInputParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DidWebInputParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DidWebInputParams
   * @throws IOException if the JSON string is invalid with respect to DidWebInputParams
   */
  public static DidWebInputParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DidWebInputParams.class);
  }

  /**
   * Convert an instance of DidWebInputParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

