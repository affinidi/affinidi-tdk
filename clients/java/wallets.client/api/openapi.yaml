openapi: 3.0.3
info:
  contact:
    email: info@affinidi.com
    name: Affinidi
    url: https://github.com/affinidi/affinidi-tdk
  license:
    name: Apache-2.0
    url: https://github.com/affinidi/affinidi-tdk/blob/main/LICENSE
  title: CloudWalletEssentials
  version: 1.0.0
externalDocs:
  description: Affinidi Documentation Website
  url: https://docs.affinidi.com/dev-tools/affinidi-tdk/clients/wallets
servers:
  - url: https://apse1.api.affinidi.io/cwe
security:
  - ProjectTokenAuth: []
tags:
  - description: Operations on the wallet
    name: wallet
  - description: Operations on the wallet's messages
    name: message
paths:
  /v1/wallets:
    get:
      description: lists all wallets
      operationId: listWallets
      parameters:
        - explode: true
          in: query
          name: didType
          required: false
          schema:
            enum:
              - WEB
              - KEY
            type: string
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletsListDto'
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationForbiddenError'
          description: ForbiddenError
      security:
        - ProjectTokenAuth: []
      tags:
        - wallet
      x-accepts:
        - application/json
    post:
      description: creates a wallet
      operationId: createWallet
      requestBody:
        $ref: '#/components/requestBodies/CreateWallet'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWalletResponse'
          description: Created
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationForbiddenError'
          description: ForbiddenError
      security:
        - ProjectTokenAuth: []
      tags:
        - wallet
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/wallets/{walletId}/sign-credential:
    post:
      description: signs credential with the wallet
      operationId: signCredential
      parameters:
        - description: id of the wallet
          explode: false
          in: path
          name: walletId
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        $ref: '#/components/requestBodies/SignCredential'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignCredentialResultDto'
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signCredential_400_response'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationForbiddenError'
          description: ForbiddenError
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: NotFoundError
      security:
        - ProjectTokenAuth: []
      tags:
        - wallet
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/wallets/{walletId}:
    delete:
      description: delete wallet by walletId
      operationId: deleteWallet
      parameters:
        - description: id of the wallet
          explode: false
          in: path
          name: walletId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '204':
          description: Deleted
      security:
        - ProjectTokenAuth: []
      tags:
        - wallet
      x-accepts:
        - application/json
    get:
      description: get wallet details using wallet Id.
      operationId: getWallet
      parameters:
        - description: id of the wallet
          explode: false
          in: path
          name: walletId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDto'
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationForbiddenError'
          description: ForbiddenError
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: NotFoundError
      security:
        - ProjectTokenAuth: []
      tags:
        - wallet
      x-accepts:
        - application/json
    patch:
      description: update wallet details using wallet Id.
      operationId: updateWallet
      parameters:
        - description: id of the wallet
          explode: false
          in: path
          name: walletId
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateWallet'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDto'
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
      security:
        - ProjectTokenAuth: []
      tags:
        - wallet
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/wallets/{walletId}/revocation-list/{listId}:
    get:
      deprecated: true
      description:
        Get revocation list 2020 Credential (required to check if VC revoked).
        It is a public endpoint.
      operationId: getRevocationListCredential
      parameters:
        - explode: false
          in: path
          name: listId
          required: true
          schema:
            type: string
          style: simple
        - description: id of the wallet
          explode: false
          in: path
          name: walletId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRevocationListCredentialResultDto'
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationForbiddenError'
          description: ForbiddenError
      summary: Return revocation list credential.
      tags:
        - revocation
      x-accepts:
        - application/json
  /v1/wallets/{walletId}/revoke:
    post:
      description:
        Update index/credetial at appropriate revocation list (set revoken
        is true).
      operationId: revokeCredential
      parameters:
        - description: id of the wallet
          explode: false
          in: path
          name: walletId
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        $ref: '#/components/requestBodies/RevokeCredential'
      responses:
        '200':
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationForbiddenError'
          description: ForbiddenError
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotFoundError'
          description: NotFoundError
      security:
        - ProjectTokenAuth: []
      summary: Revoke Credential.
      tags:
        - revocation
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/wallets/{walletId}/sign-jwt:
    post:
      description: signs a jwt token with the wallet
      operationId: signJwtToken
      parameters:
        - description: id of the wallet.
          explode: false
          in: path
          name: walletId
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        $ref: '#/components/requestBodies/SignJwtToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignJwtTokenOK'
          description: SignJwtTokenOK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationForbiddenError'
          description: ForbiddenError
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: NotFoundError
      security:
        - ProjectTokenAuth: []
      tags:
        - wallet
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/projects/{projectId}/wallets/{walletId}/revocation-statuses/{statusId}:
    get:
      description: Get revocation status list as RevocationListCredential
      operationId: getRevocationCredentialStatus
      parameters:
        - description: Description for projectId.
          explode: false
          in: path
          name: projectId
          required: true
          schema:
            type: string
          style: simple
        - description: Description for walletId.
          explode: false
          in: path
          name: walletId
          required: true
          schema:
            type: string
          style: simple
        - description: Description for statusId.
          explode: false
          in: path
          name: statusId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRevocationListCredentialResultDto'
          description: GetRevocationCredentialStatusOK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: NotFoundError
      tags:
        - revocation
      x-accepts:
        - application/json
components:
  examples: {}
  headers: {}
  requestBodies:
    CreateWallet:
      content:
        application/json:
          examples:
            exampleWithKey:
              summary: DID using `key` method
              value:
                name: AliceWallet
                description: Personal wallet using did:key
                didMethod: key
            exampleWithWeb:
              summary: DID using `web` method
              value:
                name: CorpWallet
                description: Wallet for corporate identity
                didMethod: web
                didWebUrl: example.com
          schema:
            $ref: '#/components/schemas/CreateWalletInput'
      description: CreateWallet
      required: false
    UpdateWallet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateWalletInput'
      description: UpdateWallet
      required: true
    SignCredential:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignCredentialInputDto'
      description: SignCredential
      required: true
    signCredentialsDm1Ld:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignCredentialsDm1LdInputDto'
      description: signCredentialsDm1Ld
      required: true
    signCredentialsDm2Ld:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignCredentialsDm2LdInputDto'
      description: signCredentialsDm2Ld
      required: true
    SignCredentialsDm2SdJwt:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignCredentialsDm2SdJwtInputDto'
      description: SignCredentialsDm1SdJwt
      required: true
    signCredentialsDm1jwt:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignCredentialsDm1JwtInputDto'
      description: signCredentialsDm1jwt
      required: true
    RevokeCredential:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RevokeCredentialInput'
      description: RevokeCredential
      required: true
    SignJwtToken:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignJwtToken'
      description: SignJwtToken
      required: true
  responses:
    CreateWalletCreated:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateWalletResponse'
      description: Created
    ListWalletsOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletsListDto'
      description: Ok
    SignCredentialOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignCredentialResultDto'
      description: Ok
    SignCredentialsDm2SdJwtOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignCredentialsDm2SdJwtResultDto'
      description: Ok
    SignCredentialsDm1JwtOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignCredentialsDm1JwtResultDto'
      description: Ok
    SignCredentialsDm2LdOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignCredentialsDm2LdResultDto'
      description: Ok
    SignCredentialsDm1LdOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignCredentialsDm1LdResultDto'
      description: Ok
    GetWalletOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletDto'
      description: Ok
    UpdateWalletOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletDto'
      description: Ok
    GetRevocationListCredentialOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetRevocationListCredentialResultDto'
      description: Ok
    SignJwtTokenOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignJwtTokenOK'
      description: SignJwtTokenOK
    GetRevocationCredentialStatusOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetRevocationListCredentialResultDto'
      description: GetRevocationCredentialStatusOK
    CreateWalletForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationForbiddenError'
      description: ForbiddenError
    ListWalletsBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    ListWalletsForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationForbiddenError'
      description: ForbiddenError
    SignCredentialBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/signCredential_400_response'
      description: BadRequestError
    SignCredentialForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationForbiddenError'
      description: ForbiddenError
    SignCredentialNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
      description: NotFoundError
    GetWalletBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    GetWalletForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationForbiddenError'
      description: ForbiddenError
    GetWalletNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
      description: NotFoundError
    UpdateWalletBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    GetRevocationListCredentialBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    GetRevocationListCredentialForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationForbiddenError'
      description: ForbiddenError
    RevokeCredentialBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    RevokeCredentialForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationForbiddenError'
      description: ForbiddenError
    RevokeCredentialNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityNotFoundError'
      description: NotFoundError
    SignJwtTokenBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    SignJwtTokenForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationForbiddenError'
      description: ForbiddenError
    SignJwtTokenNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
      description: NotFoundError
    GetRevocationCredentialStatusNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
      description: NotFoundError
  schemas:
    CreateWalletInput:
      additionalProperties: false
      example:
        didMethod: key
        didWebUrl: didWebUrl
        name: name
        description: description
      properties:
        name:
          description: The name of the wallet
          type: string
        description:
          description: The description of the wallet
          type: string
        didMethod:
          description: Define how DID of your wallet is created and resolved
          enum:
            - key
            - web
          type: string
        didWebUrl:
          description: URL of the DID. Required if the did method is web
          maxLength: 300
          pattern:
            "^(?!:\\/\\/)([a-zA-Z0-9\\-\\.]+)(:[0-9]+)?(\\/[a-zA-Z0-9\\-\\\
            /]*)?$"
          type: string
      required:
        - didMethod
      type: object
    UpdateWalletInput:
      additionalProperties: false
      description: Update wallet input params
      example:
        name: name
        description: description
      properties:
        name:
          description: The name of the wallet
          type: string
        description:
          description: The description of the wallet
          type: string
      type: object
    EmptyInput:
      description: Empty input
      type: object
    WalletDto:
      additionalProperties: false
      description: wallet dto
      example:
        createdAt: createdAt
        keys:
          - ari: ari
            id: id
          - ari: ari
            id: id
        modifiedAt: modifiedAt
        name: name
        description: description
        ari: ari
        id: id
        didDocument: '{}'
        did: did
      properties:
        id:
          description: id of the wallet in uuidV4 format
          type: string
        did:
          description: did of the wallet
          type: string
        name:
          description: The name of the wallet
          type: string
        description:
          description: The description of the wallet
          type: string
        didDocument:
          description: did document of the wallet
          type: object
        ari:
          description: ARI of the wallet
          type: string
        keys:
          items:
            $ref: '#/components/schemas/WalletDto_keys_inner'
          type: array
        createdAt:
          type: string
        modifiedAt:
          type: string
      type: object
    WalletsListDto:
      description: list of wallets
      example:
        wallets:
          - createdAt: createdAt
            keys:
              - ari: ari
                id: id
              - ari: ari
                id: id
            modifiedAt: modifiedAt
            name: name
            description: description
            ari: ari
            id: id
            didDocument: '{}'
            did: did
          - createdAt: createdAt
            keys:
              - ari: ari
                id: id
              - ari: ari
                id: id
            modifiedAt: modifiedAt
            name: name
            description: description
            ari: ari
            id: id
            didDocument: '{}'
            did: did
      properties:
        wallets:
          items:
            $ref: '#/components/schemas/WalletDto'
          type: array
      type: object
    CreateWalletResponse:
      additionalProperties: false
      description: wallet dto
      example:
        wallet:
          createdAt: createdAt
          keys:
            - ari: ari
              id: id
            - ari: ari
              id: id
          modifiedAt: modifiedAt
          name: name
          description: description
          ari: ari
          id: id
          didDocument: '{}'
          did: did
      properties:
        wallet:
          $ref: '#/components/schemas/WalletDto'
      type: object
    SignCredentialInputDto:
      additionalProperties: false
      description: DTO contains params to sign credential
      example:
        unsignedCredential: '{}'
        credentialFormat: ldp_vc
        unsignedCredentialParams:
          jsonLdContextUrl: jsonLdContextUrl
          credentialSubject:
            key: ''
          typeName: typeName
          holderDid: holderDid
          expiresAt: expiresAt
          jsonSchemaUrl: jsonSchemaUrl
        revocable: true
      properties:
        unsignedCredential:
          description:
            Unsigned Credential. If provided "unsignedCredentialParams"
            is not accepted
          type: object
        revocable:
          type: boolean
        credentialFormat:
          enum:
            - ldp_vc
            - jwt_vc_json-ld
            - sd_jwt_vc_json-ld
          type: string
        unsignedCredentialParams:
          $ref: '#/components/schemas/SignCredentialInputDto_unsignedCredentialParams'
      type: object
    SignCredentialsDm1LdInputDto:
      additionalProperties: false
      description: DTO contains params to sign credential
      properties:
        unsignedCredential:
          description: Unsigned Credential in Dm1 format
          type: object
        revocable:
          type: boolean
      required:
        - unsignedCredential
      type: object
    SignCredentialsDm2LdInputDto:
      additionalProperties: false
      description: DTO contains params to sign credential
      properties:
        unsignedCredential:
          description: 'Unsigned Credential in Dm2 format '
          type: object
        revocable:
          type: boolean
      required:
        - unsignedCredential
      type: object
    SignCredentialsDm2SdJwtInputDto:
      additionalProperties: false
      description: DTO contains params to sign credential
      properties:
        unsignedCredential:
          description: Unsigned Credential in Dm2 format
          type: object
        revocable:
          type: boolean
        disclosureFrame:
          type: object
      required:
        - disclosureFrame
        - unsignedCredential
      type: object
    SignCredentialsDm1JwtInputDto:
      additionalProperties: false
      description: DTO contains params to sign credential
      properties:
        unsignedCredential:
          description: Unsigned Credential in Dm1 format
          type: object
        revocable:
          type: boolean
      required:
        - unsignedCredential
      type: object
    GetRevocationListCredentialResultDto:
      description: DTO contains revocation list credential
      example:
        revocationListCredential: '{}'
      properties:
        revocationListCredential:
          type: object
      required:
        - revocationListCredential
      type: object
    SignCredentialResultDto:
      description: DTO contains signed credential
      example:
        signedCredential:
          key: ''
      properties:
        signedCredential:
          additionalProperties: true
          type: object
      required:
        - signedCredential
      type: object
    SignCredentialsDm2SdJwtResultDto:
      additionalProperties: false
      description: DTO contains signed credential
      properties:
        credential:
          description: Issued selective disclosure SD in jwt format
          type: string
      required:
        - credential
      type: object
    SignCredentialsDm1JwtResultDto:
      additionalProperties: false
      description: DTO contains signed credential
      properties:
        credential:
          description: Signed credential in DM2 jwt format
          type: string
      required:
        - credential
      type: object
    SignCredentialsDm2LdResultDto:
      additionalProperties: false
      description: DTO contains signed credential
      properties:
        credential:
          description: Signed credential can be in Dm2Ld format
          type: object
      required:
        - credential
      type: object
    SignCredentialsDm1LdResultDto:
      additionalProperties: false
      description: DTO contains signed credential
      properties:
        credential:
          description: Signed credential can be in Dm1Ld format
          type: object
      required:
        - credential
      type: object
    ServiceErrorResponse:
      additionalProperties: false
      properties:
        debugId:
          description: unique id for correlating this specific error to logs
          format: uuid
          type: string
        name:
          description: name of the error
          type: string
        code:
          description: backwards compatible Affinidi error code
          type: string
        details:
          items:
            $ref: '#/components/schemas/ServiceErrorResponse_details_inner'
          type: array
      required:
        - code
        - debugId
        - name
      type: object
    RevokeCredentialInput:
      additionalProperties: false
      example:
        credentialId: credentialId
        revocationReason: revocationReason
      properties:
        revocationReason:
          nullable: true
          type: string
        credentialId:
          nullable: false
          type: string
      type: object
    NotFoundError:
      additionalProperties: false
      example:
        traceId: traceId
        name: NotFoundError
        details:
          - issue: issue
            field: field
            location: location
            value: value
          - issue: issue
            field: field
            location: location
            value: value
        message: 'Not found: ${param}.'
        httpStatusCode: 0.8008281904610115
      properties:
        name:
          enum:
            - NotFoundError
          type: string
        message:
          enum:
            - 'Not found: ${param}.'
          type: string
        httpStatusCode:
          enum:
            - 404
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/ServiceErrorResponse_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    InvalidParameterError:
      additionalProperties: false
      example:
        traceId: traceId
        name: InvalidParameterError
        details:
          - issue: issue
            field: field
            location: location
            value: value
          - issue: issue
            field: field
            location: location
            value: value
        message: 'Invalid parameter: ${param}.'
        httpStatusCode: 0.8008281904610115
      properties:
        name:
          enum:
            - InvalidParameterError
          type: string
        message:
          enum:
            - 'Invalid parameter: ${param}.'
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/ServiceErrorResponse_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    InvalidDidParameterError:
      additionalProperties: false
      properties:
        name:
          enum:
            - InvalidDidParameterError
          type: string
        message:
          enum:
            - Given did in field toDid is invalid. Use only resolvable form of did.
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/ServiceErrorResponse_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    EntityNotFoundError:
      additionalProperties: false
      example:
        traceId: traceId
        name: EntityNotFoundError
        details:
          - issue: issue
            field: field
            location: location
            value: value
          - issue: issue
            field: field
            location: location
            value: value
        message: Entity not found
        httpStatusCode: 0.8008281904610115
      properties:
        name:
          enum:
            - EntityNotFoundError
          type: string
        message:
          enum:
            - Entity not found
          type: string
        httpStatusCode:
          enum:
            - 404
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/ServiceErrorResponse_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    KeyNotFoundError:
      additionalProperties: false
      properties:
        name:
          enum:
            - KeyNotFoundError
          type: string
        message:
          enum:
            - Key not found
          type: string
        httpStatusCode:
          enum:
            - 500
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/ServiceErrorResponse_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    OperationForbiddenError:
      additionalProperties: false
      example:
        traceId: traceId
        name: OperationForbiddenError
        details:
          - issue: issue
            field: field
            location: location
            value: value
          - issue: issue
            field: field
            location: location
            value: value
        message: 'Operation forbidden: ${param}.'
        httpStatusCode: 6.027456183070403
      properties:
        name:
          enum:
            - OperationForbiddenError
          type: string
        message:
          enum:
            - 'Operation forbidden: ${param}.'
          type: string
        httpStatusCode:
          enum:
            - 403
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/ServiceErrorResponse_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    SignJwtToken:
      additionalProperties: false
      description: DTO contains parts of JWT to be signed
      example:
        payload: '{}'
        header: '{}'
      properties:
        header:
          type: object
        payload:
          type: object
      required:
        - header
        - payload
      type: object
    SignJwtTokenOK:
      additionalProperties: false
      example:
        signedJwt: signedJwt
      properties:
        signedJwt:
          type: string
      type: object
    GetRevocationCredentialStatusOK:
      description: DTO contains revocation list credential
      properties:
        revocationListCredential:
          type: object
      required:
        - revocationListCredential
      type: object
    SigningFailedError:
      additionalProperties: false
      properties:
        name:
          enum:
            - SigningFailedError
          type: string
        message:
          enum:
            - Signing failed.
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/ServiceErrorResponse_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    signCredential_400_response:
      oneOf:
        - $ref: '#/components/schemas/InvalidParameterError'
        - $ref: '#/components/schemas/SigningFailedError'
    WalletDto_keys_inner:
      example:
        ari: ari
        id: id
      properties:
        id:
          description: id of linked key
          type: string
        ari:
          description: ari of linked key
          type: string
      type: object
    SignCredentialInputDto_unsignedCredentialParams:
      additionalProperties: false
      description:
        unsignedCredentialParams. Used to build an unsigned credential
        before the signing. This param is not accepted when "unsignedCredential" is
        given
      example:
        jsonLdContextUrl: jsonLdContextUrl
        credentialSubject:
          key: ''
        typeName: typeName
        holderDid: holderDid
        expiresAt: expiresAt
        jsonSchemaUrl: jsonSchemaUrl
      properties:
        jsonLdContextUrl:
          type: string
        jsonSchemaUrl:
          type: string
        typeName:
          type: string
        credentialSubject:
          additionalProperties: true
          type: object
        holderDid:
          pattern: ^did:.*$
          type: string
        expiresAt:
          type: string
      required:
        - credentialSubject
        - expiresAt
        - holderDid
        - jsonLdContextUrl
        - jsonSchemaUrl
        - typeName
      type: object
    ServiceErrorResponse_details_inner:
      additionalProperties: false
      example:
        issue: issue
        field: field
        location: location
        value: value
      properties:
        issue:
          type: string
        field:
          type: string
        value:
          type: string
        location:
          type: string
      required:
        - issue
      type: object
  securitySchemes:
    ProjectTokenAuth:
      in: header
      name: authorization
      type: apiKey
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri: arn:aws:apigateway:ap-southeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-southeast-1:792104784284:function:iam-dev-ProjectTokenAuthorizerC83BEF45-elvJgVdbp078:live-alias/invocations
        authorizerResultTtlInSeconds: 0
x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: basic
