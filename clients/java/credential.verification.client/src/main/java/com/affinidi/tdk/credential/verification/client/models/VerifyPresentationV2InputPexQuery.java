/*
 * VerificationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.verification.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Presentation Exchange Query containing presentation definition and submission
 */
@JsonPropertyOrder({
  VerifyPresentationV2InputPexQuery.JSON_PROPERTY_PRESENTATION_DEFINITION,
  VerifyPresentationV2InputPexQuery.JSON_PROPERTY_PRESENTATION_SUBMISSION
})
@JsonTypeName("VerifyPresentationV2Input_pexQuery")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class VerifyPresentationV2InputPexQuery {
  public static final String JSON_PROPERTY_PRESENTATION_DEFINITION = "presentationDefinition";
  @javax.annotation.Nullable
  private Object presentationDefinition;

  public static final String JSON_PROPERTY_PRESENTATION_SUBMISSION = "presentationSubmission";
  @javax.annotation.Nullable
  private Object presentationSubmission;

  public VerifyPresentationV2InputPexQuery() {
  }

  public VerifyPresentationV2InputPexQuery presentationDefinition(@javax.annotation.Nullable Object presentationDefinition) {
    
    this.presentationDefinition = presentationDefinition;
    return this;
  }

  /**
   * Presentation definition for the verification request
   * @return presentationDefinition
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRESENTATION_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getPresentationDefinition() {
    return presentationDefinition;
  }


  @JsonProperty(JSON_PROPERTY_PRESENTATION_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPresentationDefinition(@javax.annotation.Nullable Object presentationDefinition) {
    this.presentationDefinition = presentationDefinition;
  }

  public VerifyPresentationV2InputPexQuery presentationSubmission(@javax.annotation.Nullable Object presentationSubmission) {
    
    this.presentationSubmission = presentationSubmission;
    return this;
  }

  /**
   * Presentation submission for the verification request
   * @return presentationSubmission
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRESENTATION_SUBMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getPresentationSubmission() {
    return presentationSubmission;
  }


  @JsonProperty(JSON_PROPERTY_PRESENTATION_SUBMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPresentationSubmission(@javax.annotation.Nullable Object presentationSubmission) {
    this.presentationSubmission = presentationSubmission;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyPresentationV2InputPexQuery verifyPresentationV2InputPexQuery = (VerifyPresentationV2InputPexQuery) o;
    return Objects.equals(this.presentationDefinition, verifyPresentationV2InputPexQuery.presentationDefinition) &&
        Objects.equals(this.presentationSubmission, verifyPresentationV2InputPexQuery.presentationSubmission);
  }

  @Override
  public int hashCode() {
    return Objects.hash(presentationDefinition, presentationSubmission);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyPresentationV2InputPexQuery {\n");
    sb.append("    presentationDefinition: ").append(toIndentedString(presentationDefinition)).append("\n");
    sb.append("    presentationSubmission: ").append(toIndentedString(presentationSubmission)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `presentationDefinition` to the URL query string
    if (getPresentationDefinition() != null) {
      try {
        joiner.add(String.format("%spresentationDefinition%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPresentationDefinition()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `presentationSubmission` to the URL query string
    if (getPresentationSubmission() != null) {
      try {
        joiner.add(String.format("%spresentationSubmission%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPresentationSubmission()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

