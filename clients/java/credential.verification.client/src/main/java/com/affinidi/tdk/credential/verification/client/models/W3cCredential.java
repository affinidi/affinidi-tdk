/*
 * VerificationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.verification.client.models;

import java.util.Objects;
import com.affinidi.tdk.credential.verification.client.models.W3cCredentialCredentialSchema;
import com.affinidi.tdk.credential.verification.client.models.W3cCredentialCredentialSubject;
import com.affinidi.tdk.credential.verification.client.models.W3cCredentialHolder;
import com.affinidi.tdk.credential.verification.client.models.W3cCredentialStatus;
import com.affinidi.tdk.credential.verification.client.models.W3cPresentationContext;
import com.affinidi.tdk.credential.verification.client.models.W3cProof;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.verification.client.JSON;

/**
 * W3cCredential
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-24T23:18:26.639121422Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class W3cCredential {
  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  private W3cPresentationContext atContext;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<String> type = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOLDER = "holder";
  @SerializedName(SERIALIZED_NAME_HOLDER)
  private W3cCredentialHolder holder;

  public static final String SERIALIZED_NAME_CREDENTIAL_SUBJECT = "credentialSubject";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_SUBJECT)
  private W3cCredentialCredentialSubject credentialSubject;

  public static final String SERIALIZED_NAME_CREDENTIAL_STATUS = "credentialStatus";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_STATUS)
  private W3cCredentialStatus credentialStatus;

  public static final String SERIALIZED_NAME_ISSUANCE_DATE = "issuanceDate";
  @SerializedName(SERIALIZED_NAME_ISSUANCE_DATE)
  private String issuanceDate;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private String expirationDate;

  public static final String SERIALIZED_NAME_PROOF = "proof";
  @SerializedName(SERIALIZED_NAME_PROOF)
  private W3cProof proof;

  public static final String SERIALIZED_NAME_CREDENTIAL_SCHEMA = "credentialSchema";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_SCHEMA)
  private W3cCredentialCredentialSchema credentialSchema;

  public W3cCredential() {
  }

  public W3cCredential atContext(W3cPresentationContext atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nonnull
  public W3cPresentationContext getAtContext() {
    return atContext;
  }

  public void setAtContext(W3cPresentationContext atContext) {
    this.atContext = atContext;
  }


  public W3cCredential id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public W3cCredential type(List<String> type) {
    this.type = type;
    return this;
  }

  public W3cCredential addTypeItem(String typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public List<String> getType() {
    return type;
  }

  public void setType(List<String> type) {
    this.type = type;
  }


  public W3cCredential holder(W3cCredentialHolder holder) {
    this.holder = holder;
    return this;
  }

  /**
   * Get holder
   * @return holder
   */
  @javax.annotation.Nullable
  public W3cCredentialHolder getHolder() {
    return holder;
  }

  public void setHolder(W3cCredentialHolder holder) {
    this.holder = holder;
  }


  public W3cCredential credentialSubject(W3cCredentialCredentialSubject credentialSubject) {
    this.credentialSubject = credentialSubject;
    return this;
  }

  /**
   * Get credentialSubject
   * @return credentialSubject
   */
  @javax.annotation.Nonnull
  public W3cCredentialCredentialSubject getCredentialSubject() {
    return credentialSubject;
  }

  public void setCredentialSubject(W3cCredentialCredentialSubject credentialSubject) {
    this.credentialSubject = credentialSubject;
  }


  public W3cCredential credentialStatus(W3cCredentialStatus credentialStatus) {
    this.credentialStatus = credentialStatus;
    return this;
  }

  /**
   * Get credentialStatus
   * @return credentialStatus
   */
  @javax.annotation.Nullable
  public W3cCredentialStatus getCredentialStatus() {
    return credentialStatus;
  }

  public void setCredentialStatus(W3cCredentialStatus credentialStatus) {
    this.credentialStatus = credentialStatus;
  }


  public W3cCredential issuanceDate(String issuanceDate) {
    this.issuanceDate = issuanceDate;
    return this;
  }

  /**
   * Get issuanceDate
   * @return issuanceDate
   */
  @javax.annotation.Nonnull
  public String getIssuanceDate() {
    return issuanceDate;
  }

  public void setIssuanceDate(String issuanceDate) {
    this.issuanceDate = issuanceDate;
  }


  public W3cCredential issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   * @return issuer
   */
  @javax.annotation.Nonnull
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public W3cCredential expirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public String getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }


  public W3cCredential proof(W3cProof proof) {
    this.proof = proof;
    return this;
  }

  /**
   * Get proof
   * @return proof
   */
  @javax.annotation.Nonnull
  public W3cProof getProof() {
    return proof;
  }

  public void setProof(W3cProof proof) {
    this.proof = proof;
  }


  public W3cCredential credentialSchema(W3cCredentialCredentialSchema credentialSchema) {
    this.credentialSchema = credentialSchema;
    return this;
  }

  /**
   * Get credentialSchema
   * @return credentialSchema
   */
  @javax.annotation.Nullable
  public W3cCredentialCredentialSchema getCredentialSchema() {
    return credentialSchema;
  }

  public void setCredentialSchema(W3cCredentialCredentialSchema credentialSchema) {
    this.credentialSchema = credentialSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    W3cCredential w3cCredential = (W3cCredential) o;
    return Objects.equals(this.atContext, w3cCredential.atContext) &&
        Objects.equals(this.id, w3cCredential.id) &&
        Objects.equals(this.type, w3cCredential.type) &&
        Objects.equals(this.holder, w3cCredential.holder) &&
        Objects.equals(this.credentialSubject, w3cCredential.credentialSubject) &&
        Objects.equals(this.credentialStatus, w3cCredential.credentialStatus) &&
        Objects.equals(this.issuanceDate, w3cCredential.issuanceDate) &&
        Objects.equals(this.issuer, w3cCredential.issuer) &&
        Objects.equals(this.expirationDate, w3cCredential.expirationDate) &&
        Objects.equals(this.proof, w3cCredential.proof) &&
        Objects.equals(this.credentialSchema, w3cCredential.credentialSchema);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(atContext, id, type, holder, credentialSubject, credentialStatus, issuanceDate, issuer, expirationDate, proof, credentialSchema);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class W3cCredential {\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    credentialSubject: ").append(toIndentedString(credentialSubject)).append("\n");
    sb.append("    credentialStatus: ").append(toIndentedString(credentialStatus)).append("\n");
    sb.append("    issuanceDate: ").append(toIndentedString(issuanceDate)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    proof: ").append(toIndentedString(proof)).append("\n");
    sb.append("    credentialSchema: ").append(toIndentedString(credentialSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@context");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("holder");
    openapiFields.add("credentialSubject");
    openapiFields.add("credentialStatus");
    openapiFields.add("issuanceDate");
    openapiFields.add("issuer");
    openapiFields.add("expirationDate");
    openapiFields.add("proof");
    openapiFields.add("credentialSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@context");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("credentialSubject");
    openapiRequiredFields.add("issuanceDate");
    openapiRequiredFields.add("issuer");
    openapiRequiredFields.add("proof");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to W3cCredential
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!W3cCredential.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in W3cCredential is not found in the empty JSON string", W3cCredential.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!W3cCredential.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `W3cCredential` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : W3cCredential.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `@context`
      W3cPresentationContext.validateJsonElement(jsonObj.get("@context"));
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("type") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `holder`
      if (jsonObj.get("holder") != null && !jsonObj.get("holder").isJsonNull()) {
        W3cCredentialHolder.validateJsonElement(jsonObj.get("holder"));
      }
      // validate the required field `credentialSubject`
      W3cCredentialCredentialSubject.validateJsonElement(jsonObj.get("credentialSubject"));
      // validate the optional field `credentialStatus`
      if (jsonObj.get("credentialStatus") != null && !jsonObj.get("credentialStatus").isJsonNull()) {
        W3cCredentialStatus.validateJsonElement(jsonObj.get("credentialStatus"));
      }
      if (!jsonObj.get("issuanceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuanceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuanceDate").toString()));
      }
      if (!jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("expirationDate") != null && !jsonObj.get("expirationDate").isJsonNull()) && !jsonObj.get("expirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationDate").toString()));
      }
      // validate the required field `proof`
      W3cProof.validateJsonElement(jsonObj.get("proof"));
      // validate the optional field `credentialSchema`
      if (jsonObj.get("credentialSchema") != null && !jsonObj.get("credentialSchema").isJsonNull()) {
        W3cCredentialCredentialSchema.validateJsonElement(jsonObj.get("credentialSchema"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!W3cCredential.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'W3cCredential' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<W3cCredential> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(W3cCredential.class));

       return (TypeAdapter<T>) new TypeAdapter<W3cCredential>() {
           @Override
           public void write(JsonWriter out, W3cCredential value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public W3cCredential read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of W3cCredential given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of W3cCredential
   * @throws IOException if the JSON string is invalid with respect to W3cCredential
   */
  public static W3cCredential fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, W3cCredential.class);
  }

  /**
   * Convert an instance of W3cCredential to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

