/*
 * VerificationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.verification.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.verification.client.JSON;

/**
 * HolderSubject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T23:18:57.822244051Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class HolderSubject {
  public static final String SERIALIZED_NAME_FIELD_ID = "field_id";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  private List<String> fieldId = new ArrayList<>();

  /**
   * Gets or Sets directive
   */
  @JsonAdapter(DirectiveEnum.Adapter.class)
  public enum DirectiveEnum {
    REQUIRED("required"),
    
    PREFERRED("preferred");

    private String value;

    DirectiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectiveEnum fromValue(String value) {
      for (DirectiveEnum b : DirectiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectiveEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectiveEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTIVE = "directive";
  @SerializedName(SERIALIZED_NAME_DIRECTIVE)
  private DirectiveEnum directive;

  public HolderSubject() {
  }

  public HolderSubject fieldId(List<String> fieldId) {
    this.fieldId = fieldId;
    return this;
  }

  public HolderSubject addFieldIdItem(String fieldIdItem) {
    if (this.fieldId == null) {
      this.fieldId = new ArrayList<>();
    }
    this.fieldId.add(fieldIdItem);
    return this;
  }

  /**
   * Get fieldId
   * @return fieldId
   */
  @javax.annotation.Nonnull
  public List<String> getFieldId() {
    return fieldId;
  }

  public void setFieldId(List<String> fieldId) {
    this.fieldId = fieldId;
  }


  public HolderSubject directive(DirectiveEnum directive) {
    this.directive = directive;
    return this;
  }

  /**
   * Get directive
   * @return directive
   */
  @javax.annotation.Nonnull
  public DirectiveEnum getDirective() {
    return directive;
  }

  public void setDirective(DirectiveEnum directive) {
    this.directive = directive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HolderSubject holderSubject = (HolderSubject) o;
    return Objects.equals(this.fieldId, holderSubject.fieldId) &&
        Objects.equals(this.directive, holderSubject.directive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldId, directive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HolderSubject {\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    directive: ").append(toIndentedString(directive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("field_id");
    openapiFields.add("directive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("field_id");
    openapiRequiredFields.add("directive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HolderSubject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HolderSubject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HolderSubject is not found in the empty JSON string", HolderSubject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HolderSubject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HolderSubject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HolderSubject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("field_id") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("field_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_id` to be an array in the JSON string but got `%s`", jsonObj.get("field_id").toString()));
      }
      if (!jsonObj.get("directive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directive").toString()));
      }
      // validate the required field `directive`
      DirectiveEnum.validateJsonElement(jsonObj.get("directive"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HolderSubject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HolderSubject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HolderSubject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HolderSubject.class));

       return (TypeAdapter<T>) new TypeAdapter<HolderSubject>() {
           @Override
           public void write(JsonWriter out, HolderSubject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HolderSubject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HolderSubject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HolderSubject
   * @throws IOException if the JSON string is invalid with respect to HolderSubject
   */
  public static HolderSubject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HolderSubject.class);
  }

  /**
   * Convert an instance of HolderSubject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

