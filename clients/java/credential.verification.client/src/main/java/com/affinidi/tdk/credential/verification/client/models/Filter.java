/*
 * VerificationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.verification.client.models;

import java.util.Objects;
import com.affinidi.tdk.credential.verification.client.models.FilterConst;
import com.affinidi.tdk.credential.verification.client.models.FilterItems;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.verification.client.JSON;

/**
 * Filter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-26T23:17:27.082124853Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class Filter {
  public static final String SERIALIZED_NAME_CONST = "_const";
  @SerializedName(SERIALIZED_NAME_CONST)
  private FilterConst _const;

  public static final String SERIALIZED_NAME_ENUM = "_enum";
  @SerializedName(SERIALIZED_NAME_ENUM)
  private List<FilterConst> _enum = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUSIVE_MINIMUM = "exclusiveMinimum";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_MINIMUM)
  private FilterConst exclusiveMinimum;

  public static final String SERIALIZED_NAME_EXCLUSIVE_MAXIMUM = "exclusiveMaximum";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_MAXIMUM)
  private FilterConst exclusiveMaximum;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_FORMAT_MAXIMUM = "formatMaximum";
  @SerializedName(SERIALIZED_NAME_FORMAT_MAXIMUM)
  private String formatMaximum;

  public static final String SERIALIZED_NAME_FORMAT_MINIMUM = "formatMinimum";
  @SerializedName(SERIALIZED_NAME_FORMAT_MINIMUM)
  private String formatMinimum;

  public static final String SERIALIZED_NAME_FORMAT_EXCLUSIVE_MAXIMUM = "formatExclusiveMaximum";
  @SerializedName(SERIALIZED_NAME_FORMAT_EXCLUSIVE_MAXIMUM)
  private String formatExclusiveMaximum;

  public static final String SERIALIZED_NAME_FORMAT_EXCLUSIVE_MINIMUM = "formatExclusiveMinimum";
  @SerializedName(SERIALIZED_NAME_FORMAT_EXCLUSIVE_MINIMUM)
  private String formatExclusiveMinimum;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "minLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength;

  public static final String SERIALIZED_NAME_MAX_LENGTH = "maxLength";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH)
  private Integer maxLength;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private FilterConst minimum;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private FilterConst maximum;

  public static final String SERIALIZED_NAME_NOT = "not";
  @SerializedName(SERIALIZED_NAME_NOT)
  private Object not;

  public static final String SERIALIZED_NAME_PATTERN = "pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  private String pattern;

  public static final String SERIALIZED_NAME_CONTAINS = "contains";
  @SerializedName(SERIALIZED_NAME_CONTAINS)
  private Filter contains;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private FilterItems items;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Filter() {
  }

  public Filter _const(FilterConst _const) {
    this._const = _const;
    return this;
  }

  /**
   * Get _const
   * @return _const
   */
  @javax.annotation.Nullable
  public FilterConst getConst() {
    return _const;
  }

  public void setConst(FilterConst _const) {
    this._const = _const;
  }


  public Filter _enum(List<FilterConst> _enum) {
    this._enum = _enum;
    return this;
  }

  public Filter addEnumItem(FilterConst _enumItem) {
    if (this._enum == null) {
      this._enum = new ArrayList<>();
    }
    this._enum.add(_enumItem);
    return this;
  }

  /**
   * Get _enum
   * @return _enum
   */
  @javax.annotation.Nullable
  public List<FilterConst> getEnum() {
    return _enum;
  }

  public void setEnum(List<FilterConst> _enum) {
    this._enum = _enum;
  }


  public Filter exclusiveMinimum(FilterConst exclusiveMinimum) {
    this.exclusiveMinimum = exclusiveMinimum;
    return this;
  }

  /**
   * Get exclusiveMinimum
   * @return exclusiveMinimum
   */
  @javax.annotation.Nullable
  public FilterConst getExclusiveMinimum() {
    return exclusiveMinimum;
  }

  public void setExclusiveMinimum(FilterConst exclusiveMinimum) {
    this.exclusiveMinimum = exclusiveMinimum;
  }


  public Filter exclusiveMaximum(FilterConst exclusiveMaximum) {
    this.exclusiveMaximum = exclusiveMaximum;
    return this;
  }

  /**
   * Get exclusiveMaximum
   * @return exclusiveMaximum
   */
  @javax.annotation.Nullable
  public FilterConst getExclusiveMaximum() {
    return exclusiveMaximum;
  }

  public void setExclusiveMaximum(FilterConst exclusiveMaximum) {
    this.exclusiveMaximum = exclusiveMaximum;
  }


  public Filter format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public Filter formatMaximum(String formatMaximum) {
    this.formatMaximum = formatMaximum;
    return this;
  }

  /**
   * Get formatMaximum
   * @return formatMaximum
   */
  @javax.annotation.Nullable
  public String getFormatMaximum() {
    return formatMaximum;
  }

  public void setFormatMaximum(String formatMaximum) {
    this.formatMaximum = formatMaximum;
  }


  public Filter formatMinimum(String formatMinimum) {
    this.formatMinimum = formatMinimum;
    return this;
  }

  /**
   * Get formatMinimum
   * @return formatMinimum
   */
  @javax.annotation.Nullable
  public String getFormatMinimum() {
    return formatMinimum;
  }

  public void setFormatMinimum(String formatMinimum) {
    this.formatMinimum = formatMinimum;
  }


  public Filter formatExclusiveMaximum(String formatExclusiveMaximum) {
    this.formatExclusiveMaximum = formatExclusiveMaximum;
    return this;
  }

  /**
   * Get formatExclusiveMaximum
   * @return formatExclusiveMaximum
   */
  @javax.annotation.Nullable
  public String getFormatExclusiveMaximum() {
    return formatExclusiveMaximum;
  }

  public void setFormatExclusiveMaximum(String formatExclusiveMaximum) {
    this.formatExclusiveMaximum = formatExclusiveMaximum;
  }


  public Filter formatExclusiveMinimum(String formatExclusiveMinimum) {
    this.formatExclusiveMinimum = formatExclusiveMinimum;
    return this;
  }

  /**
   * Get formatExclusiveMinimum
   * @return formatExclusiveMinimum
   */
  @javax.annotation.Nullable
  public String getFormatExclusiveMinimum() {
    return formatExclusiveMinimum;
  }

  public void setFormatExclusiveMinimum(String formatExclusiveMinimum) {
    this.formatExclusiveMinimum = formatExclusiveMinimum;
  }


  public Filter minLength(Integer minLength) {
    this.minLength = minLength;
    return this;
  }

  /**
   * Get minLength
   * @return minLength
   */
  @javax.annotation.Nullable
  public Integer getMinLength() {
    return minLength;
  }

  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public Filter maxLength(Integer maxLength) {
    this.maxLength = maxLength;
    return this;
  }

  /**
   * Get maxLength
   * @return maxLength
   */
  @javax.annotation.Nullable
  public Integer getMaxLength() {
    return maxLength;
  }

  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }


  public Filter minimum(FilterConst minimum) {
    this.minimum = minimum;
    return this;
  }

  /**
   * Get minimum
   * @return minimum
   */
  @javax.annotation.Nullable
  public FilterConst getMinimum() {
    return minimum;
  }

  public void setMinimum(FilterConst minimum) {
    this.minimum = minimum;
  }


  public Filter maximum(FilterConst maximum) {
    this.maximum = maximum;
    return this;
  }

  /**
   * Get maximum
   * @return maximum
   */
  @javax.annotation.Nullable
  public FilterConst getMaximum() {
    return maximum;
  }

  public void setMaximum(FilterConst maximum) {
    this.maximum = maximum;
  }


  public Filter not(Object not) {
    this.not = not;
    return this;
  }

  /**
   * Get not
   * @return not
   */
  @javax.annotation.Nullable
  public Object getNot() {
    return not;
  }

  public void setNot(Object not) {
    this.not = not;
  }


  public Filter pattern(String pattern) {
    this.pattern = pattern;
    return this;
  }

  /**
   * Get pattern
   * @return pattern
   */
  @javax.annotation.Nullable
  public String getPattern() {
    return pattern;
  }

  public void setPattern(String pattern) {
    this.pattern = pattern;
  }


  public Filter contains(Filter contains) {
    this.contains = contains;
    return this;
  }

  /**
   * Get contains
   * @return contains
   */
  @javax.annotation.Nullable
  public Filter getContains() {
    return contains;
  }

  public void setContains(Filter contains) {
    this.contains = contains;
  }


  public Filter items(FilterItems items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public FilterItems getItems() {
    return items;
  }

  public void setItems(FilterItems items) {
    this.items = items;
  }


  public Filter type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filter filter = (Filter) o;
    return Objects.equals(this._const, filter._const) &&
        Objects.equals(this._enum, filter._enum) &&
        Objects.equals(this.exclusiveMinimum, filter.exclusiveMinimum) &&
        Objects.equals(this.exclusiveMaximum, filter.exclusiveMaximum) &&
        Objects.equals(this.format, filter.format) &&
        Objects.equals(this.formatMaximum, filter.formatMaximum) &&
        Objects.equals(this.formatMinimum, filter.formatMinimum) &&
        Objects.equals(this.formatExclusiveMaximum, filter.formatExclusiveMaximum) &&
        Objects.equals(this.formatExclusiveMinimum, filter.formatExclusiveMinimum) &&
        Objects.equals(this.minLength, filter.minLength) &&
        Objects.equals(this.maxLength, filter.maxLength) &&
        Objects.equals(this.minimum, filter.minimum) &&
        Objects.equals(this.maximum, filter.maximum) &&
        Objects.equals(this.not, filter.not) &&
        Objects.equals(this.pattern, filter.pattern) &&
        Objects.equals(this.contains, filter.contains) &&
        Objects.equals(this.items, filter.items) &&
        Objects.equals(this.type, filter.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_const, _enum, exclusiveMinimum, exclusiveMaximum, format, formatMaximum, formatMinimum, formatExclusiveMaximum, formatExclusiveMinimum, minLength, maxLength, minimum, maximum, not, pattern, contains, items, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filter {\n");
    sb.append("    _const: ").append(toIndentedString(_const)).append("\n");
    sb.append("    _enum: ").append(toIndentedString(_enum)).append("\n");
    sb.append("    exclusiveMinimum: ").append(toIndentedString(exclusiveMinimum)).append("\n");
    sb.append("    exclusiveMaximum: ").append(toIndentedString(exclusiveMaximum)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    formatMaximum: ").append(toIndentedString(formatMaximum)).append("\n");
    sb.append("    formatMinimum: ").append(toIndentedString(formatMinimum)).append("\n");
    sb.append("    formatExclusiveMaximum: ").append(toIndentedString(formatExclusiveMaximum)).append("\n");
    sb.append("    formatExclusiveMinimum: ").append(toIndentedString(formatExclusiveMinimum)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    not: ").append(toIndentedString(not)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    contains: ").append(toIndentedString(contains)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_const");
    openapiFields.add("_enum");
    openapiFields.add("exclusiveMinimum");
    openapiFields.add("exclusiveMaximum");
    openapiFields.add("format");
    openapiFields.add("formatMaximum");
    openapiFields.add("formatMinimum");
    openapiFields.add("formatExclusiveMaximum");
    openapiFields.add("formatExclusiveMinimum");
    openapiFields.add("minLength");
    openapiFields.add("maxLength");
    openapiFields.add("minimum");
    openapiFields.add("maximum");
    openapiFields.add("not");
    openapiFields.add("pattern");
    openapiFields.add("contains");
    openapiFields.add("items");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Filter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Filter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Filter is not found in the empty JSON string", Filter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Filter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Filter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_const`
      if (jsonObj.get("_const") != null && !jsonObj.get("_const").isJsonNull()) {
        FilterConst.validateJsonElement(jsonObj.get("_const"));
      }
      if (jsonObj.get("_enum") != null && !jsonObj.get("_enum").isJsonNull()) {
        JsonArray jsonArray_enum = jsonObj.getAsJsonArray("_enum");
        if (jsonArray_enum != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_enum").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_enum` to be an array in the JSON string but got `%s`", jsonObj.get("_enum").toString()));
          }

          // validate the optional field `_enum` (array)
          for (int i = 0; i < jsonArray_enum.size(); i++) {
            FilterConst.validateJsonElement(jsonArray_enum.get(i));
          };
        }
      }
      // validate the optional field `exclusiveMinimum`
      if (jsonObj.get("exclusiveMinimum") != null && !jsonObj.get("exclusiveMinimum").isJsonNull()) {
        FilterConst.validateJsonElement(jsonObj.get("exclusiveMinimum"));
      }
      // validate the optional field `exclusiveMaximum`
      if (jsonObj.get("exclusiveMaximum") != null && !jsonObj.get("exclusiveMaximum").isJsonNull()) {
        FilterConst.validateJsonElement(jsonObj.get("exclusiveMaximum"));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("formatMaximum") != null && !jsonObj.get("formatMaximum").isJsonNull()) && !jsonObj.get("formatMaximum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatMaximum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatMaximum").toString()));
      }
      if ((jsonObj.get("formatMinimum") != null && !jsonObj.get("formatMinimum").isJsonNull()) && !jsonObj.get("formatMinimum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatMinimum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatMinimum").toString()));
      }
      if ((jsonObj.get("formatExclusiveMaximum") != null && !jsonObj.get("formatExclusiveMaximum").isJsonNull()) && !jsonObj.get("formatExclusiveMaximum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatExclusiveMaximum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatExclusiveMaximum").toString()));
      }
      if ((jsonObj.get("formatExclusiveMinimum") != null && !jsonObj.get("formatExclusiveMinimum").isJsonNull()) && !jsonObj.get("formatExclusiveMinimum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatExclusiveMinimum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatExclusiveMinimum").toString()));
      }
      // validate the optional field `minimum`
      if (jsonObj.get("minimum") != null && !jsonObj.get("minimum").isJsonNull()) {
        FilterConst.validateJsonElement(jsonObj.get("minimum"));
      }
      // validate the optional field `maximum`
      if (jsonObj.get("maximum") != null && !jsonObj.get("maximum").isJsonNull()) {
        FilterConst.validateJsonElement(jsonObj.get("maximum"));
      }
      if ((jsonObj.get("pattern") != null && !jsonObj.get("pattern").isJsonNull()) && !jsonObj.get("pattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pattern").toString()));
      }
      // validate the optional field `contains`
      if (jsonObj.get("contains") != null && !jsonObj.get("contains").isJsonNull()) {
        Filter.validateJsonElement(jsonObj.get("contains"));
      }
      // validate the optional field `items`
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        FilterItems.validateJsonElement(jsonObj.get("items"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Filter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Filter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Filter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Filter.class));

       return (TypeAdapter<T>) new TypeAdapter<Filter>() {
           @Override
           public void write(JsonWriter out, Filter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Filter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Filter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Filter
   * @throws IOException if the JSON string is invalid with respect to Filter
   */
  public static Filter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Filter.class);
  }

  /**
   * Convert an instance of Filter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

