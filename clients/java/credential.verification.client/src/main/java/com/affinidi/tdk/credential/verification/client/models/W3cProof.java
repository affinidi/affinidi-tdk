/*
 * VerificationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.verification.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.verification.client.JSON;

/**
 * W3cProof
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-07T23:18:15.989400204Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class W3cProof {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_VERIFICATION_METHOD = "verificationMethod";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_METHOD)
  private String verificationMethod;

  public static final String SERIALIZED_NAME_PROOF_PURPOSE = "proofPurpose";
  @SerializedName(SERIALIZED_NAME_PROOF_PURPOSE)
  private String proofPurpose;

  public static final String SERIALIZED_NAME_JWS = "jws";
  @SerializedName(SERIALIZED_NAME_JWS)
  private String jws;

  public static final String SERIALIZED_NAME_PROOF_VALUE = "proofValue";
  @SerializedName(SERIALIZED_NAME_PROOF_VALUE)
  private String proofValue;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public W3cProof() {
  }

  public W3cProof type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public W3cProof created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public W3cProof verificationMethod(String verificationMethod) {
    this.verificationMethod = verificationMethod;
    return this;
  }

  /**
   * Get verificationMethod
   * @return verificationMethod
   */
  @javax.annotation.Nonnull
  public String getVerificationMethod() {
    return verificationMethod;
  }

  public void setVerificationMethod(String verificationMethod) {
    this.verificationMethod = verificationMethod;
  }


  public W3cProof proofPurpose(String proofPurpose) {
    this.proofPurpose = proofPurpose;
    return this;
  }

  /**
   * Get proofPurpose
   * @return proofPurpose
   */
  @javax.annotation.Nonnull
  public String getProofPurpose() {
    return proofPurpose;
  }

  public void setProofPurpose(String proofPurpose) {
    this.proofPurpose = proofPurpose;
  }


  public W3cProof jws(String jws) {
    this.jws = jws;
    return this;
  }

  /**
   * Get jws
   * @return jws
   */
  @javax.annotation.Nullable
  public String getJws() {
    return jws;
  }

  public void setJws(String jws) {
    this.jws = jws;
  }


  public W3cProof proofValue(String proofValue) {
    this.proofValue = proofValue;
    return this;
  }

  /**
   * Get proofValue
   * @return proofValue
   */
  @javax.annotation.Nullable
  public String getProofValue() {
    return proofValue;
  }

  public void setProofValue(String proofValue) {
    this.proofValue = proofValue;
  }


  public W3cProof nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Get nonce
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    W3cProof w3cProof = (W3cProof) o;
    return Objects.equals(this.type, w3cProof.type) &&
        Objects.equals(this.created, w3cProof.created) &&
        Objects.equals(this.verificationMethod, w3cProof.verificationMethod) &&
        Objects.equals(this.proofPurpose, w3cProof.proofPurpose) &&
        Objects.equals(this.jws, w3cProof.jws) &&
        Objects.equals(this.proofValue, w3cProof.proofValue) &&
        Objects.equals(this.nonce, w3cProof.nonce);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, created, verificationMethod, proofPurpose, jws, proofValue, nonce);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class W3cProof {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    verificationMethod: ").append(toIndentedString(verificationMethod)).append("\n");
    sb.append("    proofPurpose: ").append(toIndentedString(proofPurpose)).append("\n");
    sb.append("    jws: ").append(toIndentedString(jws)).append("\n");
    sb.append("    proofValue: ").append(toIndentedString(proofValue)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("created");
    openapiFields.add("verificationMethod");
    openapiFields.add("proofPurpose");
    openapiFields.add("jws");
    openapiFields.add("proofValue");
    openapiFields.add("nonce");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("verificationMethod");
    openapiRequiredFields.add("proofPurpose");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to W3cProof
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!W3cProof.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in W3cProof is not found in the empty JSON string", W3cProof.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!W3cProof.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `W3cProof` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : W3cProof.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if (!jsonObj.get("verificationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationMethod").toString()));
      }
      if (!jsonObj.get("proofPurpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proofPurpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proofPurpose").toString()));
      }
      if ((jsonObj.get("jws") != null && !jsonObj.get("jws").isJsonNull()) && !jsonObj.get("jws").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jws` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jws").toString()));
      }
      if ((jsonObj.get("proofValue") != null && !jsonObj.get("proofValue").isJsonNull()) && !jsonObj.get("proofValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proofValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proofValue").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!W3cProof.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'W3cProof' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<W3cProof> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(W3cProof.class));

       return (TypeAdapter<T>) new TypeAdapter<W3cProof>() {
           @Override
           public void write(JsonWriter out, W3cProof value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public W3cProof read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of W3cProof given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of W3cProof
   * @throws IOException if the JSON string is invalid with respect to W3cProof
   */
  public static W3cProof fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, W3cProof.class);
  }

  /**
   * Convert an instance of W3cProof to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

