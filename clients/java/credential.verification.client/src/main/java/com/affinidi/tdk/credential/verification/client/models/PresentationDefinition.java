/*
 * VerificationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.verification.client.models;

import java.util.Objects;
import com.affinidi.tdk.credential.verification.client.models.Format;
import com.affinidi.tdk.credential.verification.client.models.FreeFormObject;
import com.affinidi.tdk.credential.verification.client.models.InputDescriptor;
import com.affinidi.tdk.credential.verification.client.models.SubmissionRequirement;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.verification.client.JSON;

/**
 * Presentation definition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-26T23:17:27.082124853Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class PresentationDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private Format format;

  public static final String SERIALIZED_NAME_SUBMISSION_REQUIREMENTS = "submission_requirements";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_REQUIREMENTS)
  private List<SubmissionRequirement> submissionRequirements = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT_DESCRIPTORS = "input_descriptors";
  @SerializedName(SERIALIZED_NAME_INPUT_DESCRIPTORS)
  private List<InputDescriptor> inputDescriptors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRAME = "frame";
  @SerializedName(SERIALIZED_NAME_FRAME)
  private FreeFormObject frame = new HashMap<>();

  public PresentationDefinition() {
  }

  public PresentationDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Definition id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PresentationDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Definition name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PresentationDefinition purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

  /**
   * Definition purpose
   * @return purpose
   */
  @javax.annotation.Nullable
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public PresentationDefinition format(Format format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public Format getFormat() {
    return format;
  }

  public void setFormat(Format format) {
    this.format = format;
  }


  public PresentationDefinition submissionRequirements(List<SubmissionRequirement> submissionRequirements) {
    this.submissionRequirements = submissionRequirements;
    return this;
  }

  public PresentationDefinition addSubmissionRequirementsItem(SubmissionRequirement submissionRequirementsItem) {
    if (this.submissionRequirements == null) {
      this.submissionRequirements = new ArrayList<>();
    }
    this.submissionRequirements.add(submissionRequirementsItem);
    return this;
  }

  /**
   * Get submissionRequirements
   * @return submissionRequirements
   */
  @javax.annotation.Nullable
  public List<SubmissionRequirement> getSubmissionRequirements() {
    return submissionRequirements;
  }

  public void setSubmissionRequirements(List<SubmissionRequirement> submissionRequirements) {
    this.submissionRequirements = submissionRequirements;
  }


  public PresentationDefinition inputDescriptors(List<InputDescriptor> inputDescriptors) {
    this.inputDescriptors = inputDescriptors;
    return this;
  }

  public PresentationDefinition addInputDescriptorsItem(InputDescriptor inputDescriptorsItem) {
    if (this.inputDescriptors == null) {
      this.inputDescriptors = new ArrayList<>();
    }
    this.inputDescriptors.add(inputDescriptorsItem);
    return this;
  }

  /**
   * Get inputDescriptors
   * @return inputDescriptors
   */
  @javax.annotation.Nonnull
  public List<InputDescriptor> getInputDescriptors() {
    return inputDescriptors;
  }

  public void setInputDescriptors(List<InputDescriptor> inputDescriptors) {
    this.inputDescriptors = inputDescriptors;
  }


  public PresentationDefinition frame(FreeFormObject frame) {
    this.frame = frame;
    return this;
  }

  /**
   * Get frame
   * @return frame
   */
  @javax.annotation.Nullable
  public FreeFormObject getFrame() {
    return frame;
  }

  public void setFrame(FreeFormObject frame) {
    this.frame = frame;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresentationDefinition presentationDefinition = (PresentationDefinition) o;
    return Objects.equals(this.id, presentationDefinition.id) &&
        Objects.equals(this.name, presentationDefinition.name) &&
        Objects.equals(this.purpose, presentationDefinition.purpose) &&
        Objects.equals(this.format, presentationDefinition.format) &&
        Objects.equals(this.submissionRequirements, presentationDefinition.submissionRequirements) &&
        Objects.equals(this.inputDescriptors, presentationDefinition.inputDescriptors) &&
        Objects.equals(this.frame, presentationDefinition.frame);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, purpose, format, submissionRequirements, inputDescriptors, frame);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresentationDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    submissionRequirements: ").append(toIndentedString(submissionRequirements)).append("\n");
    sb.append("    inputDescriptors: ").append(toIndentedString(inputDescriptors)).append("\n");
    sb.append("    frame: ").append(toIndentedString(frame)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("purpose");
    openapiFields.add("format");
    openapiFields.add("submission_requirements");
    openapiFields.add("input_descriptors");
    openapiFields.add("frame");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("input_descriptors");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PresentationDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PresentationDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PresentationDefinition is not found in the empty JSON string", PresentationDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PresentationDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PresentationDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PresentationDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) && !jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        Format.validateJsonElement(jsonObj.get("format"));
      }
      if (jsonObj.get("submission_requirements") != null && !jsonObj.get("submission_requirements").isJsonNull()) {
        JsonArray jsonArraysubmissionRequirements = jsonObj.getAsJsonArray("submission_requirements");
        if (jsonArraysubmissionRequirements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("submission_requirements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `submission_requirements` to be an array in the JSON string but got `%s`", jsonObj.get("submission_requirements").toString()));
          }

          // validate the optional field `submission_requirements` (array)
          for (int i = 0; i < jsonArraysubmissionRequirements.size(); i++) {
            SubmissionRequirement.validateJsonElement(jsonArraysubmissionRequirements.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("input_descriptors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_descriptors` to be an array in the JSON string but got `%s`", jsonObj.get("input_descriptors").toString()));
      }

      JsonArray jsonArrayinputDescriptors = jsonObj.getAsJsonArray("input_descriptors");
      // validate the required field `input_descriptors` (array)
      for (int i = 0; i < jsonArrayinputDescriptors.size(); i++) {
        InputDescriptor.validateJsonElement(jsonArrayinputDescriptors.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PresentationDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PresentationDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PresentationDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PresentationDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<PresentationDefinition>() {
           @Override
           public void write(JsonWriter out, PresentationDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PresentationDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PresentationDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PresentationDefinition
   * @throws IOException if the JSON string is invalid with respect to PresentationDefinition
   */
  public static PresentationDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PresentationDefinition.class);
  }

  /**
   * Convert an instance of PresentationDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

