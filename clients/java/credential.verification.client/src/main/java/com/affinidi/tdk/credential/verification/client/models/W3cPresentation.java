/*
 * VerificationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.verification.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.affinidi.tdk.credential.verification.client.models.PresentationSubmission;
import com.affinidi.tdk.credential.verification.client.models.W3cCredential;
import com.affinidi.tdk.credential.verification.client.models.W3cPresentationContext;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * W3cPresentation
 */
@JsonPropertyOrder({
  W3cPresentation.JSON_PROPERTY_AT_CONTEXT,
  W3cPresentation.JSON_PROPERTY_ID,
  W3cPresentation.JSON_PROPERTY_TYPE,
  W3cPresentation.JSON_PROPERTY_HOLDER,
  W3cPresentation.JSON_PROPERTY_VERIFIABLE_CREDENTIAL,
  W3cPresentation.JSON_PROPERTY_PRESENTATION_SUBMISSION,
  W3cPresentation.JSON_PROPERTY_PROOF
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-13T09:22:13.913964654Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class W3cPresentation {
  public static final String JSON_PROPERTY_AT_CONTEXT = "@context";
  private W3cPresentationContext atContext;

  public static final String JSON_PROPERTY_ID = "id";
  private JsonNullable<String> id = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TYPE = "type";
  private List<String> type = new ArrayList<>();

  public static final String JSON_PROPERTY_HOLDER = "holder";
  private Object holder;

  public static final String JSON_PROPERTY_VERIFIABLE_CREDENTIAL = "verifiableCredential";
  private List<W3cCredential> verifiableCredential = new ArrayList<>();

  public static final String JSON_PROPERTY_PRESENTATION_SUBMISSION = "presentation_submission";
  private PresentationSubmission presentationSubmission;

  public static final String JSON_PROPERTY_PROOF = "proof";
  private Object proof;

  public W3cPresentation() {
  }

  public W3cPresentation atContext(W3cPresentationContext atContext) {
    
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AT_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public W3cPresentationContext getAtContext() {
    return atContext;
  }


  @JsonProperty(JSON_PROPERTY_AT_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAtContext(W3cPresentationContext atContext) {
    this.atContext = atContext;
  }

  public W3cPresentation id(String id) {
    this.id = JsonNullable.<String>of(id);
    
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getId() {
        return id.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getId_JsonNullable() {
    return id;
  }
  
  @JsonProperty(JSON_PROPERTY_ID)
  public void setId_JsonNullable(JsonNullable<String> id) {
    this.id = id;
  }

  public void setId(String id) {
    this.id = JsonNullable.<String>of(id);
  }

  public W3cPresentation type(List<String> type) {
    
    this.type = type;
    return this;
  }

  public W3cPresentation addTypeItem(String typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(List<String> type) {
    this.type = type;
  }

  public W3cPresentation holder(Object holder) {
    
    this.holder = holder;
    return this;
  }

  /**
   * Get holder
   * @return holder
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOLDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getHolder() {
    return holder;
  }


  @JsonProperty(JSON_PROPERTY_HOLDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHolder(Object holder) {
    this.holder = holder;
  }

  public W3cPresentation verifiableCredential(List<W3cCredential> verifiableCredential) {
    
    this.verifiableCredential = verifiableCredential;
    return this;
  }

  public W3cPresentation addVerifiableCredentialItem(W3cCredential verifiableCredentialItem) {
    if (this.verifiableCredential == null) {
      this.verifiableCredential = new ArrayList<>();
    }
    this.verifiableCredential.add(verifiableCredentialItem);
    return this;
  }

  /**
   * Get verifiableCredential
   * @return verifiableCredential
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERIFIABLE_CREDENTIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<W3cCredential> getVerifiableCredential() {
    return verifiableCredential;
  }


  @JsonProperty(JSON_PROPERTY_VERIFIABLE_CREDENTIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVerifiableCredential(List<W3cCredential> verifiableCredential) {
    this.verifiableCredential = verifiableCredential;
  }

  public W3cPresentation presentationSubmission(PresentationSubmission presentationSubmission) {
    
    this.presentationSubmission = presentationSubmission;
    return this;
  }

  /**
   * Get presentationSubmission
   * @return presentationSubmission
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRESENTATION_SUBMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PresentationSubmission getPresentationSubmission() {
    return presentationSubmission;
  }


  @JsonProperty(JSON_PROPERTY_PRESENTATION_SUBMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPresentationSubmission(PresentationSubmission presentationSubmission) {
    this.presentationSubmission = presentationSubmission;
  }

  public W3cPresentation proof(Object proof) {
    
    this.proof = proof;
    return this;
  }

  /**
   * Get proof
   * @return proof
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROOF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getProof() {
    return proof;
  }


  @JsonProperty(JSON_PROPERTY_PROOF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProof(Object proof) {
    this.proof = proof;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    W3cPresentation w3cPresentation = (W3cPresentation) o;
    return Objects.equals(this.atContext, w3cPresentation.atContext) &&
        equalsNullable(this.id, w3cPresentation.id) &&
        Objects.equals(this.type, w3cPresentation.type) &&
        Objects.equals(this.holder, w3cPresentation.holder) &&
        Objects.equals(this.verifiableCredential, w3cPresentation.verifiableCredential) &&
        Objects.equals(this.presentationSubmission, w3cPresentation.presentationSubmission) &&
        Objects.equals(this.proof, w3cPresentation.proof);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(atContext, hashCodeNullable(id), type, holder, verifiableCredential, presentationSubmission, proof);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class W3cPresentation {\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    verifiableCredential: ").append(toIndentedString(verifiableCredential)).append("\n");
    sb.append("    presentationSubmission: ").append(toIndentedString(presentationSubmission)).append("\n");
    sb.append("    proof: ").append(toIndentedString(proof)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `@context` to the URL query string
    if (getAtContext() != null) {
      joiner.add(getAtContext().toUrlQueryString(prefix + "@context" + suffix));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `type` to the URL query string
    if (getType() != null) {
      for (int i = 0; i < getType().size(); i++) {
        try {
          joiner.add(String.format("%stype%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getType().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `holder` to the URL query string
    if (getHolder() != null) {
      try {
        joiner.add(String.format("%sholder%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHolder()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `verifiableCredential` to the URL query string
    if (getVerifiableCredential() != null) {
      for (int i = 0; i < getVerifiableCredential().size(); i++) {
        if (getVerifiableCredential().get(i) != null) {
          joiner.add(getVerifiableCredential().get(i).toUrlQueryString(String.format("%sverifiableCredential%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `presentation_submission` to the URL query string
    if (getPresentationSubmission() != null) {
      joiner.add(getPresentationSubmission().toUrlQueryString(prefix + "presentation_submission" + suffix));
    }

    // add `proof` to the URL query string
    if (getProof() != null) {
      try {
        joiner.add(String.format("%sproof%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProof()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

