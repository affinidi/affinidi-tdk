/*
 * VerificationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.verification.client.models;

import java.util.Objects;
import com.affinidi.tdk.credential.verification.client.models.PresentationSubmission;
import com.affinidi.tdk.credential.verification.client.models.W3cCredential;
import com.affinidi.tdk.credential.verification.client.models.W3cPresentationContext;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.verification.client.JSON;

/**
 * W3cPresentation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-12T23:19:17.783863283Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class W3cPresentation {
  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  private W3cPresentationContext atContext;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<String> type = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOLDER = "holder";
  @SerializedName(SERIALIZED_NAME_HOLDER)
  private Object holder;

  public static final String SERIALIZED_NAME_VERIFIABLE_CREDENTIAL = "verifiableCredential";
  @SerializedName(SERIALIZED_NAME_VERIFIABLE_CREDENTIAL)
  private List<W3cCredential> verifiableCredential = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRESENTATION_SUBMISSION = "presentation_submission";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_SUBMISSION)
  private PresentationSubmission presentationSubmission;

  public static final String SERIALIZED_NAME_PROOF = "proof";
  @SerializedName(SERIALIZED_NAME_PROOF)
  private Object proof;

  public W3cPresentation() {
  }

  public W3cPresentation atContext(W3cPresentationContext atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nonnull
  public W3cPresentationContext getAtContext() {
    return atContext;
  }

  public void setAtContext(W3cPresentationContext atContext) {
    this.atContext = atContext;
  }


  public W3cPresentation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public W3cPresentation type(List<String> type) {
    this.type = type;
    return this;
  }

  public W3cPresentation addTypeItem(String typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public List<String> getType() {
    return type;
  }

  public void setType(List<String> type) {
    this.type = type;
  }


  public W3cPresentation holder(Object holder) {
    this.holder = holder;
    return this;
  }

  /**
   * Get holder
   * @return holder
   */
  @javax.annotation.Nonnull
  public Object getHolder() {
    return holder;
  }

  public void setHolder(Object holder) {
    this.holder = holder;
  }


  public W3cPresentation verifiableCredential(List<W3cCredential> verifiableCredential) {
    this.verifiableCredential = verifiableCredential;
    return this;
  }

  public W3cPresentation addVerifiableCredentialItem(W3cCredential verifiableCredentialItem) {
    if (this.verifiableCredential == null) {
      this.verifiableCredential = new ArrayList<>();
    }
    this.verifiableCredential.add(verifiableCredentialItem);
    return this;
  }

  /**
   * Get verifiableCredential
   * @return verifiableCredential
   */
  @javax.annotation.Nonnull
  public List<W3cCredential> getVerifiableCredential() {
    return verifiableCredential;
  }

  public void setVerifiableCredential(List<W3cCredential> verifiableCredential) {
    this.verifiableCredential = verifiableCredential;
  }


  public W3cPresentation presentationSubmission(PresentationSubmission presentationSubmission) {
    this.presentationSubmission = presentationSubmission;
    return this;
  }

  /**
   * Get presentationSubmission
   * @return presentationSubmission
   */
  @javax.annotation.Nullable
  public PresentationSubmission getPresentationSubmission() {
    return presentationSubmission;
  }

  public void setPresentationSubmission(PresentationSubmission presentationSubmission) {
    this.presentationSubmission = presentationSubmission;
  }


  public W3cPresentation proof(Object proof) {
    this.proof = proof;
    return this;
  }

  /**
   * Get proof
   * @return proof
   */
  @javax.annotation.Nonnull
  public Object getProof() {
    return proof;
  }

  public void setProof(Object proof) {
    this.proof = proof;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    W3cPresentation w3cPresentation = (W3cPresentation) o;
    return Objects.equals(this.atContext, w3cPresentation.atContext) &&
        Objects.equals(this.id, w3cPresentation.id) &&
        Objects.equals(this.type, w3cPresentation.type) &&
        Objects.equals(this.holder, w3cPresentation.holder) &&
        Objects.equals(this.verifiableCredential, w3cPresentation.verifiableCredential) &&
        Objects.equals(this.presentationSubmission, w3cPresentation.presentationSubmission) &&
        Objects.equals(this.proof, w3cPresentation.proof);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(atContext, id, type, holder, verifiableCredential, presentationSubmission, proof);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class W3cPresentation {\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    verifiableCredential: ").append(toIndentedString(verifiableCredential)).append("\n");
    sb.append("    presentationSubmission: ").append(toIndentedString(presentationSubmission)).append("\n");
    sb.append("    proof: ").append(toIndentedString(proof)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@context");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("holder");
    openapiFields.add("verifiableCredential");
    openapiFields.add("presentation_submission");
    openapiFields.add("proof");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@context");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("holder");
    openapiRequiredFields.add("verifiableCredential");
    openapiRequiredFields.add("proof");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to W3cPresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!W3cPresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in W3cPresentation is not found in the empty JSON string", W3cPresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!W3cPresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `W3cPresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : W3cPresentation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `@context`
      W3cPresentationContext.validateJsonElement(jsonObj.get("@context"));
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("type") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("verifiableCredential").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifiableCredential` to be an array in the JSON string but got `%s`", jsonObj.get("verifiableCredential").toString()));
      }

      JsonArray jsonArrayverifiableCredential = jsonObj.getAsJsonArray("verifiableCredential");
      // validate the required field `verifiableCredential` (array)
      for (int i = 0; i < jsonArrayverifiableCredential.size(); i++) {
        W3cCredential.validateJsonElement(jsonArrayverifiableCredential.get(i));
      };
      // validate the optional field `presentation_submission`
      if (jsonObj.get("presentation_submission") != null && !jsonObj.get("presentation_submission").isJsonNull()) {
        PresentationSubmission.validateJsonElement(jsonObj.get("presentation_submission"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!W3cPresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'W3cPresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<W3cPresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(W3cPresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<W3cPresentation>() {
           @Override
           public void write(JsonWriter out, W3cPresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public W3cPresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of W3cPresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of W3cPresentation
   * @throws IOException if the JSON string is invalid with respect to W3cPresentation
   */
  public static W3cPresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, W3cPresentation.class);
  }

  /**
   * Convert an instance of W3cPresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

