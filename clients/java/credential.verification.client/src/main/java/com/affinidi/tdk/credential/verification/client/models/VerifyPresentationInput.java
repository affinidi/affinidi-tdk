/*
 * VerificationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.verification.client.models;

import java.util.Objects;
import com.affinidi.tdk.credential.verification.client.models.W3cPresentation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.verification.client.JSON;

/**
 * Request model of /verify-vp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-01T23:19:10.555437599Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class VerifyPresentationInput {
  public static final String SERIALIZED_NAME_VERIFIABLE_PRESENTATION = "verifiablePresentation";
  @SerializedName(SERIALIZED_NAME_VERIFIABLE_PRESENTATION)
  private W3cPresentation verifiablePresentation;

  public static final String SERIALIZED_NAME_SIGNED_PRESENTATION = "signedPresentation";
  @SerializedName(SERIALIZED_NAME_SIGNED_PRESENTATION)
  private W3cPresentation signedPresentation;

  public static final String SERIALIZED_NAME_PRESENTATION_DEFINITION = "presentationDefinition";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_DEFINITION)
  private Object presentationDefinition;

  public static final String SERIALIZED_NAME_PRESENTATION_SUBMISSION = "presentationSubmission";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_SUBMISSION)
  private Object presentationSubmission;

  public static final String SERIALIZED_NAME_CHALLENGE = "challenge";
  @SerializedName(SERIALIZED_NAME_CHALLENGE)
  private String challenge;

  public VerifyPresentationInput() {
  }

  public VerifyPresentationInput verifiablePresentation(W3cPresentation verifiablePresentation) {
    this.verifiablePresentation = verifiablePresentation;
    return this;
  }

  /**
   * Get verifiablePresentation
   * @return verifiablePresentation
   */
  @javax.annotation.Nullable
  public W3cPresentation getVerifiablePresentation() {
    return verifiablePresentation;
  }

  public void setVerifiablePresentation(W3cPresentation verifiablePresentation) {
    this.verifiablePresentation = verifiablePresentation;
  }


  public VerifyPresentationInput signedPresentation(W3cPresentation signedPresentation) {
    this.signedPresentation = signedPresentation;
    return this;
  }

  /**
   * Get signedPresentation
   * @return signedPresentation
   */
  @javax.annotation.Nullable
  public W3cPresentation getSignedPresentation() {
    return signedPresentation;
  }

  public void setSignedPresentation(W3cPresentation signedPresentation) {
    this.signedPresentation = signedPresentation;
  }


  public VerifyPresentationInput presentationDefinition(Object presentationDefinition) {
    this.presentationDefinition = presentationDefinition;
    return this;
  }

  /**
   * Get presentationDefinition
   * @return presentationDefinition
   */
  @javax.annotation.Nullable
  public Object getPresentationDefinition() {
    return presentationDefinition;
  }

  public void setPresentationDefinition(Object presentationDefinition) {
    this.presentationDefinition = presentationDefinition;
  }


  public VerifyPresentationInput presentationSubmission(Object presentationSubmission) {
    this.presentationSubmission = presentationSubmission;
    return this;
  }

  /**
   * Get presentationSubmission
   * @return presentationSubmission
   */
  @javax.annotation.Nullable
  public Object getPresentationSubmission() {
    return presentationSubmission;
  }

  public void setPresentationSubmission(Object presentationSubmission) {
    this.presentationSubmission = presentationSubmission;
  }


  public VerifyPresentationInput challenge(String challenge) {
    this.challenge = challenge;
    return this;
  }

  /**
   * Get challenge
   * @return challenge
   */
  @javax.annotation.Nullable
  public String getChallenge() {
    return challenge;
  }

  public void setChallenge(String challenge) {
    this.challenge = challenge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyPresentationInput verifyPresentationInput = (VerifyPresentationInput) o;
    return Objects.equals(this.verifiablePresentation, verifyPresentationInput.verifiablePresentation) &&
        Objects.equals(this.signedPresentation, verifyPresentationInput.signedPresentation) &&
        Objects.equals(this.presentationDefinition, verifyPresentationInput.presentationDefinition) &&
        Objects.equals(this.presentationSubmission, verifyPresentationInput.presentationSubmission) &&
        Objects.equals(this.challenge, verifyPresentationInput.challenge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(verifiablePresentation, signedPresentation, presentationDefinition, presentationSubmission, challenge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyPresentationInput {\n");
    sb.append("    verifiablePresentation: ").append(toIndentedString(verifiablePresentation)).append("\n");
    sb.append("    signedPresentation: ").append(toIndentedString(signedPresentation)).append("\n");
    sb.append("    presentationDefinition: ").append(toIndentedString(presentationDefinition)).append("\n");
    sb.append("    presentationSubmission: ").append(toIndentedString(presentationSubmission)).append("\n");
    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("verifiablePresentation");
    openapiFields.add("signedPresentation");
    openapiFields.add("presentationDefinition");
    openapiFields.add("presentationSubmission");
    openapiFields.add("challenge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyPresentationInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyPresentationInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyPresentationInput is not found in the empty JSON string", VerifyPresentationInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyPresentationInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyPresentationInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `verifiablePresentation`
      if (jsonObj.get("verifiablePresentation") != null && !jsonObj.get("verifiablePresentation").isJsonNull()) {
        W3cPresentation.validateJsonElement(jsonObj.get("verifiablePresentation"));
      }
      // validate the optional field `signedPresentation`
      if (jsonObj.get("signedPresentation") != null && !jsonObj.get("signedPresentation").isJsonNull()) {
        W3cPresentation.validateJsonElement(jsonObj.get("signedPresentation"));
      }
      if ((jsonObj.get("challenge") != null && !jsonObj.get("challenge").isJsonNull()) && !jsonObj.get("challenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `challenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("challenge").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyPresentationInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyPresentationInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyPresentationInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyPresentationInput.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyPresentationInput>() {
           @Override
           public void write(JsonWriter out, VerifyPresentationInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyPresentationInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyPresentationInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyPresentationInput
   * @throws IOException if the JSON string is invalid with respect to VerifyPresentationInput
   */
  public static VerifyPresentationInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyPresentationInput.class);
  }

  /**
   * Convert an instance of VerifyPresentationInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

