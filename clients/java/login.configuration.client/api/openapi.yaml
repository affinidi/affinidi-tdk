openapi: 3.0.3
info:
  contact:
    email: info@affinidi.com
    name: Affinidi
    url: https://github.com/affinidi/affinidi-tdk
  license:
    name: Apache-2.0
    url: https://github.com/affinidi/affinidi-tdk/blob/main/LICENSE
  title: OidcVpAdapterBackend
  version: 1.0.0
externalDocs:
  description: Affinidi Documentation Website
  url: https://docs.affinidi.com/dev-tools/affinidi-tdk/clients/login-configuration/
servers:
  - url: https://apse1.api.affinidi.io/vpa
tags:
  - description: Administering Configuration Management
    name: configuration
  - description: Consent Flow
    name: consent
  - description: CORS Definitions
    name: cors
  - description: Login Session
    name: session
  - description: Permission Groups to manage user access
    name: group
  - description: idp endpoints for login
    name: idp
paths:
  /v1/login/configurations:
    get:
      description: Endpoint to retrieve list of login configurations
      operationId: listLoginConfigurations
      parameters:
        - description: Maximum number of records to fetch in a list
          explode: true
          in: query
          name: limit
          required: false
          schema:
            maximum: 100
            minimum: 1
            type: integer
          style: form
        - description:
            The base64url encoded key of the first item that this operation
            will evaluate (it is not returned). Use the value that was returned in the
            previous operation.
          explode: true
          in: query
          name: exclusiveStartKey
          required: false
          schema:
            maxLength: 3000
            type: string
          style: form
      responses:
        '200':
          content:
            application/json:
              examples:
                Default:
                  $ref: '#/components/examples/ListLoginConfigurationOutput'
              schema:
                $ref: '#/components/schemas/ListLoginConfigurationOutput'
          description: ListLoginConfigurationOutput
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
      security:
        - ProjectTokenAuth: []
      summary: List login configurations
      tags:
        - configuration
      x-accepts:
        - application/json
    post:
      description: |
        Create a new login configuration

        `vpDefinition` and `idTokenMapping` have default settings that provide user email VP presentation definitions.

        An essential default definition is in place when it comes to the login process for end users using the Chrome extension.

        This definition requires users to input their email address as OIDCVP compliant, which is then verified by the Affinidi verification service.
      operationId: createLoginConfigurations
      requestBody:
        $ref: '#/components/requestBodies/CreateLoginConfigurations'
      responses:
        '201':
          content:
            application/json:
              examples:
                Default:
                  $ref: '#/components/examples/CreateLoginConfigurationOutput'
              schema:
                $ref: '#/components/schemas/CreateLoginConfigurationOutput'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createLoginConfigurations_400_response'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
        '424':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCreationError'
          description: FailedDependencyError
      security:
        - ProjectTokenAuth: []
      summary: Create a new login configuration
      tags:
        - configuration
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/login/configurations/{configurationId}:
    delete:
      description: Delete login configurations by ID
      operationId: deleteLoginConfigurationsById
      parameters:
        - description: The id of the login configuration
          explode: false
          in: path
          name: configurationId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '204':
          description: Deleted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
      security:
        - ProjectTokenAuth: []
      summary: Delete login configurations by ID
      tags:
        - configuration
      x-accepts:
        - application/json
    get:
      description: Get login configuration by ID
      operationId: getLoginConfigurationsById
      parameters:
        - description: The id of the login configuration
          explode: false
          in: path
          name: configurationId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              examples:
                Default:
                  $ref: '#/components/examples/ConfigurationObject'
              schema:
                $ref: '#/components/schemas/GetLoginConfigurationOutput'
          description: GetLoginConfigurationOutput
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
      security:
        - ProjectTokenAuth: []
      summary: Get login configuration by ID
      tags:
        - configuration
      x-accepts:
        - application/json
    patch:
      description: Update login configurations by ID
      operationId: updateLoginConfigurationsById
      parameters:
        - description: The id of the login configuration
          explode: false
          in: path
          name: configurationId
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateLoginConfigurationsById'
      responses:
        '200':
          content:
            application/json:
              examples:
                Default:
                  $ref: '#/components/examples/ConfigurationObject'
              schema:
                $ref: '#/components/schemas/UpdateLoginConfigurationOutput'
          description: UpdateLoginConfigurationOutput
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
      security:
        - ProjectTokenAuth: []
      summary: Update login configurations by ID
      tags:
        - configuration
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/login/configurations/metadata/{clientId}:
    get:
      description: Get Client Metadata By  OAuth 2.0 Client ID
      operationId: getClientMetadataByClientId
      parameters:
        - description: OAuth 2.0 Client ID
          explode: false
          in: path
          name: clientId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginConfigurationClientMetadataOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: NotFoundError
      security: []
      summary: Get Client Metadata By  OAuth 2.0 Client ID
      tags:
        - configuration
      x-accepts:
        - application/json
  /v1/groups:
    get:
      operationId: listGroups
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsList'
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: NotFoundError
      security:
        - ProjectTokenAuth: []
      tags:
        - group
      x-accepts:
        - application/json
    post:
      operationId: createGroup
      requestBody:
        $ref: '#/components/requestBodies/CreateGroup'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsPerUserLimitExceededError'
          description: ConflictError
      security:
        - ProjectTokenAuth: []
      tags:
        - group
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/groups/{groupName}:
    delete:
      operationId: deleteGroup
      parameters:
        - explode: false
          in: path
          name: groupName
          required: true
          schema:
            type: string
          style: simple
      responses:
        '204':
          description: NoContent
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
      security:
        - ProjectTokenAuth: []
      tags:
        - group
      x-accepts:
        - application/json
    get:
      operationId: getGroupById
      parameters:
        - explode: false
          in: path
          name: groupName
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: NotFoundError
      security:
        - ProjectTokenAuth: []
      tags:
        - group
      x-accepts:
        - application/json
  /v1/groups/{groupName}/users:
    delete:
      operationId: removeUserFromGroup
      parameters:
        - explode: false
          in: path
          name: groupName
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        $ref: '#/components/requestBodies/RemoveUserFromGroup'
      responses:
        '204':
          description: NoContent
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: NotFoundError
      security:
        - ProjectTokenAuth: []
      tags:
        - group
      x-content-type: application/json
      x-accepts:
        - application/json
    get:
      operationId: listGroupUserMappings
      parameters:
        - explode: false
          in: path
          name: groupName
          required: true
          schema:
            type: string
          style: simple
        - description: Maximum number of records to fetch in a list
          explode: true
          in: query
          name: limit
          required: false
          schema:
            maximum: 100
            minimum: 1
            type: integer
          style: form
        - description:
            The base64url encoded key of the first item that this operation
            will evaluate (it is not returned). Use the value that was returned in the
            previous operation.
          explode: true
          in: query
          name: exclusiveStartKey
          required: false
          schema:
            maxLength: 3000
            type: string
          style: form
        - description: sort response in specific order. By default it is in desc order
          explode: true
          in: query
          name: sortOrder
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserMappingsList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: NotFoundError
      security:
        - ProjectTokenAuth: []
      tags:
        - group
      x-accepts:
        - application/json
    post:
      operationId: addUserToGroup
      parameters:
        - explode: false
          in: path
          name: groupName
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        $ref: '#/components/requestBodies/AddUserToGroup'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserMappingDto'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterError'
          description: BadRequestError
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionForbiddenError'
          description: ForbiddenError
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: NotFoundError
      security:
        - ProjectTokenAuth: []
      tags:
        - group
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/deny-list/groups/add:
    post:
      description: Block Single or Multiple Groups
      operationId: blockGroups
      requestBody:
        $ref: '#/components/requestBodies/GroupNames'
      responses:
        '200':
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidGroupsError'
          description: BadRequestError
      security:
        - ProjectTokenAuth: []
      tags:
        - deny-list
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/deny-list/groups:
    get:
      description: Get Blocked Groups
      operationId: listBlockedGroups
      parameters:
        - explode: true
          in: query
          name: pageToken
          required: false
          schema:
            type: string
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupNames'
          description: Groups Names Response
      security:
        - ProjectTokenAuth: []
      tags:
        - deny-list
      x-accepts:
        - application/json
  /v1/deny-list/groups/remove:
    post:
      description: Unblock Single or Multiple Groups
      operationId: unblockGroups
      requestBody:
        $ref: '#/components/requestBodies/GroupNames'
      responses:
        '200':
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidGroupsError'
          description: BadRequestError
      security:
        - ProjectTokenAuth: []
      tags:
        - deny-list
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/deny-list/users/add:
    post:
      description: Block Single or Multiple user ids
      operationId: blockUsers
      requestBody:
        $ref: '#/components/requestBodies/BlockedUsers'
      responses:
        '200':
          description: Ok
      security:
        - ProjectTokenAuth: []
      tags:
        - deny-list
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/deny-list/users:
    get:
      description: Get List of Blocked Users
      operationId: listBlockedUsers
      parameters:
        - explode: true
          in: query
          name: pageToken
          required: false
          schema:
            type: string
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockedUsers'
          description: Blocked user ids response
      security:
        - ProjectTokenAuth: []
      tags:
        - deny-list
      x-accepts:
        - application/json
  /v1/deny-list/users/remove:
    post:
      description: Unblock Single or Multiple user ids
      operationId: unblockUsers
      requestBody:
        $ref: '#/components/requestBodies/BlockedUsers'
      responses:
        '200':
          description: Ok
      security:
        - ProjectTokenAuth: []
      tags:
        - deny-list
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/allow-list/groups/add:
    post:
      description: Allow Single or Multiple Groups
      operationId: allowGroups
      requestBody:
        $ref: '#/components/requestBodies/GroupNames'
      responses:
        '200':
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidGroupsError'
          description: BadRequestError
      security:
        - ProjectTokenAuth: []
      tags:
        - allow-list
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/allow-list/groups:
    get:
      description: Get Allowed Groups
      operationId: listAllowedGroups
      parameters:
        - explode: true
          in: query
          name: pageToken
          required: false
          schema:
            type: string
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupNames'
          description: Groups Names Response
      security:
        - ProjectTokenAuth: []
      tags:
        - allow-list
      x-accepts:
        - application/json
  /v1/allow-list/groups/remove:
    post:
      description: Disallow Single or Multiple Groups
      operationId: disallowGroups
      requestBody:
        $ref: '#/components/requestBodies/GroupNames'
      responses:
        '200':
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidGroupsError'
          description: BadRequestError
      security:
        - ProjectTokenAuth: []
      tags:
        - allow-list
      x-content-type: application/json
      x-accepts:
        - application/json
  /v1/login/project/{projectId}/.well-known/jwks.json:
    get:
      description:
        "This endpoint returns JSON Web Keys required to verifying OpenID\
        \ Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint\
        \ can be used with client libraries like node-jwks-rsa among others."
      parameters:
        - explode: false
          in: path
          name: projectId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Successful response
      summary: Discover Well-Known JSON Web Keys
      tags:
        - idp
      x-amazon-apigateway-integration:
        requestParameters:
          integration.request.path.projectId: method.request.path.projectId
        cacheKeyParameters:
          - method.request.path.projectId
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: http_proxy
      x-accepts:
        - application/json
  /v1/login/project/{projectId}/.well-known/openid-configuration:
    get:
      description: |
        A mechanism for an OpenID Connect Relying Party to discover the End-User's  OpenID Provider and obtain information needed to interact with it, including  its OAuth 2.0 endpoint locations.
      parameters:
        - explode: false
          in: path
          name: projectId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCConfig'
          description: Successful response
      summary: OpenID Connect Discovery
      tags:
        - idp
      x-amazon-apigateway-integration:
        requestParameters:
          integration.request.path.projectId: method.request.path.projectId
        cacheKeyParameters:
          - method.request.path.projectId
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: http_proxy
      x-accepts:
        - application/json
  /v1/login/project/{projectId}/oauth2/auth:
    get:
      description: |
        The authorization endpoint is one of the components in the OAuth 2.0 flow. It's the URL where a user is redirected to grant or deny access to their resources. When a user tries to access a service that requires OAuth 2.0 authorization, the application will redirect the user to this authorization endpoint. Here, the user can log in (if necessary) and then decide whether to grant the application access.
      parameters:
        - explode: false
          in: path
          name: projectId
          required: true
          schema:
            type: string
          style: simple
      responses: {}
      summary: OAuth 2.0 Authorize Endpoint
      tags:
        - idp
      x-amazon-apigateway-integration:
        requestParameters:
          integration.request.path.projectId: method.request.path.projectId
        cacheKeyParameters:
          - method.request.path.projectId
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: http_proxy
      x-accepts:
        - application/json
  /v1/login/project/{projectId}/oauth2/revoke:
    post:
      description: |
        Revoking a token (both access and refresh) means that the tokens will be invalid.  A revoked access token can no longer be used to make access requests, and a revoked  refresh token can no longer be used to refresh an access token. Revoking a refresh  token also invalidates the access token that was created with it. A token may only  be revoked by the client the token was generated for.
      parameters:
        - explode: false
          in: path
          name: projectId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: Ok
      summary: Revoke OAuth 2.0 Access or Refresh Token
      tags:
        - idp
      x-amazon-apigateway-integration:
        cacheKeyParameters:
          - method.request.path.projectId
        requestParameters:
          integration.request.path.projectId: method.request.path.projectId
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: http_proxy
      x-accepts:
        - application/json
  /v1/login/project/{projectId}/oauth2/sessions/logout:
    get:
      description: |
        This endpoint initiates and completes user logout at the IdP OAuth2 & OpenID provider and initiates OpenID Connect Front- / Back-channel logout:
        https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
        Back-channel logout is performed asynchronously and does not affect logout flow.
      parameters:
        - explode: false
          in: path
          name: projectId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: Ok
      summary: OpenID Connect Front- and Back-channel Enabled Logout
      tags:
        - idp
      x-amazon-apigateway-integration:
        requestParameters:
          integration.request.path.projectId: method.request.path.projectId
        cacheKeyParameters:
          - method.request.path.projectId
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: http_proxy
      x-accepts:
        - application/json
  /v1/login/project/{projectId}/oauth2/token:
    post:
      description: |
        The token endpoint is a critical component in the OAuth 2.0 protocol. It's the URL where a client application makes a request to exchange an authorization grant (such as an authorization code) for an access token. After a user grants authorization at the authorization endpoint, the client application receives an authorization grant, which is then exchanged for an access token at the token endpoint. This access token is then used to access the user's resources on the protected server.
      parameters:
        - explode: false
          in: path
          name: projectId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Token'
          description: Successful response
      summary: The OAuth 2.0 Token Endpoint
      tags:
        - idp
      x-amazon-apigateway-integration:
        cacheKeyParameters:
          - method.request.path.projectId
        requestParameters:
          integration.request.path.projectId: method.request.path.projectId
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: http_proxy
      x-accepts:
        - application/json
  /v1/login/project/{projectId}/userinfo:
    get:
      description: |
        This endpoint returns the payload of the ID Token,  including session.id_token values, of the provided  OAuth 2.0 Access Token's consent request.
        In the case of authentication error, a WWW-Authenticate  header might be set in the response with more information  about the error. See the spec for more details about  header format.
      parameters:
        - explode: false
          in: path
          name: projectId
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserInfo'
          description: Successful response
      summary: OpenID Connect Userinfo
      tags:
        - idp
      x-amazon-apigateway-integration:
        requestParameters:
          integration.request.path.projectId: method.request.path.projectId
        cacheKeyParameters:
          - method.request.path.projectId
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: http_proxy
      x-accepts:
        - application/json
components:
  examples:
    ConfigurationObject:
      value:
        ari: ari:identity:...:28ed0f663884ff70bf3
        name: Reference App Client
        clientId: client-id here
        projectId: 8000c3a4-aa3b-4d14-9c9b-cddaa324c9e9
        creationDate: 2023-05-11T10:15:44Z
        idTokenMapping:
          - sourceField: $.type
            idTokenClaim: type
            inputDescriptorId: email_vc
          - sourceField: $.credentialSubject.email
            idTokenClaim: email
            inputDescriptorId: email_vc
        vpDefinition:
          "{\\\"id\\\":\\\"vp_token_with_email_vc\\\",\\\"input_descriptors\\\
          \":[{\\\"id\\\":\\\"email_vc\\\",\\\"name\\\":\\\"Email VC\\\",\\\"purpose\\\
          \":\\\"Check if VC data contains necessary fields\\\",\\\"constraints\\\"\
          :{\\\"fields\\\":[{\\\"path\\\":[\\\"$.type\\\"],\\\"purpose\\\":\\\"Check\
          \ if VC type is correct\\\",\\\"filter\\\":{\\\"type\\\":\\\"array\\\",\\\
          \"contains\\\":{\\\"type\\\":\\\"string\\\",\\\"pattern\\\":\\\"Email\\\"\
          }}},{\\\"path\\\":[\\\"$.credentialSubject.email\\\"],\\\"purpose\\\":\\\
          \"Check if VC contains email field\\\",\\\"filter\\\":{\\\"type\\\":\\\"\
          string\\\"}}]}}]}"
        tokenEndpointAuthMethod: client_secret_post
        presentationDefinition: |-
          {
            "id": "vp_token_with_email_vc",
            "input_descriptors": [
              {
                "id": "email_vc",
                "name": "Email VC",
                "purpose": "Check if VC data contains necessary fields",
                "constraints": {
                  "fields": [
                    {
                      "path": [
                        "$.type"
                      ],
                      "purpose": "Check if VC type is correct",
                      "filter": {
                        "type": "array",
                        "contains": {
                          "type": "string",
                          "pattern": "Email"
                        }
                      }
                    },
                    {
                      "path": [
                        "$.credentialSubject.email"
                      ],
                      "purpose": "Check if VC contains email field",
                      "filter": {
                        "type": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        configurationId: c13de9cd6f19f28ed0f663884ff70bf3
        clientMetadata:
          name: insurance
          origin: https://insurance.com
          logo: https://insurance.com/logo.png
          domainVerified: true
    CreateLoginConfigurationOutput:
      value:
        ari: ari:identity:...:28ed0f663884ff70bf3
        name: Reference App Client
        auth:
          clientId: 47d8ef82-edb4-4752-8a8d-e8bc8aad4b48
          clientSecret: '**************'
          issuer: http://affinidi.com
        projectId: 8000c3a4-aa3b-4d14-9c9b-cddaa324c9e9
        creationDate: 2023-05-11T10:15:44Z
        redirectUris:
          - https://my-fancy-project.eu.auth0.com/login/callback
        configurationId: c13de9cd6f19f28ed0f663884ff70bf3
        clientMetadata:
          name: insurance
          origin: https://insurance.com
          logo: https://insurance.com/logo.png
          domainVerified: true
        tokenEndpointAuthMethod: client_secret_post
    CreateLoginConfigurationInput:
      value:
        name: Reference App Client
        redirectUris:
          - https://my-fancy-project.eu.auth0.com/login/callback
    CreateLoginConfigurationInputFull:
      value:
        name: Reference App Client
        redirectUris:
          - https://my-fancy-project.eu.auth0.com/login/callback
        idTokenMapping:
          - sourceField: $.type
            idTokenClaim: type
            inputDescriptorId: email_vc
          - sourceField: $.credentialSubject.email
            idTokenClaim: email
            inputDescriptorId: email_vc
        vpDefinition:
          "{\\\"id\\\":\\\"vp_token_with_email_vc\\\",\\\"input_descriptors\\\
          \":[{\\\"id\\\":\\\"email_vc\\\",\\\"name\\\":\\\"Email VC\\\",\\\"purpose\\\
          \":\\\"Check if VC data contains necessary fields\\\",\\\"constraints\\\"\
          :{\\\"fields\\\":[{\\\"path\\\":[\\\"$.type\\\"],\\\"purpose\\\":\\\"Check\
          \ if VC type is correct\\\",\\\"filter\\\":{\\\"type\\\":\\\"array\\\",\\\
          \"contains\\\":{\\\"type\\\":\\\"string\\\",\\\"pattern\\\":\\\"Email\\\"\
          }}},{\\\"path\\\":[\\\"$.credentialSubject.email\\\"],\\\"purpose\\\":\\\
          \"Check if VC contains email field\\\",\\\"filter\\\":{\\\"type\\\":\\\"\
          string\\\"}}]}}]}"
        tokenEndpointAuthMethod: client_secret_post
        presentationDefinition: |-
          {
            "id": "vp_token_with_email_vc",
            "input_descriptors": [
              {
                "id": "email_vc",
                "name": "Email VC",
                "purpose": "Check if VC data contains necessary fields",
                "constraints": {
                  "fields": [
                    {
                      "path": [
                        "$.type"
                      ],
                      "purpose": "Check if VC type is correct",
                      "filter": {
                        "type": "array",
                        "contains": {
                          "type": "string",
                          "pattern": "Email"
                        }
                      }
                    },
                    {
                      "path": [
                        "$.credentialSubject.email"
                      ],
                      "purpose": "Check if VC contains email field",
                      "filter": {
                        "type": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        clientMetadata:
          name: insurance
          origin: https://insurance.com
          logo: https://insurance.com/logo.png
          domainVerified: true
    UpdateLoginConfigurationOutput:
      $ref: '#/components/examples/ConfigurationObject'
    UpdateLoginConfigurationInput:
      value:
        name: Reference App Client
        idTokenMapping:
          - sourceField: $.type
            idTokenClaim: type
            inputDescriptorId: email_vc
          - sourceField: $.credentialSubject.email
            idTokenClaim: email
            inputDescriptorId: email_vc
    ListLoginConfigurationOutput:
      value:
        configurations:
          - ari: ari:identity:...:28ed0f663884ff70bf3
            name: Reference App Client
            clientId: client-id here
            projectId: 8000c3a4-aa3b-4d14-9c9b-cddaa324c9e9
            creationDate: 2023-05-11T10:15:44Z
            idTokenMapping:
              - sourceField: $.type
                idTokenClaim: type
                inputDescriptorId: email_vc
              - sourceField: $.credentialSubject.email
                idTokenClaim: email
                inputDescriptorId: email_vc
            vpDefinition:
              "{\\\"id\\\":\\\"vp_token_with_email_vc\\\",\\\"input_descriptors\\\
              \":[{\\\"id\\\":\\\"email_vc\\\",\\\"name\\\":\\\"Email VC\\\",\\\"purpose\\\
              \":\\\"Check if VC data contains necessary fields\\\",\\\"constraints\\\
              \":{\\\"fields\\\":[{\\\"path\\\":[\\\"$.type\\\"],\\\"purpose\\\":\\\"\
              Check if VC type is correct\\\",\\\"filter\\\":{\\\"type\\\":\\\"array\\\
              \",\\\"contains\\\":{\\\"type\\\":\\\"string\\\",\\\"pattern\\\":\\\"\
              Email\\\"}}},{\\\"path\\\":[\\\"$.credentialSubject.email\\\"],\\\"purpose\\\
              \":\\\"Check if VC contains email field\\\",\\\"filter\\\":{\\\"type\\\
              \":\\\"string\\\"}}]}}]}"
            tokenEndpointAuthMethod: client_secret_post
            presentationDefinition: |-
              {
                "id": "vp_token_with_email_vc",
                "input_descriptors": [
                  {
                    "id": "email_vc",
                    "name": "Email VC",
                    "purpose": "Check if VC data contains necessary fields",
                    "constraints": {
                      "fields": [
                        {
                          "path": [
                            "$.type"
                          ],
                          "purpose": "Check if VC type is correct",
                          "filter": {
                            "type": "array",
                            "contains": {
                              "type": "string",
                              "pattern": "Email"
                            }
                          }
                        },
                        {
                          "path": [
                            "$.credentialSubject.email"
                          ],
                          "purpose": "Check if VC contains email field",
                          "filter": {
                            "type": "string"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            configurationId: c13de9cd6f19f28ed0f663884ff70bf3
            clientMetadata:
              name: insurance
              origin: https://insurance.com
              logo: https://insurance.com/logo.png
              domainVerified: true
    RedirectResponse:
      value:
        type: REDIRECT_RESPONSE
        to: https://url-to-redirect-ro
    ConsentRequestOutputInfo:
      value:
        type: CONSENT_REQUEST_INFO
        user:
          subject: '4984389384938498349'
        client:
          id: 01b2c41a-b723-4fbf-a917-1280ac26f3ba
          name: client 1
          logoUri: https://logo.png
        requestedScopes:
          - ''
        consentChallenge: e1ef8c2b5cd74482b6812dafba81bcf9
  headers:
    Access-Control-Allow-Origin:
      explode: false
      schema:
        type: string
      style: simple
    Access-Control-Allow-Methods:
      explode: false
      schema:
        type: string
      style: simple
    Access-Control-Allow-Headers:
      explode: false
      schema:
        type: string
      style: simple
  requestBodies:
    LoginSessionForIdp:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginSessionForIDPInput'
      description: LoginSessionForIdp
    LoginSessionAcceptResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginSessionAcceptResponseInput'
      description: LoginSessionAcceptResponse
    LoginSessionRejectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginSessionRejectResponseInput'
      description: LoginSessionRejectResponse
    CreateLoginConfigurations:
      content:
        application/json:
          examples:
            Default:
              $ref: '#/components/examples/CreateLoginConfigurationInput'
            Full:
              $ref: '#/components/examples/CreateLoginConfigurationInputFull'
          schema:
            $ref: '#/components/schemas/CreateLoginConfigurationInput'
      description: CreateLoginConfigurations
    UpdateLoginConfigurationsById:
      content:
        application/json:
          examples:
            Default:
              $ref: '#/components/examples/UpdateLoginConfigurationInput'
          schema:
            $ref: '#/components/schemas/UpdateLoginConfigurationInput'
      description: UpdateLoginConfigurationsById
    CreateGroup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateGroupInput'
      description: CreateGroup
      required: true
    AddUserToGroup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddUserToGroupInput'
      description: AddUserToGroup
      required: true
    RemoveUserFromGroup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RemoveUserFromGroupInput'
      description: Remove user from group
      required: true
    GroupNames:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupNamesInput'
      description: List of group names as input
    BlockedUsers:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockedUsersInput'
      description: List of blocked users as input
  responses:
    LoginSessionForIdp:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginSessionForIDPOutput'
      description: Login Session Created
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    LoginSessionAcceptResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginSessionAcceptResponseOutput'
      description: Response Accepted
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    LoginSessionRejectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginSessionRejectResponseOutput'
      description: Response Declined
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    ListLoginConfigurations:
      content:
        application/json:
          examples:
            Default:
              $ref: '#/components/examples/ListLoginConfigurationOutput'
          schema:
            $ref: '#/components/schemas/ListLoginConfigurationOutput'
      description: ListLoginConfigurationOutput
    CreateLoginConfigurations:
      content:
        application/json:
          examples:
            Default:
              $ref: '#/components/examples/CreateLoginConfigurationOutput'
          schema:
            $ref: '#/components/schemas/CreateLoginConfigurationOutput'
      description: Created
    GetLoginConfigurationsById:
      content:
        application/json:
          examples:
            Default:
              $ref: '#/components/examples/ConfigurationObject'
          schema:
            $ref: '#/components/schemas/GetLoginConfigurationOutput'
      description: GetLoginConfigurationOutput
    UpdateLoginConfigurationsById:
      content:
        application/json:
          examples:
            Default:
              $ref: '#/components/examples/ConfigurationObject'
          schema:
            $ref: '#/components/schemas/UpdateLoginConfigurationOutput'
      description: UpdateLoginConfigurationOutput
    ListGroups:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupsList'
      description: Ok
    CreateGroup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupDto'
      description: Created
    GetGroupById:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupDto'
      description: Ok
    ListGroupUserMappings:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupUserMappingsList'
      description: OK
    AddUserToGroup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupUserMappingDto'
      description: Created
    GetClientMetadataByClientId:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginConfigurationClientMetadataOutput'
      description: OK
    JsonWebKeySet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JsonWebKey'
      description: Successful response
    OIDCConfiguration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OIDCConfig'
      description: Successful response
    OAuth2Token:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OAuth2Token'
      description: Successful response
    UserInfo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetUserInfo'
      description: Successful response
    GroupNames:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupNames'
      description: Groups Names Response
    BlockedUsers:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockedUsers'
      description: Blocked user ids response
    CorsLoginSessionForIdpOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CorsLoginSessionForIdpOK'
      description: CorsLoginSessionForIdpOK
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    CorsLoginSessionAcceptResponseOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CorsLoginSessionAcceptResponseOK'
      description: CorsLoginSessionAcceptResponseOK
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    CorsLoginSessionRejectResponseOK:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CorsLoginSessionRejectResponseOK'
      description: CorsLoginSessionRejectResponseOK
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    ConsentRequestBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginConfigurationReadInvalidClientIdError'
      description: BadRequestError
    LoginSessionForIdpBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginConfigurationReadInvalidClientIdError'
      description: BadRequestError
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    LoginSessionForIdpUnauthorizedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
      description: UnauthorizedError
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    LoginSessionForIdpForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    LoginSessionAcceptResponseBadRequestError:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/InvalidParameterError'
              - $ref: '#/components/schemas/VPTokenValidationError'
              - $ref: '#/components/schemas/InvalidClaimContextError'
              - $ref: '#/components/schemas/InvalidVPTokenCreationTimeError'
      description: BadRequestError
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    LoginSessionAcceptResponseUnauthorizedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
      description: UnauthorizedError
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
    ListLoginConfigurationsBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    ListLoginConfigurationsForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    CreateLoginConfigurationsBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createLoginConfigurations_400_response'
      description: BadRequestError
    CreateLoginConfigurationsForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    CreateLoginConfigurationsFailedDependencyError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceCreationError'
      description: FailedDependencyError
    GetLoginConfigurationsByIdBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    GetLoginConfigurationsByIdForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    UpdateLoginConfigurationsByIdBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    UpdateLoginConfigurationsByIdForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    DeleteLoginConfigurationsByIdBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    DeleteLoginConfigurationsByIdForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    GetClientMetadataByClientIdBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    GetClientMetadataByClientIdNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
      description: NotFoundError
    ListGroupsBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    ListGroupsForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    ListGroupsNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
      description: NotFoundError
    CreateGroupBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    CreateGroupForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    CreateGroupConflictError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupsPerUserLimitExceededError'
      description: ConflictError
    GetGroupByIdBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    GetGroupByIdForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    GetGroupByIdNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
      description: NotFoundError
    DeleteGroupBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    DeleteGroupForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    ListGroupUserMappingsBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    ListGroupUserMappingsForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    ListGroupUserMappingsNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
      description: NotFoundError
    AddUserToGroupBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    AddUserToGroupForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    AddUserToGroupNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
      description: NotFoundError
    RemoveUserFromGroupBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
      description: BadRequestError
    RemoveUserFromGroupForbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
      description: ForbiddenError
    RemoveUserFromGroupNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
      description: NotFoundError
    BlockGroupsBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidGroupsError'
      description: BadRequestError
    UnblockGroupsBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidGroupsError'
      description: BadRequestError
    AllowGroupsBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidGroupsError'
      description: BadRequestError
    DisallowGroupsBadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidGroupsError'
      description: BadRequestError
  schemas:
    ServiceErrorResponse:
      additionalProperties: false
      description: Service Error Response
      properties:
        debugId:
          description: unique id for correlating this specific error to logs
          format: uuid
          type: string
        name:
          description: name of the error
          type: string
        code:
          description: backwards compatible Affinidi error code
          type: string
        details:
          description: error details
          items:
            $ref: '#/components/schemas/ServiceErrorResponse_details_inner'
          type: array
      required:
        - code
        - debugId
        - name
      type: object
    RedirectResponse:
      additionalProperties: false
      description: Redirect Response
      properties:
        type:
          description: type
          enum:
            - REDIRECT_RESPONSE
          type: string
        to:
          description: URL to redirect to
          format: url
          type: string
      required:
        - to
        - type
      type: object
    ListLoginConfigurationOutput:
      additionalProperties: false
      example:
        configurations:
          - presentationDefinition: '{}'
            clientMetadata:
              domainVerified: true
              origin: origin
              name: name
              logo: logo
            idTokenMapping:
              - sourceField: sourceField
                inputDescriptorId: inputDescriptorId
                idTokenClaim: idTokenClaim
              - sourceField: sourceField
                inputDescriptorId: inputDescriptorId
                idTokenClaim: idTokenClaim
            clientId: clientId
            vpDefinition: vpDefinition
            creationDate: creationDate
            redirectUris:
              - redirectUris
              - redirectUris
            tokenEndpointAuthMethod: client_secret_basic
            postLogoutRedirectUris:
              - postLogoutRedirectUris
              - postLogoutRedirectUris
            scope: scope
            name: name
            ari: ari
            configurationId: configurationId
            projectId: projectId
          - presentationDefinition: '{}'
            clientMetadata:
              domainVerified: true
              origin: origin
              name: name
              logo: logo
            idTokenMapping:
              - sourceField: sourceField
                inputDescriptorId: inputDescriptorId
                idTokenClaim: idTokenClaim
              - sourceField: sourceField
                inputDescriptorId: inputDescriptorId
                idTokenClaim: idTokenClaim
            clientId: clientId
            vpDefinition: vpDefinition
            creationDate: creationDate
            redirectUris:
              - redirectUris
              - redirectUris
            tokenEndpointAuthMethod: client_secret_basic
            postLogoutRedirectUris:
              - postLogoutRedirectUris
              - postLogoutRedirectUris
            scope: scope
            name: name
            ari: ari
            configurationId: configurationId
            projectId: projectId
        lastEvaluatedKey: lastEvaluatedKey
      properties:
        configurations:
          items:
            $ref: '#/components/schemas/LoginConfigurationObject'
          type: array
        lastEvaluatedKey:
          type: string
      required:
        - configurations
      type: object
    CreateLoginConfigurationInput:
      example:
        presentationDefinition: '{}'
        clientMetadata:
          origin: origin
          name: name
          logo: logo
        claimFormat: array
        idTokenMapping:
          - sourceField: sourceField
            inputDescriptorId: inputDescriptorId
            idTokenClaim: idTokenClaim
          - sourceField: sourceField
            inputDescriptorId: inputDescriptorId
            idTokenClaim: idTokenClaim
        vpDefinition: vpDefinition
        tokenEndpointAuthMethod: client_secret_basic
        postLogoutRedirectUris:
          - postLogoutRedirectUris
          - postLogoutRedirectUris
        scope: scope
        name: name
        description: description
        failOnMappingConflict: true
        redirectUris:
          - redirectUris
          - redirectUris
      properties:
        name:
          description: User defined login configuration name
          type: string
        description:
          type: string
        redirectUris:
          description: OAuth 2.0 Redirect URIs
          items:
            type: string
          type: array
        postLogoutRedirectUris:
          description:
            "Post Logout Redirect URIs, Used to redirect the user's browser\
            \ to a specified URL after the logout process is complete. Must match\
            \ the domain, port, scheme of at least one of the registered redirect\
            \ URIs"
          items:
            type: string
          type: array
        vpDefinition:
          description: VP definition in JSON stringify format
          type: string
        presentationDefinition:
          description: Presentation Definition
          type: object
        idTokenMapping:
          description: Fields name/path mapping between the vp_token and the id_token
          items:
            $ref: '#/components/schemas/IdTokenMappingItem'
          minItems: 1
          type: array
        clientMetadata:
          $ref: '#/components/schemas/LoginConfigurationClientMetadataInput'
        claimFormat:
          description: ID token claims output format. Default is array.
          enum:
            - array
            - map
          type: string
        failOnMappingConflict:
          default: true
          description:
            Interrupts login process if duplications of data fields names
            will be found
          type: boolean
        scope:
          description: List of groups separated by space
          type: string
        tokenEndpointAuthMethod:
          $ref: '#/components/schemas/TokenEndpointAuthMethod'
      required:
        - name
        - redirectUris
      type: object
    CreateLoginConfigurationOutput:
      additionalProperties: false
      example:
        clientMetadata:
          domainVerified: true
          origin: origin
          name: name
          logo: logo
        auth:
          clientId: clientId
          scope: scope
          clientSecret: clientSecret
          issuer: issuer
        postLogoutRedirectUris:
          - postLogoutRedirectUris
          - postLogoutRedirectUris
        name: name
        ari: ari
        configurationId: configurationId
        creationDate: creationDate
        projectId: projectId
        redirectUris:
          - redirectUris
          - redirectUris
      properties:
        ari:
          description: Configuration ari
          type: string
        projectId:
          description: Project id
          type: string
        configurationId:
          description: Configuration id
          type: string
        name:
          description: User defined login configuration name
          type: string
        auth:
          $ref: '#/components/schemas/CreateLoginConfigurationOutput_auth'
        redirectUris:
          description: OAuth 2.0 Redirect URIs
          items:
            type: string
          type: array
        clientMetadata:
          $ref: '#/components/schemas/LoginConfigurationClientMetadataOutput'
        creationDate:
          description: OAuth 2.0 Client Creation Date
          type: string
        postLogoutRedirectUris:
          description:
            "Post Logout Redirect URIs, Used to redirect the user's browser\
            \ to a specified URL after the logout process is complete. Must match\
            \ the domain, port, scheme of at least one of the registered redirect\
            \ URIs"
          items:
            type: string
          type: array
      required:
        - ari
        - auth
        - clientMetadata
        - creationDate
        - id
        - name
        - projectId
        - redirectUris
      type: object
    GetLoginConfigurationOutput:
      $ref: '#/components/schemas/LoginConfigurationObject'
    UpdateLoginConfigurationInput:
      example:
        presentationDefinition: '{}'
        clientMetadata:
          origin: origin
          name: name
          logo: logo
        idTokenMapping:
          - sourceField: sourceField
            inputDescriptorId: inputDescriptorId
            idTokenClaim: idTokenClaim
          - sourceField: sourceField
            inputDescriptorId: inputDescriptorId
            idTokenClaim: idTokenClaim
        vpDefinition: vpDefinition
        tokenEndpointAuthMethod: client_secret_basic
        postLogoutRedirectUris:
          - postLogoutRedirectUris
          - postLogoutRedirectUris
        name: name
        failOnMappingConflict: true
        clientSecret: clientSecret
        redirectUris:
          - redirectUris
          - redirectUris
      properties:
        name:
          description: User defined login configuration name
          type: string
        redirectUris:
          description: OAuth 2.0 Redirect URIs
          items:
            type: string
          type: array
        postLogoutRedirectUris:
          description:
            "Post Logout Redirect URIs, Used to redirect the user's browser\
            \ to a specified URL after the logout process is complete. Must match\
            \ the domain, port, scheme of at least one of the registered redirect\
            \ URIs"
          items:
            type: string
          type: array
        clientSecret:
          description: OAuth2 client secret
          type: string
        vpDefinition:
          description: VP definition in JSON stringify format
          type: string
        presentationDefinition:
          description: Presentation Definition
          type: object
        idTokenMapping:
          description: Fields name/path mapping between the vp_token and the id_token
          items:
            $ref: '#/components/schemas/IdTokenMappingItem'
          minItems: 1
          type: array
        clientMetadata:
          $ref: '#/components/schemas/LoginConfigurationClientMetadataInput'
        tokenEndpointAuthMethod:
          $ref: '#/components/schemas/TokenEndpointAuthMethod'
        failOnMappingConflict:
          description:
            Interrupts login process if duplications of data fields names
            will be found
          type: boolean
      type: object
    UpdateLoginConfigurationOutput:
      $ref: '#/components/schemas/LoginConfigurationObject'
    LoginSessionDto:
      additionalProperties: false
      properties:
        id:
          description: Session primary identifier
          type: string
        authorizationRequest:
          $ref: '#/components/schemas/LoginSessionDto_authorizationRequest'
      required:
        - authorizationRequest
        - id
      type: object
    LoginSessionForIDPInput:
      additionalProperties: false
      description: Input for Creating a Login Session
      properties:
        loginChallenge:
          description: IDP Login Challenge to Associate the Session with
          type: string
        clientId:
          description: IDP client id to Associate the Session with
          type: string
      required:
        - clientId
        - loginChallenge
      type: object
    LoginSessionForIDPOutput:
      $ref: '#/components/schemas/LoginSessionDto'
    LoginSessionAcceptResponseInput:
      additionalProperties: true
      description:
        Authorization Response per OpenID for Verifiable Presentations
        Specification
      type: object
    LoginSessionAcceptResponseOutput:
      additionalProperties: true
      description: Direct Post Response URI endpoint result
      type: object
    LoginSessionRejectResponseInput:
      additionalProperties: true
      description:
        Authorization Response per OpenID for Verifiable Presentations
        Specification
      properties:
        error:
          description:
            "The error should follow the OAuth2 error format (e.g. invalid_request,\
            \ login_required). Defaults to request_denied"
          type: string
        errorDescription:
          description: Description of the error in a human readable format
          type: string
        state:
          description: Random state associated to the Session
          type: string
      required:
        - state
      type: object
    LoginSessionRejectResponseOutput:
      additionalProperties: true
      description: Direct Post Response URI endpoint result
      type: object
    LoginConfigurationObject:
      additionalProperties: true
      example:
        presentationDefinition: '{}'
        clientMetadata:
          domainVerified: true
          origin: origin
          name: name
          logo: logo
        idTokenMapping:
          - sourceField: sourceField
            inputDescriptorId: inputDescriptorId
            idTokenClaim: idTokenClaim
          - sourceField: sourceField
            inputDescriptorId: inputDescriptorId
            idTokenClaim: idTokenClaim
        clientId: clientId
        vpDefinition: vpDefinition
        creationDate: creationDate
        redirectUris:
          - redirectUris
          - redirectUris
        tokenEndpointAuthMethod: client_secret_basic
        postLogoutRedirectUris:
          - postLogoutRedirectUris
          - postLogoutRedirectUris
        scope: scope
        name: name
        ari: ari
        configurationId: configurationId
        projectId: projectId
      properties:
        ari:
          description: Configuration ari
          type: string
        configurationId:
          description: Configuration id
          type: string
        projectId:
          description: Project id
          type: string
        name:
          description: User defined login configuration name
          type: string
        redirectUris:
          description: OAuth 2.0 Redirect URIs
          items:
            type: string
          type: array
        postLogoutRedirectUris:
          description:
            "Post Logout Redirect URIs, Used to redirect the user's browser\
            \ to a specified URL after the logout process is complete. Must match\
            \ the domain, port, scheme of at least one of the registered redirect\
            \ URIs"
          items:
            type: string
          type: array
        scope:
          description: OAuth 2.0 Client Scope
          type: string
        clientId:
          description: OAuth 2.0 Client ID
          type: string
        creationDate:
          description: OAuth 2.0 Client Creation Date
          type: string
        vpDefinition:
          description: VP definition in JSON stringify format
          type: string
        presentationDefinition:
          description: Presentation Definition
          type: object
        idTokenMapping:
          description: Fields name/path mapping between the vp_token and the id_token
          items:
            $ref: '#/components/schemas/IdTokenMappingItem'
          minItems: 1
          type: array
        clientMetadata:
          $ref: '#/components/schemas/LoginConfigurationClientMetadataOutput'
        tokenEndpointAuthMethod:
          $ref: '#/components/schemas/TokenEndpointAuthMethod'
      required:
        - ari
        - clientId
        - clientMetadata
        - creationDate
        - id
        - idTokenMapping
        - name
        - projectId
        - tokenEndpointAuthMethod
        - vpDefinition
      type: object
    IdTokenMappingItem:
      additionalProperties: false
      example:
        sourceField: sourceField
        inputDescriptorId: inputDescriptorId
        idTokenClaim: idTokenClaim
      properties:
        sourceField:
          description: Name(path) of the corresponding field in the vp_token
          type: string
        idTokenClaim:
          description: Name of the corresponding field in the id_token
          type: string
        inputDescriptorId:
          description: Id of related input descriptor from presentation definition
          type: string
      required:
        - idTokenClaim
        - sourceField
      type: object
    CreateGroupInput:
      additionalProperties: false
      example:
        groupName: groupName
        name: name
        description: description
      properties:
        groupName:
          description: 'name of the group for users, used as an id'
          maxLength: 24
          pattern: '^[a-z_]+$'
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - groupName
      type: object
    GroupDto:
      additionalProperties: false
      example:
        groupName: groupName
        ari: ari
        creationDate: creationDate
        projectId: projectId
      properties:
        ari:
          description: Group ari
          type: string
        projectId:
          description: Project id
          type: string
        groupName:
          description: 'name of the group, identifier within a project'
          type: string
        creationDate:
          description: Group creation date
          type: string
      required:
        - ari
        - creationDate
        - groupName
        - projectId
      type: object
    GroupUserMappingDto:
      additionalProperties: false
      example:
        addedAt: addedAt
        userId: userId
      properties:
        userId:
          description: Unique identifier of the user
          type: string
        addedAt:
          description: Group to user mapping creation date
          type: string
      required:
        - addedAt
        - userId
      type: object
    AddUserToGroupInput:
      description: input used to add a user to a group
      example:
        name: name
        description: description
        userId: userId
      properties:
        name:
          type: string
        description:
          type: string
        userId:
          description: Unique identifier of the user
          type: string
      required:
        - userId
      type: object
    RemoveUserFromGroupInput:
      description: input used to remove a user from a group
      example:
        userId: userId
      properties:
        userId:
          description: Unique identifier of the user
          type: string
      required:
        - userId
      type: object
    GroupsList:
      example:
        groups:
          - groupName: groupName
            ari: ari
            creationDate: creationDate
            projectId: projectId
          - groupName: groupName
            ari: ari
            creationDate: creationDate
            projectId: projectId
      properties:
        groups:
          items:
            $ref: '#/components/schemas/GroupDto'
          type: array
      type: object
    GroupUserMappingsList:
      example:
        totalUserCount: 0.8008281904610115
        lastEvaluatedKey: lastEvaluatedKey
        users:
          - addedAt: addedAt
            userId: userId
          - addedAt: addedAt
            userId: userId
      properties:
        users:
          items:
            $ref: '#/components/schemas/GroupUserMappingDto'
          type: array
        lastEvaluatedKey:
          type: string
        totalUserCount:
          type: number
      type: object
    LoginConfigurationClientMetadataInput:
      additionalProperties: false
      description: login configuration client metadata
      example:
        origin: origin
        name: name
        logo: logo
      properties:
        name:
          description: application name that will be displayed in consent page
          type: string
        origin:
          description: origin url that will be displayed in consent page
          type: string
        logo:
          description: logo url that will be displayed in consent page
          type: string
      required:
        - logo
        - name
        - origin
      type: object
    LoginConfigurationClientMetadataOutput:
      additionalProperties: true
      description: login configuration client metadata
      example:
        domainVerified: true
        origin: origin
        name: name
        logo: logo
      properties:
        name:
          description: application name that will be displayed in consent page
          type: string
        origin:
          description: origin url that will be displayed in consent page
          type: string
        logo:
          description: logo url that will be displayed in consent page
          type: string
        domainVerified:
          description:
            indicates if the developer's ownership of the domain has been
            verified
          type: boolean
      required:
        - logo
        - name
        - origin
      type: object
    TokenEndpointAuthMethod:
      description: |
        Requested Client Authentication method for the Token Endpoint. The options are: `client_secret_post`: (default) Send client_id and client_secret as application/x-www-form-urlencoded in the HTTP body. `client_secret_basic`: Send client_id and client_secret as application/x-www-form-urlencoded encoded in the HTTP Authorization header. `none`: For public clients (native/mobile apps) which can not have secret.
      enum:
        - client_secret_basic
        - client_secret_post
        - none
      type: string
    InvalidParameterError:
      additionalProperties: false
      example:
        traceId: traceId
        name: InvalidParameterError
        details:
          - issue: issue
            field: field
            location: location
            value: value
          - issue: issue
            field: field
            location: location
            value: value
        message: 'Invalid parameter: ${param}.'
        httpStatusCode: 0.8008281904610115
      properties:
        name:
          enum:
            - InvalidParameterError
          type: string
        message:
          enum:
            - 'Invalid parameter: ${param}.'
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    NotFoundError:
      additionalProperties: false
      example:
        traceId: traceId
        name: NotFoundError
        details:
          - issue: issue
            field: field
            location: location
            value: value
          - issue: issue
            field: field
            location: location
            value: value
        message: 'Not found: ${param}.'
        httpStatusCode: 0.8008281904610115
      properties:
        name:
          enum:
            - NotFoundError
          type: string
        message:
          enum:
            - 'Not found: ${param}.'
          type: string
        httpStatusCode:
          enum:
            - 404
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    JsonWebKey:
      example:
        keys:
          - d: d
            e: e
            crv: crv
            use: use
            kid: kid
            x5c:
              - x5c
              - x5c
            k: k
            dp: dp
            dq: dq
            'n': 'n'
            p: p
            kty: kty
            q: q
            qi: qi
            x: x
            'y': 'y'
            alg: alg
          - d: d
            e: e
            crv: crv
            use: use
            kid: kid
            x5c:
              - x5c
              - x5c
            k: k
            dp: dp
            dq: dq
            'n': 'n'
            p: p
            kty: kty
            q: q
            qi: qi
            x: x
            'y': 'y'
            alg: alg
      properties:
        keys:
          description: |
            The value of the "keys" parameter is an array of JSON Web Key (JWK) values.  By default, the order of the JWK values within the array does not imply an  order of preference among them, although applications of JWK Sets can choose  to assign a meaning to the order for their purposes, if desired.
          items:
            $ref: '#/components/schemas/JsonWebKey_keys_inner'
          type: array
      type: object
    OIDCConfig:
      example:
        request_parameter_supported: true
        claims_parameter_supported: true
        backchannel_logout_supported: true
        scopes_supported:
          - scopes_supported
          - scopes_supported
        issuer: issuer
        userinfo_signed_response_alg:
          - userinfo_signed_response_alg
          - userinfo_signed_response_alg
        authorization_endpoint: authorization_endpoint
        claims_supported:
          - claims_supported
          - claims_supported
        userinfo_signing_alg_values_supported:
          - userinfo_signing_alg_values_supported
          - userinfo_signing_alg_values_supported
        token_endpoint_auth_methods_supported:
          - token_endpoint_auth_methods_supported
          - token_endpoint_auth_methods_supported
        backchannel_logout_session_supported: true
        response_modes_supported:
          - response_modes_supported
          - response_modes_supported
        id_token_signed_response_alg:
          - id_token_signed_response_alg
          - id_token_signed_response_alg
        token_endpoint: token_endpoint
        response_types_supported:
          - response_types_supported
          - response_types_supported
        request_uri_parameter_supported: true
        grant_types_supported:
          - grant_types_supported
          - grant_types_supported
        end_session_endpoint: end_session_endpoint
        revocation_endpoint: revocation_endpoint
        userinfo_endpoint: userinfo_endpoint
        frontchannel_logout_supported: true
        require_request_uri_registration: true
        code_challenge_methods_supported:
          - code_challenge_methods_supported
          - code_challenge_methods_supported
        credentials_endpoint_draft_00: credentials_endpoint_draft_00
        frontchannel_logout_session_supported: true
        jwks_uri: jwks_uri
        credentials_supported_draft_00:
          - types:
              - types
              - types
            cryptographic_suites_supported:
              - cryptographic_suites_supported
              - cryptographic_suites_supported
            cryptographic_binding_methods_supported:
              - cryptographic_binding_methods_supported
              - cryptographic_binding_methods_supported
            format: format
          - types:
              - types
              - types
            cryptographic_suites_supported:
              - cryptographic_suites_supported
              - cryptographic_suites_supported
            cryptographic_binding_methods_supported:
              - cryptographic_binding_methods_supported
              - cryptographic_binding_methods_supported
            format: format
        subject_types_supported:
          - subject_types_supported
          - subject_types_supported
        id_token_signing_alg_values_supported:
          - id_token_signing_alg_values_supported
          - id_token_signing_alg_values_supported
        registration_endpoint: registration_endpoint
        request_object_signing_alg_values_supported:
          - request_object_signing_alg_values_supported
          - request_object_signing_alg_values_supported
      properties:
        authorization_endpoint:
          description: OAuth 2.0 Authorization Endpoint URL
          type: string
        backchannel_logout_session_supported:
          description: |
            OpenID Connect Back-Channel Logout Session Required. Boolean value specifying whether the OP can pass a sid (session ID)  Claim in the Logout Token to identify the RP session with the OP. If  supported, the sid Claim is also included in ID Tokens issued by the OP
          type: boolean
        backchannel_logout_supported:
          description: |
            OpenID Connect Back-Channel Logout Supported. Boolean value specifying whether the OP supports  back-channel logout, with true indicating support.
          type: boolean
        claims_parameter_supported:
          description: |
            OpenID Connect Claims Parameter Parameter Supported Boolean value specifying whether the OP supports use  of the claims parameter, with true indicating support.
          type: boolean
        claims_supported:
          description: |
            OpenID Connect Supported Claims   JSON array containing a list of the Claim Names of the  Claims that the OpenID Provider MAY be able to supply  values for. Note that for privacy or other reasons,  this might not be an exhaustive list.
          items:
            type: string
          type: array
        code_challenge_methods_supported:
          description: |
            OAuth 2.0 PKCE Supported Code Challenge Methods JSON array containing a list of Proof Key for Code  Exchange (PKCE) [RFC7636] code challenge methods  supported by this authorization server.
          items:
            type: string
          type: array
        credentials_endpoint_draft_00:
          description: |
            OpenID Connect Verifiable Credentials Endpoint Contains the URL of the Verifiable Credentials Endpoint.
          type: string
        credentials_supported_draft_00:
          description: |
            OpenID Connect Verifiable Credentials Supported JSON array containing a list of the Verifiable  Credentials supported by this authorization server.
          items:
            $ref: '#/components/schemas/OIDCConfig_credentials_supported_draft_00_inner'
          type: array
        end_session_endpoint:
          description: |
            OpenID Connect End-Session Endpoint URL at the OP to which an RP can perform  a redirect to request that the End-User be  logged out at the OP.
          type: string
        frontchannel_logout_session_supported:
          description: |
            OpenID Connect Front-Channel Logout Session Required Boolean value specifying whether the OP can pass iss  (issuer) and sid (session ID) query parameters to identify  the RP session with the OP when the frontchannel_logout_uri  is used. If supported, the sid Claim is also included in ID  Tokens issued by the OP.
          type: boolean
        frontchannel_logout_supported:
          description: |
            OpenID Connect Front-Channel Logout Supported Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
          type: boolean
        grant_types_supported:
          description: |
            OAuth 2.0 Supported Grant Types JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
          items:
            type: string
          type: array
        id_token_signed_response_alg:
          description: |
            OpenID Connect Default ID Token Signing Algorithms
            Algorithm used to sign OpenID Connect ID Tokens.
          items:
            type: string
          type: array
        id_token_signing_alg_values_supported:
          description: |
            OpenID Connect Supported ID Token Signing Algorithms
            JSON array containing a list of the JWS signing algorithms  (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
          items:
            type: string
          type: array
        issuer:
          description: |
            OpenID Connect Issuer URL
            An URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery  is supported , this value MUST be identical to the issuer value returned by WebFinger.  This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
          type: string
        jwks_uri:
          description: |
            OpenID Connect Well-Known JSON Web Keys URL
            URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP  uses to validate signatures from the OP. The JWK Set MAY also contain the Server's  encryption key(s), which are used by RPs to encrypt requests to the Server. When both  signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED  for all keys in the referenced JWK Set to indicate each key's intended usage. Although some  algorithms allow the same key to be used for both signatures and encryption, doing so is  NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509  representations of keys provided. When used, the bare key values MUST still be present and  MUST match those in the certificate.
          type: string
        registration_endpoint:
          description: |
            OpenID Connect Dynamic Client Registration Endpoint URL
          type: string
        request_object_signing_alg_values_supported:
          description: |
            OpenID Connect Supported Request Object Signing Algorithms
            JSON array containing a list of the JWS signing algorithms (alg values) supported by  the OP for Request Objects, which are described in Section 6.1 of  OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the  Request Object is passed by value (using the request parameter) and when it is  passed by reference (using the request_uri parameter).
          items:
            type: string
          type: array
        request_parameter_supported:
          description: |
            OpenID Connect Request Parameter Supported
            Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
          type: boolean
        request_uri_parameter_supported:
          description: |
            OpenID Connect Request URI Parameter Supported
            Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
          type: boolean
        require_request_uri_registration:
          description: |
            OpenID Connect Requires Request URI Registration
            Boolean value specifying whether the OP requires any request_uri values used to be  pre-registered using the request_uris registration parameter.
          type: boolean
        response_modes_supported:
          description: |
            OAuth 2.0 Supported Response Modes
            JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
          items:
            type: string
          type: array
        response_types_supported:
          description: |
            OAuth 2.0 Supported Response Types
            JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.  Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
          items:
            type: string
          type: array
        revocation_endpoint:
          description: |
            OAuth 2.0 Token Revocation URL
            URL of the authorization server's OAuth 2.0 revocation endpoint.
          type: string
        scopes_supported:
          description: |
            OAuth 2.0 Supported Scope Values
            JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports.  The server MUST support the openid scope value. Servers MAY choose not to advertise  some supported scope values even when this parameter is used
          items:
            type: string
          type: array
        subject_types_supported:
          description: |
            OpenID Connect Supported Subject Types
            JSON array containing a list of the Subject Identifier types that this OP supports.  Valid types include pairwise and public.
          items:
            type: string
          type: array
        token_endpoint:
          description: OAuth 2.0 Token Endpoint URL
          type: string
        token_endpoint_auth_methods_supported:
          description: |
            OAuth 2.0 Supported Client Authentication Methods
            JSON array containing a list of Client Authentication methods supported by this Token Endpoint.  The options are client_secret_post, client_secret_basic, client_secret_jwt,  and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
          items:
            type: string
          type: array
        userinfo_endpoint:
          description: |
            OpenID Connect Userinfo URL
            URL of the OP's UserInfo Endpoint.
          type: string
        userinfo_signed_response_alg:
          description: |
            OpenID Connect User Userinfo Signing Algorithm
            Algorithm used to sign OpenID Connect Userinfo Responses.
          items:
            type: string
          type: array
        userinfo_signing_alg_values_supported:
          description: |
            OpenID Connect Supported Userinfo Signing Algorithm
            JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA]  supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
          items:
            type: string
          type: array
      required:
        - authorization_endpoint
        - id_token_signed_response_alg
        - id_token_signing_alg_values_supported
        - issuer
        - jwks_uri
        - response_types_supported
        - subject_types_supported
        - token_endpoint
        - userinfo_signed_response_alg
      type: object
    OAuth2Token:
      example:
        access_token: access_token
        refresh_token: refresh_token
        scope: scope
        id_token: 6
        token_type: token_type
        expires_in: 0
      properties:
        access_token:
          description: |
            The access token issued by the authorization server.
          type: string
        expires_in:
          description: |
            The lifetime in seconds of the access token.  For example, the value "3600" denotes that the access  token will expire in one hour from the time the response was generated.
          type: integer
        id_token:
          description: |
            To retrieve a refresh token request the id_token scope.
          type: integer
        refresh_token:
          description: |
            The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope "offline" to your access token request.
          type: string
        scope:
          description: |
            The scope of the access token
          type: string
        token_type:
          description: |
            The type of the token issued
          type: string
      type: object
    GetUserInfo:
      example:
        sub: sub
        website: website
        zoneinfo: zoneinfo
        birthdate: birthdate
        email_verified: true
        gender: gender
        profile: profile
        phone_number_verified: true
        preferred_username: preferred_username
        given_name: given_name
        locale: locale
        middle_name: middle_name
        picture: picture
        updated_at: 0
        name: name
        nickname: nickname
        phone_number: phone_number
        family_name: family_name
        email: email
      properties:
        birthdate:
          description: |
            End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.  The year MAY be 0000, indicating that it is omitted. To represent only the year,  YYYY format is allowed. Note that depending on the underlying platform's date related  function, providing just year can result in varying month and day, so the implementers  need to take this factor into account to correctly process the dates.
          type: string
        email:
          description: |
            End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322]  addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
          type: string
        email_verified:
          description: |
            True if the End-User's e-mail address has been verified; otherwise false. When this  Claim Value is true, this means that the OP took affirmative steps to ensure that  this e-mail address was controlled by the End-User at the time the verification was  performed. The means by which an e-mail address is verified is context-specific, and  dependent upon the trust framework or contractual agreements within which the parties  are operating.
          type: boolean
        family_name:
          description: |
            Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have  multiple family names or no family name; all can be present, with the names being  separated by space characters.
          type: string
        gender:
          description: |
            End-User's gender. Values defined by this specification are female and male.  Other values MAY be used when neither of the defined values are applicable.
          type: string
        given_name:
          description: |
            Given name(s) or first name(s) of the End-User. Note that in some cultures,  people can have multiple given names; all can be present, with the names being  separated by space characters.
          type: string
        locale:
          description: |
            End-User's locale, represented as a BCP47 [RFC5646] language tag. This is  typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an  ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash.  For example, en-US or fr-CA. As a compatibility note, some implementations have  used an underscore as the separator rather than a dash, for example, en_US;  Relying Parties MAY choose to accept this locale syntax as well.
          type: string
        middle_name:
          description: |
            Middle name(s) of the End-User. Note that in some cultures, people can have  multiple middle names; all can be present, with the names being separated by  space characters. Also note that in some cultures, middle names are not used.
          type: string
        name:
          description: |
            End-User's full name in displayable form including all name parts, possibly  including titles and suffixes, ordered according to the End-User's locale and preferences.
          type: string
        nickname:
          description: |
            Casual name of the End-User that may or may not be the same as the given_name.  For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
          type: string
        phone_number:
          description: |
            End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim,  for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension,  it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax,  for example, +1 (604) 555-1234;ext=5678.
          type: string
        phone_number_verified:
          description: |
            True if the End-User's phone number has been verified; otherwise false. When this Claim  Value is true, this means that the OP took affirmative steps to ensure that this phone  number was controlled by the End-User at the time the verification was performed. The means  by which a phone number is verified is context-specific, and dependent upon the trust framework  or contractual agreements within which the parties are operating. When true, the phone_number  Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
          type: boolean
        picture:
          description: |
            URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG,  JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the  End-User, rather than an arbitrary photo taken by the End-User.
          type: string
        preferred_username:
          description: |
            Non-unique shorthand name by which the End-User wishes to be referred to at the RP, such as  janedoe or j.doe. This value MAY be any valid JSON string including special characters  such as @, /, or whitespace.
          type: string
        profile:
          description: |
            URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
          type: string
        sub:
          description: |
            Subject - Identifier for the End-User at the IssuerURL.
          type: string
        updated_at:
          description: |
            Time the End-User's information was last updated. Its value is a JSON number  representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
          type: integer
        website:
          description: |
            URL of the End-User's Web page or blog. This Web page SHOULD contain information  published by the End-User or an organization that the End-User is affiliated with.
          type: string
        zoneinfo:
          description: |
            String from zoneinfo [zoneinfo] time zone database representing the End-User's  time zone. For example, Europe/Paris or America/Los_Angeles.
          type: string
      type: object
    ErrorOAuth2:
      properties:
        error:
          description: Error
          type: string
        error_debug:
          description: Error Debug Information. Only available in dev mode.
          type: string
        error_description:
          description: Error Description
          type: string
        error_hint:
          description: Error Hint. Helps the user identify the error cause.
          type: string
        status_code:
          description: HTTP Status Code
          type: string
      required:
        - error
        - error_description
        - status_code
      type: object
    ResourceCreationError:
      additionalProperties: false
      example:
        traceId: traceId
        name: ResourceCreationError
        details:
          - issue: issue
            field: field
            location: location
            value: value
          - issue: issue
            field: field
            location: location
            value: value
        message: Failed to create resources.
        httpStatusCode: 0.8008281904610115
      properties:
        name:
          enum:
            - ResourceCreationError
          type: string
        message:
          enum:
            - Failed to create resources.
          type: string
        httpStatusCode:
          enum:
            - 424
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    GroupsPerUserLimitExceededError:
      additionalProperties: false
      example:
        traceId: traceId
        name: GroupsPerUserLimitExceededError
        details:
          - issue: issue
            field: field
            location: location
            value: value
          - issue: issue
            field: field
            location: location
            value: value
        message: Amount of groups per user is limited.
        httpStatusCode: 0.8008281904610115
      properties:
        name:
          enum:
            - GroupsPerUserLimitExceededError
          type: string
        message:
          enum:
            - Amount of groups per user is limited.
          type: string
        httpStatusCode:
          enum:
            - 409
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    ActionForbiddenError:
      additionalProperties: false
      example:
        traceId: traceId
        name: ActionForbiddenError
        details:
          - issue: issue
            field: field
            location: location
            value: value
          - issue: issue
            field: field
            location: location
            value: value
        message: Principal can not execute action on given resource
        httpStatusCode: 6.027456183070403
      properties:
        name:
          enum:
            - ActionForbiddenError
          type: string
        message:
          enum:
            - Principal can not execute action on given resource
          type: string
        httpStatusCode:
          enum:
            - 403
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    VPTokenValidationError:
      additionalProperties: false
      properties:
        name:
          enum:
            - VPTokenValidationError
          type: string
        message:
          enum:
            - VP token validation ended with an error
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    GroupNamesInput:
      additionalProperties: false
      example:
        groupNames:
          - groupNames
          - groupNames
          - groupNames
          - groupNames
          - groupNames
      properties:
        groupNames:
          items:
            type: string
          maxItems: 25
          type: array
      required:
        - groupNames
      type: object
    GroupNames:
      example:
        groupNames:
          - groupNames
          - groupNames
        pageToken: '{}'
      properties:
        groupNames:
          items:
            type: string
          type: array
        pageToken:
          type: object
      required:
        - groupNames
      type: object
    BlockedUsersInput:
      additionalProperties: false
      example:
        userIds:
          - userIds
          - userIds
          - userIds
          - userIds
          - userIds
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          type: string
        userIds:
          items:
            type: string
          maxItems: 25
          type: array
      required:
        - userIds
      type: object
    BlockedUsers:
      example:
        userIds:
          - userIds
          - userIds
        pageToken: '{}'
      properties:
        userIds:
          items:
            type: string
          type: array
        pageToken:
          type: object
      required:
        - userIds
      type: object
    InvalidGroupsError:
      additionalProperties: false
      example:
        traceId: traceId
        name: InvalidGroupsError
        details:
          - issue: issue
            field: field
            location: location
            value: value
          - issue: issue
            field: field
            location: location
            value: value
        message: Invalid groups names
        httpStatusCode: 0.8008281904610115
      properties:
        name:
          enum:
            - InvalidGroupsError
          type: string
        message:
          enum:
            - Invalid groups names
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    LoginConfigurationReadInvalidClientIdError:
      additionalProperties: false
      properties:
        name:
          enum:
            - LoginConfigurationReadInvalidClientIdError
          type: string
        message:
          enum:
            - LoginConfigurationReadInvalidClientIdError
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    UnauthorizedError:
      additionalProperties: false
      properties:
        name:
          enum:
            - UnauthorizedError
          type: string
        message:
          enum:
            - Unauthorized
          type: string
        httpStatusCode:
          enum:
            - 401
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    CorsLoginSessionForIdpOK:
      additionalProperties: false
      properties:
        corsLoginSessionForIdpOk:
          type: string
      type: object
    CorsLoginSessionAcceptResponseOK:
      additionalProperties: false
      properties:
        corsLoginSessionAcceptResponseOk:
          type: string
      type: object
    CorsLoginSessionRejectResponseOK:
      additionalProperties: false
      properties:
        corsLoginSessionRejectResponseOk:
          type: string
      type: object
    InvalidClaimContextError:
      additionalProperties: false
      properties:
        name:
          enum:
            - InvalidClaimContextError
          type: string
        message:
          enum:
            - Invalid Claim Context
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    CreateProjectNetworkError:
      additionalProperties: false
      properties:
        name:
          enum:
            - CreateProjectNetworkError
          type: string
        message:
          enum:
            - CreateProjectNetworkError
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    CreateHydraNetworkError:
      additionalProperties: false
      properties:
        name:
          enum:
            - CreateHydraNetworkError
          type: string
        message:
          enum:
            - CreateHydraNetworkError
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    InvalidVPTokenCreationTimeError:
      additionalProperties: false
      properties:
        name:
          enum:
            - InvalidVPTokenCreationTimeError
          type: string
        message:
          enum:
            - VP token has expired
          type: string
        httpStatusCode:
          enum:
            - 400
          type: number
        traceId:
          type: string
        details:
          items:
            $ref: '#/components/schemas/InvalidParameterError_details_inner'
          type: array
      required:
        - httpStatusCode
        - message
        - name
        - traceId
      type: object
    createLoginConfigurations_400_response:
      oneOf:
        - $ref: '#/components/schemas/InvalidParameterError'
        - $ref: '#/components/schemas/CreateHydraNetworkError'
        - $ref: '#/components/schemas/CreateProjectNetworkError'
    ServiceErrorResponse_details_inner:
      additionalProperties: false
      properties:
        issue:
          description: issue
          type: string
        field:
          description: fields
          type: string
        value:
          description: value
          type: string
        location:
          description: location
          type: string
      required:
        - issue
      type: object
    CreateLoginConfigurationOutput_auth:
      additionalProperties: false
      description: OIDC Auth Credentials
      example:
        clientId: clientId
        scope: scope
        clientSecret: clientSecret
        issuer: issuer
      properties:
        clientId:
          description: OAuth 2.0 Client ID
          type: string
        clientSecret:
          description: OAuth 2.0 Client Secret
          type: string
        scope:
          description: OAuth 2.0 Client Scope
          type: string
        issuer:
          description: Issuer URL
          type: string
      required:
        - clientId
      type: object
    LoginSessionDto_authorizationRequest:
      additionalProperties: false
      properties:
        state:
          description: State parameter
          type: string
        presentationDefinition:
          description:
            Presentation Definition to ask from the user. In JSON Stringify
            format.
          type: string
        ari:
          description: ARI is used for analytics proposals.
          type: string
        clientId:
          description: clientId used for detect origin.
          type: string
        nonce:
          description: nonce for VP Token proof challenge
          type: string
      required:
        - presentationDefinition
        - state
      type: object
    InvalidParameterError_details_inner:
      additionalProperties: false
      example:
        issue: issue
        field: field
        location: location
        value: value
      properties:
        issue:
          type: string
        field:
          type: string
        value:
          type: string
        location:
          type: string
      required:
        - issue
      type: object
    JsonWebKey_keys_inner:
      example:
        d: d
        e: e
        crv: crv
        use: use
        kid: kid
        x5c:
          - x5c
          - x5c
        k: k
        dp: dp
        dq: dq
        'n': 'n'
        p: p
        kty: kty
        q: q
        qi: qi
        x: x
        'y': 'y'
        alg: alg
      properties:
        alg:
          description: |
            The "alg" (algorithm) parameter identifies the algorithm intended for use  with the key. The values used should either be registered in the IANA  "JSON Web Signature and Encryption Algorithms" registry established  by [JWA] or be a value that contains a Collision- Resistant Name.
          type: string
        crv:
          type: string
        d:
          type: string
        dp:
          type: string
        dq:
          type: string
        e:
          type: string
        k:
          type: string
        kid:
          description: |
            The "kid" (key ID) parameter is used to match a specific key. This is used,  for instance, to choose among a set of keys within a JWK Set during key  rollover. The structure of the "kid" value is unspecified. When "kid"  values are used within a JWK Set, different keys within the JWK Set SHOULD  use distinct "kid" values. (One example in which different keys might use  the same "kid" value is if they have different "kty" (key type) values but  are considered to be equivalent alternatives by the application using them.)  The "kid" value is a case-sensitive string.
          type: string
        kty:
          description: |
            The "kty" (key type) parameter identifies the cryptographic algorithm family  used with the key, such as "RSA" or "EC". "kty" values should either be  registered in the IANA "JSON Web Key Types" registry established by [JWA]  or be a value that contains a Collision- Resistant Name. The "kty" value  is a case-sensitive string.
          type: string
        'n':
          type: string
        p:
          type: string
        q:
          type: string
        qi:
          type: string
        use:
          description: |
            Use ("public key use") identifies the intended use of the public key. The  "use" parameter is employed to indicate whether a public key is used for  encrypting data or verifying the signature on data. Values are commonly  "sig" (signature) or "enc" (encryption).
          type: string
        x:
          type: string
        x5c:
          description: |
            The "x5c" (X.509 certificate chain) parameter contains a chain of one  or more PKIX certificates [RFC5280]. The certificate chain is represented  as a JSON array of certificate value strings. Each string in the array is  a base64-encoded (Section 4 of [RFC4648] -- not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the  key value MUST be the first certificate.
          items:
            type: string
          type: array
        'y':
          type: string
      required:
        - alg
        - kid
        - kty
        - use
        - x5c
      type: object
    OIDCConfig_credentials_supported_draft_00_inner:
      example:
        types:
          - types
          - types
        cryptographic_suites_supported:
          - cryptographic_suites_supported
          - cryptographic_suites_supported
        cryptographic_binding_methods_supported:
          - cryptographic_binding_methods_supported
          - cryptographic_binding_methods_supported
        format: format
      properties:
        cryptographic_binding_methods_supported:
          items:
            type: string
          type: array
        cryptographic_suites_supported:
          items:
            type: string
          type: array
        format:
          type: string
        types:
          items:
            type: string
          type: array
      type: object
  securitySchemes:
    AwsSigV4:
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
    ApiKey:
      in: header
      name: x-api-key
      type: apiKey
      x-amazon-apigateway-api-key-source: HEADER
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
    ConsumerTokenAuth:
      in: header
      name: authorization
      type: apiKey
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri: arn:aws:apigateway:ap-southeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-southeast-1:792104784284:function:iam-dev-ConsumerTokenAuthorizerLambda91B1796B-QT4lOBGrUdPH:live-alias/invocations
        authorizerResultTtlInSeconds: 0
    UserTokenAuth:
      in: header
      name: authorization
      type: apiKey
    ProjectTokenAuth:
      in: header
      name: authorization
      type: apiKey
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri: arn:aws:apigateway:ap-southeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-southeast-1:792104784284:function:iam-dev-ProjectTokenAuthorizerC83BEF45-elvJgVdbp078:live-alias/invocations
        authorizerResultTtlInSeconds: 0
x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: basic
x-affinidi-default-cors-operation:
  x-amazon-apigateway-integration:
    type: mock
    requestTemplates:
      application/json: |-
        {
        "statusCode" : 200
        }
    responses:
      default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers:
            "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token,Access-Control-Allow-Headers,\
            \ Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,\
            \ Access-Control-Request-Headers'"
          method.response.header.Access-Control-Allow-Methods: "'*'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        responseTemplates:
          application/json: '{}'
x-affinidi-cors-response-headers:
  Access-Control-Allow-Origin:
    $ref: '#/components/headers/Access-Control-Allow-Origin'
  Access-Control-Allow-Methods:
    $ref: '#/components/headers/Access-Control-Allow-Methods'
  Access-Control-Allow-Headers:
    $ref: '#/components/headers/Access-Control-Allow-Headers'
