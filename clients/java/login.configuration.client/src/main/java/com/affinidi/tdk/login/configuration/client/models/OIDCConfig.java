/*
 * OidcVpAdapterBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.login.configuration.client.models;

import java.util.Objects;
import com.affinidi.tdk.login.configuration.client.models.OIDCConfigCredentialsSupportedDraft00Inner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.login.configuration.client.JSON;

/**
 * OIDCConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-02T23:17:41.310085994Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class OIDCConfig {
  public static final String SERIALIZED_NAME_AUTHORIZATION_ENDPOINT = "authorization_endpoint";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ENDPOINT)
  private String authorizationEndpoint;

  public static final String SERIALIZED_NAME_BACKCHANNEL_LOGOUT_SESSION_SUPPORTED = "backchannel_logout_session_supported";
  @SerializedName(SERIALIZED_NAME_BACKCHANNEL_LOGOUT_SESSION_SUPPORTED)
  private Boolean backchannelLogoutSessionSupported;

  public static final String SERIALIZED_NAME_BACKCHANNEL_LOGOUT_SUPPORTED = "backchannel_logout_supported";
  @SerializedName(SERIALIZED_NAME_BACKCHANNEL_LOGOUT_SUPPORTED)
  private Boolean backchannelLogoutSupported;

  public static final String SERIALIZED_NAME_CLAIMS_PARAMETER_SUPPORTED = "claims_parameter_supported";
  @SerializedName(SERIALIZED_NAME_CLAIMS_PARAMETER_SUPPORTED)
  private Boolean claimsParameterSupported;

  public static final String SERIALIZED_NAME_CLAIMS_SUPPORTED = "claims_supported";
  @SerializedName(SERIALIZED_NAME_CLAIMS_SUPPORTED)
  private List<String> claimsSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE_CHALLENGE_METHODS_SUPPORTED = "code_challenge_methods_supported";
  @SerializedName(SERIALIZED_NAME_CODE_CHALLENGE_METHODS_SUPPORTED)
  private List<String> codeChallengeMethodsSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREDENTIALS_ENDPOINT_DRAFT00 = "credentials_endpoint_draft_00";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_ENDPOINT_DRAFT00)
  private String credentialsEndpointDraft00;

  public static final String SERIALIZED_NAME_CREDENTIALS_SUPPORTED_DRAFT00 = "credentials_supported_draft_00";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_SUPPORTED_DRAFT00)
  private List<OIDCConfigCredentialsSupportedDraft00Inner> credentialsSupportedDraft00 = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_SESSION_ENDPOINT = "end_session_endpoint";
  @SerializedName(SERIALIZED_NAME_END_SESSION_ENDPOINT)
  private String endSessionEndpoint;

  public static final String SERIALIZED_NAME_FRONTCHANNEL_LOGOUT_SESSION_SUPPORTED = "frontchannel_logout_session_supported";
  @SerializedName(SERIALIZED_NAME_FRONTCHANNEL_LOGOUT_SESSION_SUPPORTED)
  private Boolean frontchannelLogoutSessionSupported;

  public static final String SERIALIZED_NAME_FRONTCHANNEL_LOGOUT_SUPPORTED = "frontchannel_logout_supported";
  @SerializedName(SERIALIZED_NAME_FRONTCHANNEL_LOGOUT_SUPPORTED)
  private Boolean frontchannelLogoutSupported;

  public static final String SERIALIZED_NAME_GRANT_TYPES_SUPPORTED = "grant_types_supported";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPES_SUPPORTED)
  private List<String> grantTypesSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID_TOKEN_SIGNED_RESPONSE_ALG = "id_token_signed_response_alg";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN_SIGNED_RESPONSE_ALG)
  private List<String> idTokenSignedResponseAlg = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID_TOKEN_SIGNING_ALG_VALUES_SUPPORTED = "id_token_signing_alg_values_supported";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN_SIGNING_ALG_VALUES_SUPPORTED)
  private List<String> idTokenSigningAlgValuesSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_JWKS_URI = "jwks_uri";
  @SerializedName(SERIALIZED_NAME_JWKS_URI)
  private String jwksUri;

  public static final String SERIALIZED_NAME_REGISTRATION_ENDPOINT = "registration_endpoint";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ENDPOINT)
  private String registrationEndpoint;

  public static final String SERIALIZED_NAME_REQUEST_OBJECT_SIGNING_ALG_VALUES_SUPPORTED = "request_object_signing_alg_values_supported";
  @SerializedName(SERIALIZED_NAME_REQUEST_OBJECT_SIGNING_ALG_VALUES_SUPPORTED)
  private List<String> requestObjectSigningAlgValuesSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_PARAMETER_SUPPORTED = "request_parameter_supported";
  @SerializedName(SERIALIZED_NAME_REQUEST_PARAMETER_SUPPORTED)
  private Boolean requestParameterSupported;

  public static final String SERIALIZED_NAME_REQUEST_URI_PARAMETER_SUPPORTED = "request_uri_parameter_supported";
  @SerializedName(SERIALIZED_NAME_REQUEST_URI_PARAMETER_SUPPORTED)
  private Boolean requestUriParameterSupported;

  public static final String SERIALIZED_NAME_REQUIRE_REQUEST_URI_REGISTRATION = "require_request_uri_registration";
  @SerializedName(SERIALIZED_NAME_REQUIRE_REQUEST_URI_REGISTRATION)
  private Boolean requireRequestUriRegistration;

  public static final String SERIALIZED_NAME_RESPONSE_MODES_SUPPORTED = "response_modes_supported";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MODES_SUPPORTED)
  private List<String> responseModesSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_TYPES_SUPPORTED = "response_types_supported";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPES_SUPPORTED)
  private List<String> responseTypesSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVOCATION_ENDPOINT = "revocation_endpoint";
  @SerializedName(SERIALIZED_NAME_REVOCATION_ENDPOINT)
  private String revocationEndpoint;

  public static final String SERIALIZED_NAME_SCOPES_SUPPORTED = "scopes_supported";
  @SerializedName(SERIALIZED_NAME_SCOPES_SUPPORTED)
  private List<String> scopesSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECT_TYPES_SUPPORTED = "subject_types_supported";
  @SerializedName(SERIALIZED_NAME_SUBJECT_TYPES_SUPPORTED)
  private List<String> subjectTypesSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT = "token_endpoint";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT)
  private String tokenEndpoint;

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED = "token_endpoint_auth_methods_supported";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED)
  private List<String> tokenEndpointAuthMethodsSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERINFO_ENDPOINT = "userinfo_endpoint";
  @SerializedName(SERIALIZED_NAME_USERINFO_ENDPOINT)
  private String userinfoEndpoint;

  public static final String SERIALIZED_NAME_USERINFO_SIGNED_RESPONSE_ALG = "userinfo_signed_response_alg";
  @SerializedName(SERIALIZED_NAME_USERINFO_SIGNED_RESPONSE_ALG)
  private List<String> userinfoSignedResponseAlg = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERINFO_SIGNING_ALG_VALUES_SUPPORTED = "userinfo_signing_alg_values_supported";
  @SerializedName(SERIALIZED_NAME_USERINFO_SIGNING_ALG_VALUES_SUPPORTED)
  private List<String> userinfoSigningAlgValuesSupported = new ArrayList<>();

  public OIDCConfig() {
  }

  public OIDCConfig authorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
    return this;
  }

  /**
   * OAuth 2.0 Authorization Endpoint URL
   * @return authorizationEndpoint
   */
  @javax.annotation.Nonnull
  public String getAuthorizationEndpoint() {
    return authorizationEndpoint;
  }

  public void setAuthorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
  }


  public OIDCConfig backchannelLogoutSessionSupported(Boolean backchannelLogoutSessionSupported) {
    this.backchannelLogoutSessionSupported = backchannelLogoutSessionSupported;
    return this;
  }

  /**
   * OpenID Connect Back-Channel Logout Session Required. Boolean value specifying whether the OP can pass a sid (session ID)  Claim in the Logout Token to identify the RP session with the OP. If  supported, the sid Claim is also included in ID Tokens issued by the OP 
   * @return backchannelLogoutSessionSupported
   */
  @javax.annotation.Nullable
  public Boolean getBackchannelLogoutSessionSupported() {
    return backchannelLogoutSessionSupported;
  }

  public void setBackchannelLogoutSessionSupported(Boolean backchannelLogoutSessionSupported) {
    this.backchannelLogoutSessionSupported = backchannelLogoutSessionSupported;
  }


  public OIDCConfig backchannelLogoutSupported(Boolean backchannelLogoutSupported) {
    this.backchannelLogoutSupported = backchannelLogoutSupported;
    return this;
  }

  /**
   * OpenID Connect Back-Channel Logout Supported. Boolean value specifying whether the OP supports  back-channel logout, with true indicating support. 
   * @return backchannelLogoutSupported
   */
  @javax.annotation.Nullable
  public Boolean getBackchannelLogoutSupported() {
    return backchannelLogoutSupported;
  }

  public void setBackchannelLogoutSupported(Boolean backchannelLogoutSupported) {
    this.backchannelLogoutSupported = backchannelLogoutSupported;
  }


  public OIDCConfig claimsParameterSupported(Boolean claimsParameterSupported) {
    this.claimsParameterSupported = claimsParameterSupported;
    return this;
  }

  /**
   * OpenID Connect Claims Parameter Parameter Supported Boolean value specifying whether the OP supports use  of the claims parameter, with true indicating support. 
   * @return claimsParameterSupported
   */
  @javax.annotation.Nullable
  public Boolean getClaimsParameterSupported() {
    return claimsParameterSupported;
  }

  public void setClaimsParameterSupported(Boolean claimsParameterSupported) {
    this.claimsParameterSupported = claimsParameterSupported;
  }


  public OIDCConfig claimsSupported(List<String> claimsSupported) {
    this.claimsSupported = claimsSupported;
    return this;
  }

  public OIDCConfig addClaimsSupportedItem(String claimsSupportedItem) {
    if (this.claimsSupported == null) {
      this.claimsSupported = new ArrayList<>();
    }
    this.claimsSupported.add(claimsSupportedItem);
    return this;
  }

  /**
   * OpenID Connect Supported Claims   JSON array containing a list of the Claim Names of the  Claims that the OpenID Provider MAY be able to supply  values for. Note that for privacy or other reasons,  this might not be an exhaustive list. 
   * @return claimsSupported
   */
  @javax.annotation.Nullable
  public List<String> getClaimsSupported() {
    return claimsSupported;
  }

  public void setClaimsSupported(List<String> claimsSupported) {
    this.claimsSupported = claimsSupported;
  }


  public OIDCConfig codeChallengeMethodsSupported(List<String> codeChallengeMethodsSupported) {
    this.codeChallengeMethodsSupported = codeChallengeMethodsSupported;
    return this;
  }

  public OIDCConfig addCodeChallengeMethodsSupportedItem(String codeChallengeMethodsSupportedItem) {
    if (this.codeChallengeMethodsSupported == null) {
      this.codeChallengeMethodsSupported = new ArrayList<>();
    }
    this.codeChallengeMethodsSupported.add(codeChallengeMethodsSupportedItem);
    return this;
  }

  /**
   * OAuth 2.0 PKCE Supported Code Challenge Methods JSON array containing a list of Proof Key for Code  Exchange (PKCE) [RFC7636] code challenge methods  supported by this authorization server. 
   * @return codeChallengeMethodsSupported
   */
  @javax.annotation.Nullable
  public List<String> getCodeChallengeMethodsSupported() {
    return codeChallengeMethodsSupported;
  }

  public void setCodeChallengeMethodsSupported(List<String> codeChallengeMethodsSupported) {
    this.codeChallengeMethodsSupported = codeChallengeMethodsSupported;
  }


  public OIDCConfig credentialsEndpointDraft00(String credentialsEndpointDraft00) {
    this.credentialsEndpointDraft00 = credentialsEndpointDraft00;
    return this;
  }

  /**
   * OpenID Connect Verifiable Credentials Endpoint Contains the URL of the Verifiable Credentials Endpoint. 
   * @return credentialsEndpointDraft00
   */
  @javax.annotation.Nullable
  public String getCredentialsEndpointDraft00() {
    return credentialsEndpointDraft00;
  }

  public void setCredentialsEndpointDraft00(String credentialsEndpointDraft00) {
    this.credentialsEndpointDraft00 = credentialsEndpointDraft00;
  }


  public OIDCConfig credentialsSupportedDraft00(List<OIDCConfigCredentialsSupportedDraft00Inner> credentialsSupportedDraft00) {
    this.credentialsSupportedDraft00 = credentialsSupportedDraft00;
    return this;
  }

  public OIDCConfig addCredentialsSupportedDraft00Item(OIDCConfigCredentialsSupportedDraft00Inner credentialsSupportedDraft00Item) {
    if (this.credentialsSupportedDraft00 == null) {
      this.credentialsSupportedDraft00 = new ArrayList<>();
    }
    this.credentialsSupportedDraft00.add(credentialsSupportedDraft00Item);
    return this;
  }

  /**
   * OpenID Connect Verifiable Credentials Supported JSON array containing a list of the Verifiable  Credentials supported by this authorization server. 
   * @return credentialsSupportedDraft00
   */
  @javax.annotation.Nullable
  public List<OIDCConfigCredentialsSupportedDraft00Inner> getCredentialsSupportedDraft00() {
    return credentialsSupportedDraft00;
  }

  public void setCredentialsSupportedDraft00(List<OIDCConfigCredentialsSupportedDraft00Inner> credentialsSupportedDraft00) {
    this.credentialsSupportedDraft00 = credentialsSupportedDraft00;
  }


  public OIDCConfig endSessionEndpoint(String endSessionEndpoint) {
    this.endSessionEndpoint = endSessionEndpoint;
    return this;
  }

  /**
   * OpenID Connect End-Session Endpoint URL at the OP to which an RP can perform  a redirect to request that the End-User be  logged out at the OP. 
   * @return endSessionEndpoint
   */
  @javax.annotation.Nullable
  public String getEndSessionEndpoint() {
    return endSessionEndpoint;
  }

  public void setEndSessionEndpoint(String endSessionEndpoint) {
    this.endSessionEndpoint = endSessionEndpoint;
  }


  public OIDCConfig frontchannelLogoutSessionSupported(Boolean frontchannelLogoutSessionSupported) {
    this.frontchannelLogoutSessionSupported = frontchannelLogoutSessionSupported;
    return this;
  }

  /**
   * OpenID Connect Front-Channel Logout Session Required Boolean value specifying whether the OP can pass iss  (issuer) and sid (session ID) query parameters to identify  the RP session with the OP when the frontchannel_logout_uri  is used. If supported, the sid Claim is also included in ID  Tokens issued by the OP. 
   * @return frontchannelLogoutSessionSupported
   */
  @javax.annotation.Nullable
  public Boolean getFrontchannelLogoutSessionSupported() {
    return frontchannelLogoutSessionSupported;
  }

  public void setFrontchannelLogoutSessionSupported(Boolean frontchannelLogoutSessionSupported) {
    this.frontchannelLogoutSessionSupported = frontchannelLogoutSessionSupported;
  }


  public OIDCConfig frontchannelLogoutSupported(Boolean frontchannelLogoutSupported) {
    this.frontchannelLogoutSupported = frontchannelLogoutSupported;
    return this;
  }

  /**
   * OpenID Connect Front-Channel Logout Supported Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support. 
   * @return frontchannelLogoutSupported
   */
  @javax.annotation.Nullable
  public Boolean getFrontchannelLogoutSupported() {
    return frontchannelLogoutSupported;
  }

  public void setFrontchannelLogoutSupported(Boolean frontchannelLogoutSupported) {
    this.frontchannelLogoutSupported = frontchannelLogoutSupported;
  }


  public OIDCConfig grantTypesSupported(List<String> grantTypesSupported) {
    this.grantTypesSupported = grantTypesSupported;
    return this;
  }

  public OIDCConfig addGrantTypesSupportedItem(String grantTypesSupportedItem) {
    if (this.grantTypesSupported == null) {
      this.grantTypesSupported = new ArrayList<>();
    }
    this.grantTypesSupported.add(grantTypesSupportedItem);
    return this;
  }

  /**
   * OAuth 2.0 Supported Grant Types JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports. 
   * @return grantTypesSupported
   */
  @javax.annotation.Nullable
  public List<String> getGrantTypesSupported() {
    return grantTypesSupported;
  }

  public void setGrantTypesSupported(List<String> grantTypesSupported) {
    this.grantTypesSupported = grantTypesSupported;
  }


  public OIDCConfig idTokenSignedResponseAlg(List<String> idTokenSignedResponseAlg) {
    this.idTokenSignedResponseAlg = idTokenSignedResponseAlg;
    return this;
  }

  public OIDCConfig addIdTokenSignedResponseAlgItem(String idTokenSignedResponseAlgItem) {
    if (this.idTokenSignedResponseAlg == null) {
      this.idTokenSignedResponseAlg = new ArrayList<>();
    }
    this.idTokenSignedResponseAlg.add(idTokenSignedResponseAlgItem);
    return this;
  }

  /**
   * OpenID Connect Default ID Token Signing Algorithms Algorithm used to sign OpenID Connect ID Tokens. 
   * @return idTokenSignedResponseAlg
   */
  @javax.annotation.Nonnull
  public List<String> getIdTokenSignedResponseAlg() {
    return idTokenSignedResponseAlg;
  }

  public void setIdTokenSignedResponseAlg(List<String> idTokenSignedResponseAlg) {
    this.idTokenSignedResponseAlg = idTokenSignedResponseAlg;
  }


  public OIDCConfig idTokenSigningAlgValuesSupported(List<String> idTokenSigningAlgValuesSupported) {
    this.idTokenSigningAlgValuesSupported = idTokenSigningAlgValuesSupported;
    return this;
  }

  public OIDCConfig addIdTokenSigningAlgValuesSupportedItem(String idTokenSigningAlgValuesSupportedItem) {
    if (this.idTokenSigningAlgValuesSupported == null) {
      this.idTokenSigningAlgValuesSupported = new ArrayList<>();
    }
    this.idTokenSigningAlgValuesSupported.add(idTokenSigningAlgValuesSupportedItem);
    return this;
  }

  /**
   * OpenID Connect Supported ID Token Signing Algorithms JSON array containing a list of the JWS signing algorithms  (alg values) supported by the OP for the ID Token to encode the Claims in a JWT. 
   * @return idTokenSigningAlgValuesSupported
   */
  @javax.annotation.Nonnull
  public List<String> getIdTokenSigningAlgValuesSupported() {
    return idTokenSigningAlgValuesSupported;
  }

  public void setIdTokenSigningAlgValuesSupported(List<String> idTokenSigningAlgValuesSupported) {
    this.idTokenSigningAlgValuesSupported = idTokenSigningAlgValuesSupported;
  }


  public OIDCConfig issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * OpenID Connect Issuer URL An URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery  is supported , this value MUST be identical to the issuer value returned by WebFinger.  This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL. 
   * @return issuer
   */
  @javax.annotation.Nonnull
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public OIDCConfig jwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
    return this;
  }

  /**
   * OpenID Connect Well-Known JSON Web Keys URL URL of the OP&#39;s JSON Web Key Set [JWK] document. This contains the signing key(s) the RP  uses to validate signatures from the OP. The JWK Set MAY also contain the Server&#39;s  encryption key(s), which are used by RPs to encrypt requests to the Server. When both  signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED  for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some  algorithms allow the same key to be used for both signatures and encryption, doing so is  NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509  representations of keys provided. When used, the bare key values MUST still be present and  MUST match those in the certificate. 
   * @return jwksUri
   */
  @javax.annotation.Nonnull
  public String getJwksUri() {
    return jwksUri;
  }

  public void setJwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
  }


  public OIDCConfig registrationEndpoint(String registrationEndpoint) {
    this.registrationEndpoint = registrationEndpoint;
    return this;
  }

  /**
   * OpenID Connect Dynamic Client Registration Endpoint URL 
   * @return registrationEndpoint
   */
  @javax.annotation.Nullable
  public String getRegistrationEndpoint() {
    return registrationEndpoint;
  }

  public void setRegistrationEndpoint(String registrationEndpoint) {
    this.registrationEndpoint = registrationEndpoint;
  }


  public OIDCConfig requestObjectSigningAlgValuesSupported(List<String> requestObjectSigningAlgValuesSupported) {
    this.requestObjectSigningAlgValuesSupported = requestObjectSigningAlgValuesSupported;
    return this;
  }

  public OIDCConfig addRequestObjectSigningAlgValuesSupportedItem(String requestObjectSigningAlgValuesSupportedItem) {
    if (this.requestObjectSigningAlgValuesSupported == null) {
      this.requestObjectSigningAlgValuesSupported = new ArrayList<>();
    }
    this.requestObjectSigningAlgValuesSupported.add(requestObjectSigningAlgValuesSupportedItem);
    return this;
  }

  /**
   * OpenID Connect Supported Request Object Signing Algorithms JSON array containing a list of the JWS signing algorithms (alg values) supported by  the OP for Request Objects, which are described in Section 6.1 of  OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the  Request Object is passed by value (using the request parameter) and when it is  passed by reference (using the request_uri parameter). 
   * @return requestObjectSigningAlgValuesSupported
   */
  @javax.annotation.Nullable
  public List<String> getRequestObjectSigningAlgValuesSupported() {
    return requestObjectSigningAlgValuesSupported;
  }

  public void setRequestObjectSigningAlgValuesSupported(List<String> requestObjectSigningAlgValuesSupported) {
    this.requestObjectSigningAlgValuesSupported = requestObjectSigningAlgValuesSupported;
  }


  public OIDCConfig requestParameterSupported(Boolean requestParameterSupported) {
    this.requestParameterSupported = requestParameterSupported;
    return this;
  }

  /**
   * OpenID Connect Request Parameter Supported Boolean value specifying whether the OP supports use of the request parameter, with true indicating support. 
   * @return requestParameterSupported
   */
  @javax.annotation.Nullable
  public Boolean getRequestParameterSupported() {
    return requestParameterSupported;
  }

  public void setRequestParameterSupported(Boolean requestParameterSupported) {
    this.requestParameterSupported = requestParameterSupported;
  }


  public OIDCConfig requestUriParameterSupported(Boolean requestUriParameterSupported) {
    this.requestUriParameterSupported = requestUriParameterSupported;
    return this;
  }

  /**
   * OpenID Connect Request URI Parameter Supported Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support. 
   * @return requestUriParameterSupported
   */
  @javax.annotation.Nullable
  public Boolean getRequestUriParameterSupported() {
    return requestUriParameterSupported;
  }

  public void setRequestUriParameterSupported(Boolean requestUriParameterSupported) {
    this.requestUriParameterSupported = requestUriParameterSupported;
  }


  public OIDCConfig requireRequestUriRegistration(Boolean requireRequestUriRegistration) {
    this.requireRequestUriRegistration = requireRequestUriRegistration;
    return this;
  }

  /**
   * OpenID Connect Requires Request URI Registration Boolean value specifying whether the OP requires any request_uri values used to be  pre-registered using the request_uris registration parameter. 
   * @return requireRequestUriRegistration
   */
  @javax.annotation.Nullable
  public Boolean getRequireRequestUriRegistration() {
    return requireRequestUriRegistration;
  }

  public void setRequireRequestUriRegistration(Boolean requireRequestUriRegistration) {
    this.requireRequestUriRegistration = requireRequestUriRegistration;
  }


  public OIDCConfig responseModesSupported(List<String> responseModesSupported) {
    this.responseModesSupported = responseModesSupported;
    return this;
  }

  public OIDCConfig addResponseModesSupportedItem(String responseModesSupportedItem) {
    if (this.responseModesSupported == null) {
      this.responseModesSupported = new ArrayList<>();
    }
    this.responseModesSupported.add(responseModesSupportedItem);
    return this;
  }

  /**
   * OAuth 2.0 Supported Response Modes JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports. 
   * @return responseModesSupported
   */
  @javax.annotation.Nullable
  public List<String> getResponseModesSupported() {
    return responseModesSupported;
  }

  public void setResponseModesSupported(List<String> responseModesSupported) {
    this.responseModesSupported = responseModesSupported;
  }


  public OIDCConfig responseTypesSupported(List<String> responseTypesSupported) {
    this.responseTypesSupported = responseTypesSupported;
    return this;
  }

  public OIDCConfig addResponseTypesSupportedItem(String responseTypesSupportedItem) {
    if (this.responseTypesSupported == null) {
      this.responseTypesSupported = new ArrayList<>();
    }
    this.responseTypesSupported.add(responseTypesSupportedItem);
    return this;
  }

  /**
   * OAuth 2.0 Supported Response Types JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.  Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values. 
   * @return responseTypesSupported
   */
  @javax.annotation.Nonnull
  public List<String> getResponseTypesSupported() {
    return responseTypesSupported;
  }

  public void setResponseTypesSupported(List<String> responseTypesSupported) {
    this.responseTypesSupported = responseTypesSupported;
  }


  public OIDCConfig revocationEndpoint(String revocationEndpoint) {
    this.revocationEndpoint = revocationEndpoint;
    return this;
  }

  /**
   * OAuth 2.0 Token Revocation URL URL of the authorization server&#39;s OAuth 2.0 revocation endpoint. 
   * @return revocationEndpoint
   */
  @javax.annotation.Nullable
  public String getRevocationEndpoint() {
    return revocationEndpoint;
  }

  public void setRevocationEndpoint(String revocationEndpoint) {
    this.revocationEndpoint = revocationEndpoint;
  }


  public OIDCConfig scopesSupported(List<String> scopesSupported) {
    this.scopesSupported = scopesSupported;
    return this;
  }

  public OIDCConfig addScopesSupportedItem(String scopesSupportedItem) {
    if (this.scopesSupported == null) {
      this.scopesSupported = new ArrayList<>();
    }
    this.scopesSupported.add(scopesSupportedItem);
    return this;
  }

  /**
   * OAuth 2.0 Supported Scope Values JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports.  The server MUST support the openid scope value. Servers MAY choose not to advertise  some supported scope values even when this parameter is used 
   * @return scopesSupported
   */
  @javax.annotation.Nullable
  public List<String> getScopesSupported() {
    return scopesSupported;
  }

  public void setScopesSupported(List<String> scopesSupported) {
    this.scopesSupported = scopesSupported;
  }


  public OIDCConfig subjectTypesSupported(List<String> subjectTypesSupported) {
    this.subjectTypesSupported = subjectTypesSupported;
    return this;
  }

  public OIDCConfig addSubjectTypesSupportedItem(String subjectTypesSupportedItem) {
    if (this.subjectTypesSupported == null) {
      this.subjectTypesSupported = new ArrayList<>();
    }
    this.subjectTypesSupported.add(subjectTypesSupportedItem);
    return this;
  }

  /**
   * OpenID Connect Supported Subject Types JSON array containing a list of the Subject Identifier types that this OP supports.  Valid types include pairwise and public. 
   * @return subjectTypesSupported
   */
  @javax.annotation.Nonnull
  public List<String> getSubjectTypesSupported() {
    return subjectTypesSupported;
  }

  public void setSubjectTypesSupported(List<String> subjectTypesSupported) {
    this.subjectTypesSupported = subjectTypesSupported;
  }


  public OIDCConfig tokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
    return this;
  }

  /**
   * OAuth 2.0 Token Endpoint URL
   * @return tokenEndpoint
   */
  @javax.annotation.Nonnull
  public String getTokenEndpoint() {
    return tokenEndpoint;
  }

  public void setTokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
  }


  public OIDCConfig tokenEndpointAuthMethodsSupported(List<String> tokenEndpointAuthMethodsSupported) {
    this.tokenEndpointAuthMethodsSupported = tokenEndpointAuthMethodsSupported;
    return this;
  }

  public OIDCConfig addTokenEndpointAuthMethodsSupportedItem(String tokenEndpointAuthMethodsSupportedItem) {
    if (this.tokenEndpointAuthMethodsSupported == null) {
      this.tokenEndpointAuthMethodsSupported = new ArrayList<>();
    }
    this.tokenEndpointAuthMethodsSupported.add(tokenEndpointAuthMethodsSupportedItem);
    return this;
  }

  /**
   * OAuth 2.0 Supported Client Authentication Methods JSON array containing a list of Client Authentication methods supported by this Token Endpoint.  The options are client_secret_post, client_secret_basic, client_secret_jwt,  and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0 
   * @return tokenEndpointAuthMethodsSupported
   */
  @javax.annotation.Nullable
  public List<String> getTokenEndpointAuthMethodsSupported() {
    return tokenEndpointAuthMethodsSupported;
  }

  public void setTokenEndpointAuthMethodsSupported(List<String> tokenEndpointAuthMethodsSupported) {
    this.tokenEndpointAuthMethodsSupported = tokenEndpointAuthMethodsSupported;
  }


  public OIDCConfig userinfoEndpoint(String userinfoEndpoint) {
    this.userinfoEndpoint = userinfoEndpoint;
    return this;
  }

  /**
   * OpenID Connect Userinfo URL URL of the OP&#39;s UserInfo Endpoint. 
   * @return userinfoEndpoint
   */
  @javax.annotation.Nullable
  public String getUserinfoEndpoint() {
    return userinfoEndpoint;
  }

  public void setUserinfoEndpoint(String userinfoEndpoint) {
    this.userinfoEndpoint = userinfoEndpoint;
  }


  public OIDCConfig userinfoSignedResponseAlg(List<String> userinfoSignedResponseAlg) {
    this.userinfoSignedResponseAlg = userinfoSignedResponseAlg;
    return this;
  }

  public OIDCConfig addUserinfoSignedResponseAlgItem(String userinfoSignedResponseAlgItem) {
    if (this.userinfoSignedResponseAlg == null) {
      this.userinfoSignedResponseAlg = new ArrayList<>();
    }
    this.userinfoSignedResponseAlg.add(userinfoSignedResponseAlgItem);
    return this;
  }

  /**
   * OpenID Connect User Userinfo Signing Algorithm Algorithm used to sign OpenID Connect Userinfo Responses. 
   * @return userinfoSignedResponseAlg
   */
  @javax.annotation.Nonnull
  public List<String> getUserinfoSignedResponseAlg() {
    return userinfoSignedResponseAlg;
  }

  public void setUserinfoSignedResponseAlg(List<String> userinfoSignedResponseAlg) {
    this.userinfoSignedResponseAlg = userinfoSignedResponseAlg;
  }


  public OIDCConfig userinfoSigningAlgValuesSupported(List<String> userinfoSigningAlgValuesSupported) {
    this.userinfoSigningAlgValuesSupported = userinfoSigningAlgValuesSupported;
    return this;
  }

  public OIDCConfig addUserinfoSigningAlgValuesSupportedItem(String userinfoSigningAlgValuesSupportedItem) {
    if (this.userinfoSigningAlgValuesSupported == null) {
      this.userinfoSigningAlgValuesSupported = new ArrayList<>();
    }
    this.userinfoSigningAlgValuesSupported.add(userinfoSigningAlgValuesSupportedItem);
    return this;
  }

  /**
   * OpenID Connect Supported Userinfo Signing Algorithm JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA]  supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]. 
   * @return userinfoSigningAlgValuesSupported
   */
  @javax.annotation.Nullable
  public List<String> getUserinfoSigningAlgValuesSupported() {
    return userinfoSigningAlgValuesSupported;
  }

  public void setUserinfoSigningAlgValuesSupported(List<String> userinfoSigningAlgValuesSupported) {
    this.userinfoSigningAlgValuesSupported = userinfoSigningAlgValuesSupported;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OIDCConfig oiDCConfig = (OIDCConfig) o;
    return Objects.equals(this.authorizationEndpoint, oiDCConfig.authorizationEndpoint) &&
        Objects.equals(this.backchannelLogoutSessionSupported, oiDCConfig.backchannelLogoutSessionSupported) &&
        Objects.equals(this.backchannelLogoutSupported, oiDCConfig.backchannelLogoutSupported) &&
        Objects.equals(this.claimsParameterSupported, oiDCConfig.claimsParameterSupported) &&
        Objects.equals(this.claimsSupported, oiDCConfig.claimsSupported) &&
        Objects.equals(this.codeChallengeMethodsSupported, oiDCConfig.codeChallengeMethodsSupported) &&
        Objects.equals(this.credentialsEndpointDraft00, oiDCConfig.credentialsEndpointDraft00) &&
        Objects.equals(this.credentialsSupportedDraft00, oiDCConfig.credentialsSupportedDraft00) &&
        Objects.equals(this.endSessionEndpoint, oiDCConfig.endSessionEndpoint) &&
        Objects.equals(this.frontchannelLogoutSessionSupported, oiDCConfig.frontchannelLogoutSessionSupported) &&
        Objects.equals(this.frontchannelLogoutSupported, oiDCConfig.frontchannelLogoutSupported) &&
        Objects.equals(this.grantTypesSupported, oiDCConfig.grantTypesSupported) &&
        Objects.equals(this.idTokenSignedResponseAlg, oiDCConfig.idTokenSignedResponseAlg) &&
        Objects.equals(this.idTokenSigningAlgValuesSupported, oiDCConfig.idTokenSigningAlgValuesSupported) &&
        Objects.equals(this.issuer, oiDCConfig.issuer) &&
        Objects.equals(this.jwksUri, oiDCConfig.jwksUri) &&
        Objects.equals(this.registrationEndpoint, oiDCConfig.registrationEndpoint) &&
        Objects.equals(this.requestObjectSigningAlgValuesSupported, oiDCConfig.requestObjectSigningAlgValuesSupported) &&
        Objects.equals(this.requestParameterSupported, oiDCConfig.requestParameterSupported) &&
        Objects.equals(this.requestUriParameterSupported, oiDCConfig.requestUriParameterSupported) &&
        Objects.equals(this.requireRequestUriRegistration, oiDCConfig.requireRequestUriRegistration) &&
        Objects.equals(this.responseModesSupported, oiDCConfig.responseModesSupported) &&
        Objects.equals(this.responseTypesSupported, oiDCConfig.responseTypesSupported) &&
        Objects.equals(this.revocationEndpoint, oiDCConfig.revocationEndpoint) &&
        Objects.equals(this.scopesSupported, oiDCConfig.scopesSupported) &&
        Objects.equals(this.subjectTypesSupported, oiDCConfig.subjectTypesSupported) &&
        Objects.equals(this.tokenEndpoint, oiDCConfig.tokenEndpoint) &&
        Objects.equals(this.tokenEndpointAuthMethodsSupported, oiDCConfig.tokenEndpointAuthMethodsSupported) &&
        Objects.equals(this.userinfoEndpoint, oiDCConfig.userinfoEndpoint) &&
        Objects.equals(this.userinfoSignedResponseAlg, oiDCConfig.userinfoSignedResponseAlg) &&
        Objects.equals(this.userinfoSigningAlgValuesSupported, oiDCConfig.userinfoSigningAlgValuesSupported);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationEndpoint, backchannelLogoutSessionSupported, backchannelLogoutSupported, claimsParameterSupported, claimsSupported, codeChallengeMethodsSupported, credentialsEndpointDraft00, credentialsSupportedDraft00, endSessionEndpoint, frontchannelLogoutSessionSupported, frontchannelLogoutSupported, grantTypesSupported, idTokenSignedResponseAlg, idTokenSigningAlgValuesSupported, issuer, jwksUri, registrationEndpoint, requestObjectSigningAlgValuesSupported, requestParameterSupported, requestUriParameterSupported, requireRequestUriRegistration, responseModesSupported, responseTypesSupported, revocationEndpoint, scopesSupported, subjectTypesSupported, tokenEndpoint, tokenEndpointAuthMethodsSupported, userinfoEndpoint, userinfoSignedResponseAlg, userinfoSigningAlgValuesSupported);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OIDCConfig {\n");
    sb.append("    authorizationEndpoint: ").append(toIndentedString(authorizationEndpoint)).append("\n");
    sb.append("    backchannelLogoutSessionSupported: ").append(toIndentedString(backchannelLogoutSessionSupported)).append("\n");
    sb.append("    backchannelLogoutSupported: ").append(toIndentedString(backchannelLogoutSupported)).append("\n");
    sb.append("    claimsParameterSupported: ").append(toIndentedString(claimsParameterSupported)).append("\n");
    sb.append("    claimsSupported: ").append(toIndentedString(claimsSupported)).append("\n");
    sb.append("    codeChallengeMethodsSupported: ").append(toIndentedString(codeChallengeMethodsSupported)).append("\n");
    sb.append("    credentialsEndpointDraft00: ").append(toIndentedString(credentialsEndpointDraft00)).append("\n");
    sb.append("    credentialsSupportedDraft00: ").append(toIndentedString(credentialsSupportedDraft00)).append("\n");
    sb.append("    endSessionEndpoint: ").append(toIndentedString(endSessionEndpoint)).append("\n");
    sb.append("    frontchannelLogoutSessionSupported: ").append(toIndentedString(frontchannelLogoutSessionSupported)).append("\n");
    sb.append("    frontchannelLogoutSupported: ").append(toIndentedString(frontchannelLogoutSupported)).append("\n");
    sb.append("    grantTypesSupported: ").append(toIndentedString(grantTypesSupported)).append("\n");
    sb.append("    idTokenSignedResponseAlg: ").append(toIndentedString(idTokenSignedResponseAlg)).append("\n");
    sb.append("    idTokenSigningAlgValuesSupported: ").append(toIndentedString(idTokenSigningAlgValuesSupported)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    jwksUri: ").append(toIndentedString(jwksUri)).append("\n");
    sb.append("    registrationEndpoint: ").append(toIndentedString(registrationEndpoint)).append("\n");
    sb.append("    requestObjectSigningAlgValuesSupported: ").append(toIndentedString(requestObjectSigningAlgValuesSupported)).append("\n");
    sb.append("    requestParameterSupported: ").append(toIndentedString(requestParameterSupported)).append("\n");
    sb.append("    requestUriParameterSupported: ").append(toIndentedString(requestUriParameterSupported)).append("\n");
    sb.append("    requireRequestUriRegistration: ").append(toIndentedString(requireRequestUriRegistration)).append("\n");
    sb.append("    responseModesSupported: ").append(toIndentedString(responseModesSupported)).append("\n");
    sb.append("    responseTypesSupported: ").append(toIndentedString(responseTypesSupported)).append("\n");
    sb.append("    revocationEndpoint: ").append(toIndentedString(revocationEndpoint)).append("\n");
    sb.append("    scopesSupported: ").append(toIndentedString(scopesSupported)).append("\n");
    sb.append("    subjectTypesSupported: ").append(toIndentedString(subjectTypesSupported)).append("\n");
    sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
    sb.append("    tokenEndpointAuthMethodsSupported: ").append(toIndentedString(tokenEndpointAuthMethodsSupported)).append("\n");
    sb.append("    userinfoEndpoint: ").append(toIndentedString(userinfoEndpoint)).append("\n");
    sb.append("    userinfoSignedResponseAlg: ").append(toIndentedString(userinfoSignedResponseAlg)).append("\n");
    sb.append("    userinfoSigningAlgValuesSupported: ").append(toIndentedString(userinfoSigningAlgValuesSupported)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorization_endpoint");
    openapiFields.add("backchannel_logout_session_supported");
    openapiFields.add("backchannel_logout_supported");
    openapiFields.add("claims_parameter_supported");
    openapiFields.add("claims_supported");
    openapiFields.add("code_challenge_methods_supported");
    openapiFields.add("credentials_endpoint_draft_00");
    openapiFields.add("credentials_supported_draft_00");
    openapiFields.add("end_session_endpoint");
    openapiFields.add("frontchannel_logout_session_supported");
    openapiFields.add("frontchannel_logout_supported");
    openapiFields.add("grant_types_supported");
    openapiFields.add("id_token_signed_response_alg");
    openapiFields.add("id_token_signing_alg_values_supported");
    openapiFields.add("issuer");
    openapiFields.add("jwks_uri");
    openapiFields.add("registration_endpoint");
    openapiFields.add("request_object_signing_alg_values_supported");
    openapiFields.add("request_parameter_supported");
    openapiFields.add("request_uri_parameter_supported");
    openapiFields.add("require_request_uri_registration");
    openapiFields.add("response_modes_supported");
    openapiFields.add("response_types_supported");
    openapiFields.add("revocation_endpoint");
    openapiFields.add("scopes_supported");
    openapiFields.add("subject_types_supported");
    openapiFields.add("token_endpoint");
    openapiFields.add("token_endpoint_auth_methods_supported");
    openapiFields.add("userinfo_endpoint");
    openapiFields.add("userinfo_signed_response_alg");
    openapiFields.add("userinfo_signing_alg_values_supported");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorization_endpoint");
    openapiRequiredFields.add("id_token_signed_response_alg");
    openapiRequiredFields.add("id_token_signing_alg_values_supported");
    openapiRequiredFields.add("issuer");
    openapiRequiredFields.add("jwks_uri");
    openapiRequiredFields.add("response_types_supported");
    openapiRequiredFields.add("subject_types_supported");
    openapiRequiredFields.add("token_endpoint");
    openapiRequiredFields.add("userinfo_signed_response_alg");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OIDCConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OIDCConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OIDCConfig is not found in the empty JSON string", OIDCConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OIDCConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OIDCConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OIDCConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("authorization_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_endpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("claims_supported") != null && !jsonObj.get("claims_supported").isJsonNull() && !jsonObj.get("claims_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `claims_supported` to be an array in the JSON string but got `%s`", jsonObj.get("claims_supported").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("code_challenge_methods_supported") != null && !jsonObj.get("code_challenge_methods_supported").isJsonNull() && !jsonObj.get("code_challenge_methods_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `code_challenge_methods_supported` to be an array in the JSON string but got `%s`", jsonObj.get("code_challenge_methods_supported").toString()));
      }
      if ((jsonObj.get("credentials_endpoint_draft_00") != null && !jsonObj.get("credentials_endpoint_draft_00").isJsonNull()) && !jsonObj.get("credentials_endpoint_draft_00").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentials_endpoint_draft_00` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentials_endpoint_draft_00").toString()));
      }
      if (jsonObj.get("credentials_supported_draft_00") != null && !jsonObj.get("credentials_supported_draft_00").isJsonNull()) {
        JsonArray jsonArraycredentialsSupportedDraft00 = jsonObj.getAsJsonArray("credentials_supported_draft_00");
        if (jsonArraycredentialsSupportedDraft00 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("credentials_supported_draft_00").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `credentials_supported_draft_00` to be an array in the JSON string but got `%s`", jsonObj.get("credentials_supported_draft_00").toString()));
          }

          // validate the optional field `credentials_supported_draft_00` (array)
          for (int i = 0; i < jsonArraycredentialsSupportedDraft00.size(); i++) {
            OIDCConfigCredentialsSupportedDraft00Inner.validateJsonElement(jsonArraycredentialsSupportedDraft00.get(i));
          };
        }
      }
      if ((jsonObj.get("end_session_endpoint") != null && !jsonObj.get("end_session_endpoint").isJsonNull()) && !jsonObj.get("end_session_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_session_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_session_endpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("grant_types_supported") != null && !jsonObj.get("grant_types_supported").isJsonNull() && !jsonObj.get("grant_types_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grant_types_supported` to be an array in the JSON string but got `%s`", jsonObj.get("grant_types_supported").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("id_token_signed_response_alg") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("id_token_signed_response_alg").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_token_signed_response_alg` to be an array in the JSON string but got `%s`", jsonObj.get("id_token_signed_response_alg").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("id_token_signing_alg_values_supported") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("id_token_signing_alg_values_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_token_signing_alg_values_supported` to be an array in the JSON string but got `%s`", jsonObj.get("id_token_signing_alg_values_supported").toString()));
      }
      if (!jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if (!jsonObj.get("jwks_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwks_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwks_uri").toString()));
      }
      if ((jsonObj.get("registration_endpoint") != null && !jsonObj.get("registration_endpoint").isJsonNull()) && !jsonObj.get("registration_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registration_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registration_endpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("request_object_signing_alg_values_supported") != null && !jsonObj.get("request_object_signing_alg_values_supported").isJsonNull() && !jsonObj.get("request_object_signing_alg_values_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_object_signing_alg_values_supported` to be an array in the JSON string but got `%s`", jsonObj.get("request_object_signing_alg_values_supported").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("response_modes_supported") != null && !jsonObj.get("response_modes_supported").isJsonNull() && !jsonObj.get("response_modes_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_modes_supported` to be an array in the JSON string but got `%s`", jsonObj.get("response_modes_supported").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("response_types_supported") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("response_types_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_types_supported` to be an array in the JSON string but got `%s`", jsonObj.get("response_types_supported").toString()));
      }
      if ((jsonObj.get("revocation_endpoint") != null && !jsonObj.get("revocation_endpoint").isJsonNull()) && !jsonObj.get("revocation_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revocation_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revocation_endpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes_supported") != null && !jsonObj.get("scopes_supported").isJsonNull() && !jsonObj.get("scopes_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes_supported` to be an array in the JSON string but got `%s`", jsonObj.get("scopes_supported").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("subject_types_supported") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("subject_types_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_types_supported` to be an array in the JSON string but got `%s`", jsonObj.get("subject_types_supported").toString()));
      }
      if (!jsonObj.get("token_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_endpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("token_endpoint_auth_methods_supported") != null && !jsonObj.get("token_endpoint_auth_methods_supported").isJsonNull() && !jsonObj.get("token_endpoint_auth_methods_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_endpoint_auth_methods_supported` to be an array in the JSON string but got `%s`", jsonObj.get("token_endpoint_auth_methods_supported").toString()));
      }
      if ((jsonObj.get("userinfo_endpoint") != null && !jsonObj.get("userinfo_endpoint").isJsonNull()) && !jsonObj.get("userinfo_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userinfo_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userinfo_endpoint").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("userinfo_signed_response_alg") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("userinfo_signed_response_alg").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userinfo_signed_response_alg` to be an array in the JSON string but got `%s`", jsonObj.get("userinfo_signed_response_alg").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("userinfo_signing_alg_values_supported") != null && !jsonObj.get("userinfo_signing_alg_values_supported").isJsonNull() && !jsonObj.get("userinfo_signing_alg_values_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userinfo_signing_alg_values_supported` to be an array in the JSON string but got `%s`", jsonObj.get("userinfo_signing_alg_values_supported").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OIDCConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OIDCConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OIDCConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OIDCConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<OIDCConfig>() {
           @Override
           public void write(JsonWriter out, OIDCConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OIDCConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OIDCConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OIDCConfig
   * @throws IOException if the JSON string is invalid with respect to OIDCConfig
   */
  public static OIDCConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OIDCConfig.class);
  }

  /**
   * Convert an instance of OIDCConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

