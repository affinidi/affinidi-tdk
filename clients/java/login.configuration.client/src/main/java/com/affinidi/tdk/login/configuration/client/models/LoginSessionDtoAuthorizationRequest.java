/*
 * OidcVpAdapterBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.login.configuration.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.login.configuration.client.JSON;

/**
 * LoginSessionDtoAuthorizationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-01T23:17:44.744502029Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class LoginSessionDtoAuthorizationRequest {
  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_PRESENTATION_DEFINITION = "presentationDefinition";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_DEFINITION)
  private String presentationDefinition;

  public static final String SERIALIZED_NAME_ARI = "ari";
  @SerializedName(SERIALIZED_NAME_ARI)
  private String ari;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public LoginSessionDtoAuthorizationRequest() {
  }

  public LoginSessionDtoAuthorizationRequest state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State parameter
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public LoginSessionDtoAuthorizationRequest presentationDefinition(String presentationDefinition) {
    this.presentationDefinition = presentationDefinition;
    return this;
  }

  /**
   * Presentation Definition to ask from the user. In JSON Stringify format.
   * @return presentationDefinition
   */
  @javax.annotation.Nonnull
  public String getPresentationDefinition() {
    return presentationDefinition;
  }

  public void setPresentationDefinition(String presentationDefinition) {
    this.presentationDefinition = presentationDefinition;
  }


  public LoginSessionDtoAuthorizationRequest ari(String ari) {
    this.ari = ari;
    return this;
  }

  /**
   * ARI is used for analytics proposals.
   * @return ari
   */
  @javax.annotation.Nullable
  public String getAri() {
    return ari;
  }

  public void setAri(String ari) {
    this.ari = ari;
  }


  public LoginSessionDtoAuthorizationRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * clientId used for detect origin.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public LoginSessionDtoAuthorizationRequest nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * nonce for VP Token proof challenge
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginSessionDtoAuthorizationRequest loginSessionDtoAuthorizationRequest = (LoginSessionDtoAuthorizationRequest) o;
    return Objects.equals(this.state, loginSessionDtoAuthorizationRequest.state) &&
        Objects.equals(this.presentationDefinition, loginSessionDtoAuthorizationRequest.presentationDefinition) &&
        Objects.equals(this.ari, loginSessionDtoAuthorizationRequest.ari) &&
        Objects.equals(this.clientId, loginSessionDtoAuthorizationRequest.clientId) &&
        Objects.equals(this.nonce, loginSessionDtoAuthorizationRequest.nonce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, presentationDefinition, ari, clientId, nonce);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginSessionDtoAuthorizationRequest {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    presentationDefinition: ").append(toIndentedString(presentationDefinition)).append("\n");
    sb.append("    ari: ").append(toIndentedString(ari)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("state");
    openapiFields.add("presentationDefinition");
    openapiFields.add("ari");
    openapiFields.add("clientId");
    openapiFields.add("nonce");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("presentationDefinition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoginSessionDtoAuthorizationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoginSessionDtoAuthorizationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoginSessionDtoAuthorizationRequest is not found in the empty JSON string", LoginSessionDtoAuthorizationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoginSessionDtoAuthorizationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoginSessionDtoAuthorizationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoginSessionDtoAuthorizationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("presentationDefinition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presentationDefinition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presentationDefinition").toString()));
      }
      if ((jsonObj.get("ari") != null && !jsonObj.get("ari").isJsonNull()) && !jsonObj.get("ari").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ari` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ari").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoginSessionDtoAuthorizationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoginSessionDtoAuthorizationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoginSessionDtoAuthorizationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoginSessionDtoAuthorizationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LoginSessionDtoAuthorizationRequest>() {
           @Override
           public void write(JsonWriter out, LoginSessionDtoAuthorizationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoginSessionDtoAuthorizationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoginSessionDtoAuthorizationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoginSessionDtoAuthorizationRequest
   * @throws IOException if the JSON string is invalid with respect to LoginSessionDtoAuthorizationRequest
   */
  public static LoginSessionDtoAuthorizationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoginSessionDtoAuthorizationRequest.class);
  }

  /**
   * Convert an instance of LoginSessionDtoAuthorizationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

