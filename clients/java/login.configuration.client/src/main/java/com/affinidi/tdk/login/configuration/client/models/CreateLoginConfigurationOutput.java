/*
 * OidcVpAdapterBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.login.configuration.client.models;

import java.util.Objects;
import com.affinidi.tdk.login.configuration.client.models.CreateLoginConfigurationOutputAuth;
import com.affinidi.tdk.login.configuration.client.models.LoginConfigurationClientMetadataOutput;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.login.configuration.client.JSON;

/**
 * CreateLoginConfigurationOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-23T23:17:15.638345025Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class CreateLoginConfigurationOutput {
  public static final String SERIALIZED_NAME_ARI = "ari";
  @SerializedName(SERIALIZED_NAME_ARI)
  private String ari;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  private String configurationId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AUTH = "auth";
  @SerializedName(SERIALIZED_NAME_AUTH)
  private CreateLoginConfigurationOutputAuth auth;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirectUris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<String> redirectUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_METADATA = "clientMetadata";
  @SerializedName(SERIALIZED_NAME_CLIENT_METADATA)
  private LoginConfigurationClientMetadataOutput clientMetadata;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_POST_LOGOUT_REDIRECT_URIS = "postLogoutRedirectUris";
  @SerializedName(SERIALIZED_NAME_POST_LOGOUT_REDIRECT_URIS)
  private List<String> postLogoutRedirectUris = new ArrayList<>();

  public CreateLoginConfigurationOutput() {
  }

  public CreateLoginConfigurationOutput ari(String ari) {
    this.ari = ari;
    return this;
  }

  /**
   * Configuration ari
   * @return ari
   */
  @javax.annotation.Nonnull
  public String getAri() {
    return ari;
  }

  public void setAri(String ari) {
    this.ari = ari;
  }


  public CreateLoginConfigurationOutput projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project id
   * @return projectId
   */
  @javax.annotation.Nonnull
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public CreateLoginConfigurationOutput configurationId(String configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Configuration id
   * @return configurationId
   */
  @javax.annotation.Nullable
  public String getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(String configurationId) {
    this.configurationId = configurationId;
  }


  public CreateLoginConfigurationOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User defined login configuration name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateLoginConfigurationOutput auth(CreateLoginConfigurationOutputAuth auth) {
    this.auth = auth;
    return this;
  }

  /**
   * Get auth
   * @return auth
   */
  @javax.annotation.Nonnull
  public CreateLoginConfigurationOutputAuth getAuth() {
    return auth;
  }

  public void setAuth(CreateLoginConfigurationOutputAuth auth) {
    this.auth = auth;
  }


  public CreateLoginConfigurationOutput redirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  public CreateLoginConfigurationOutput addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

  /**
   * OAuth 2.0 Redirect URIs
   * @return redirectUris
   */
  @javax.annotation.Nonnull
  public List<String> getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
  }


  public CreateLoginConfigurationOutput clientMetadata(LoginConfigurationClientMetadataOutput clientMetadata) {
    this.clientMetadata = clientMetadata;
    return this;
  }

  /**
   * Get clientMetadata
   * @return clientMetadata
   */
  @javax.annotation.Nonnull
  public LoginConfigurationClientMetadataOutput getClientMetadata() {
    return clientMetadata;
  }

  public void setClientMetadata(LoginConfigurationClientMetadataOutput clientMetadata) {
    this.clientMetadata = clientMetadata;
  }


  public CreateLoginConfigurationOutput creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * OAuth 2.0 Client Creation Date
   * @return creationDate
   */
  @javax.annotation.Nonnull
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public CreateLoginConfigurationOutput postLogoutRedirectUris(List<String> postLogoutRedirectUris) {
    this.postLogoutRedirectUris = postLogoutRedirectUris;
    return this;
  }

  public CreateLoginConfigurationOutput addPostLogoutRedirectUrisItem(String postLogoutRedirectUrisItem) {
    if (this.postLogoutRedirectUris == null) {
      this.postLogoutRedirectUris = new ArrayList<>();
    }
    this.postLogoutRedirectUris.add(postLogoutRedirectUrisItem);
    return this;
  }

  /**
   * Post Logout Redirect URIs, Used to redirect the user&#39;s browser to a specified URL after the logout process is complete. Must match the domain, port, scheme of at least one of the registered redirect URIs
   * @return postLogoutRedirectUris
   */
  @javax.annotation.Nullable
  public List<String> getPostLogoutRedirectUris() {
    return postLogoutRedirectUris;
  }

  public void setPostLogoutRedirectUris(List<String> postLogoutRedirectUris) {
    this.postLogoutRedirectUris = postLogoutRedirectUris;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLoginConfigurationOutput createLoginConfigurationOutput = (CreateLoginConfigurationOutput) o;
    return Objects.equals(this.ari, createLoginConfigurationOutput.ari) &&
        Objects.equals(this.projectId, createLoginConfigurationOutput.projectId) &&
        Objects.equals(this.configurationId, createLoginConfigurationOutput.configurationId) &&
        Objects.equals(this.name, createLoginConfigurationOutput.name) &&
        Objects.equals(this.auth, createLoginConfigurationOutput.auth) &&
        Objects.equals(this.redirectUris, createLoginConfigurationOutput.redirectUris) &&
        Objects.equals(this.clientMetadata, createLoginConfigurationOutput.clientMetadata) &&
        Objects.equals(this.creationDate, createLoginConfigurationOutput.creationDate) &&
        Objects.equals(this.postLogoutRedirectUris, createLoginConfigurationOutput.postLogoutRedirectUris);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ari, projectId, configurationId, name, auth, redirectUris, clientMetadata, creationDate, postLogoutRedirectUris);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLoginConfigurationOutput {\n");
    sb.append("    ari: ").append(toIndentedString(ari)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    clientMetadata: ").append(toIndentedString(clientMetadata)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    postLogoutRedirectUris: ").append(toIndentedString(postLogoutRedirectUris)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ari");
    openapiFields.add("projectId");
    openapiFields.add("configurationId");
    openapiFields.add("name");
    openapiFields.add("auth");
    openapiFields.add("redirectUris");
    openapiFields.add("clientMetadata");
    openapiFields.add("creationDate");
    openapiFields.add("postLogoutRedirectUris");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ari");
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("auth");
    openapiRequiredFields.add("redirectUris");
    openapiRequiredFields.add("clientMetadata");
    openapiRequiredFields.add("creationDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLoginConfigurationOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLoginConfigurationOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLoginConfigurationOutput is not found in the empty JSON string", CreateLoginConfigurationOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLoginConfigurationOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLoginConfigurationOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLoginConfigurationOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ari").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ari` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ari").toString()));
      }
      if (!jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("configurationId") != null && !jsonObj.get("configurationId").isJsonNull()) && !jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `auth`
      CreateLoginConfigurationOutputAuth.validateJsonElement(jsonObj.get("auth"));
      // ensure the required json array is present
      if (jsonObj.get("redirectUris") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("redirectUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUris` to be an array in the JSON string but got `%s`", jsonObj.get("redirectUris").toString()));
      }
      if (!jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("postLogoutRedirectUris") != null && !jsonObj.get("postLogoutRedirectUris").isJsonNull() && !jsonObj.get("postLogoutRedirectUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `postLogoutRedirectUris` to be an array in the JSON string but got `%s`", jsonObj.get("postLogoutRedirectUris").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLoginConfigurationOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLoginConfigurationOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLoginConfigurationOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLoginConfigurationOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLoginConfigurationOutput>() {
           @Override
           public void write(JsonWriter out, CreateLoginConfigurationOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLoginConfigurationOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLoginConfigurationOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLoginConfigurationOutput
   * @throws IOException if the JSON string is invalid with respect to CreateLoginConfigurationOutput
   */
  public static CreateLoginConfigurationOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLoginConfigurationOutput.class);
  }

  /**
   * Convert an instance of CreateLoginConfigurationOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

