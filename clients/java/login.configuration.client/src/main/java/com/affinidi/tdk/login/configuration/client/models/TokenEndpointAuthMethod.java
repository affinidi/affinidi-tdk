/*
 * OidcVpAdapterBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.login.configuration.client.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Requested Client Authentication method for the Token Endpoint. The options are: &#x60;client_secret_post&#x60;: (default) Send client_id and client_secret as application/x-www-form-urlencoded in the HTTP body. &#x60;client_secret_basic&#x60;: Send client_id and client_secret as application/x-www-form-urlencoded encoded in the HTTP Authorization header. &#x60;none&#x60;: For public clients (native/mobile apps) which can not have secret. 
 */
@JsonAdapter(TokenEndpointAuthMethod.Adapter.class)
public enum TokenEndpointAuthMethod {
  
  CLIENT_SECRET_BASIC("client_secret_basic"),
  
  CLIENT_SECRET_POST("client_secret_post"),
  
  NONE("none");

  private String value;

  TokenEndpointAuthMethod(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TokenEndpointAuthMethod fromValue(String value) {
    for (TokenEndpointAuthMethod b : TokenEndpointAuthMethod.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TokenEndpointAuthMethod> {
    @Override
    public void write(final JsonWriter jsonWriter, final TokenEndpointAuthMethod enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TokenEndpointAuthMethod read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TokenEndpointAuthMethod.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    TokenEndpointAuthMethod.fromValue(value);
  }
}

