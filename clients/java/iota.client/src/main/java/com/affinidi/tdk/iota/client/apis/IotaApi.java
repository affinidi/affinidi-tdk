/*
 * IotaService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.iota.client.apis;

import com.affinidi.tdk.iota.client.ApiCallback;
import com.affinidi.tdk.iota.client.ApiClient;
import com.affinidi.tdk.iota.client.ApiException;
import com.affinidi.tdk.iota.client.ApiResponse;
import com.affinidi.tdk.iota.client.Configuration;
import com.affinidi.tdk.iota.client.Pair;
import com.affinidi.tdk.iota.client.ProgressRequestBody;
import com.affinidi.tdk.iota.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.affinidi.tdk.iota.client.models.AwsExchangeCredentials;
import com.affinidi.tdk.iota.client.models.AwsExchangeCredentialsOK;
import com.affinidi.tdk.iota.client.models.AwsExchangeCredentialsProjectToken;
import com.affinidi.tdk.iota.client.models.FetchIOTAVPResponseInput;
import com.affinidi.tdk.iota.client.models.FetchIOTAVPResponseOK;
import com.affinidi.tdk.iota.client.models.InitiateDataSharingRequestInput;
import com.affinidi.tdk.iota.client.models.InitiateDataSharingRequestOK;
import com.affinidi.tdk.iota.client.models.InvalidParameterError;
import com.affinidi.tdk.iota.client.models.IotaExchangeCredentials;
import com.affinidi.tdk.iota.client.models.IotaExchangeCredentialsOK;
import com.affinidi.tdk.iota.client.models.NotFoundError;
import com.affinidi.tdk.iota.client.models.OperationForbiddenError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IotaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IotaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IotaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for awsExchangeCredentials
     * @param awsExchangeCredentials AwsExchangeCredentials (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AwsExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call awsExchangeCredentialsCall(AwsExchangeCredentials awsExchangeCredentials, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = awsExchangeCredentials;

        // create path and map variables
        String localVarPath = "/v1/aws-exchange-credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call awsExchangeCredentialsValidateBeforeCall(AwsExchangeCredentials awsExchangeCredentials, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awsExchangeCredentials' is set
        if (awsExchangeCredentials == null) {
            throw new ApiException("Missing the required parameter 'awsExchangeCredentials' when calling awsExchangeCredentials(Async)");
        }

        return awsExchangeCredentialsCall(awsExchangeCredentials, _callback);

    }

    /**
     * 
     * Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
     * @param awsExchangeCredentials AwsExchangeCredentials (required)
     * @return AwsExchangeCredentialsOK
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AwsExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public AwsExchangeCredentialsOK awsExchangeCredentials(AwsExchangeCredentials awsExchangeCredentials) throws ApiException {
        ApiResponse<AwsExchangeCredentialsOK> localVarResp = awsExchangeCredentialsWithHttpInfo(awsExchangeCredentials);
        return localVarResp.getData();
    }

    /**
     * 
     * Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
     * @param awsExchangeCredentials AwsExchangeCredentials (required)
     * @return ApiResponse&lt;AwsExchangeCredentialsOK&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AwsExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<AwsExchangeCredentialsOK> awsExchangeCredentialsWithHttpInfo(AwsExchangeCredentials awsExchangeCredentials) throws ApiException {
        okhttp3.Call localVarCall = awsExchangeCredentialsValidateBeforeCall(awsExchangeCredentials, null);
        Type localVarReturnType = new TypeToken<AwsExchangeCredentialsOK>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Exchange a limited-scoped token into a Cognito credential to generate the identity credential. The identity credential initiates the secure WebSocket connection from the client. This method is used only in WebSocket data-sharing mode.
     * @param awsExchangeCredentials AwsExchangeCredentials (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AwsExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call awsExchangeCredentialsAsync(AwsExchangeCredentials awsExchangeCredentials, final ApiCallback<AwsExchangeCredentialsOK> _callback) throws ApiException {

        okhttp3.Call localVarCall = awsExchangeCredentialsValidateBeforeCall(awsExchangeCredentials, _callback);
        Type localVarReturnType = new TypeToken<AwsExchangeCredentialsOK>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for awsExchangeCredentialsProjectToken
     * @param awsExchangeCredentialsProjectToken AwsExchangeCredentialsProjectToken (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IotaExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call awsExchangeCredentialsProjectTokenCall(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = awsExchangeCredentialsProjectToken;

        // create path and map variables
        String localVarPath = "/v1/aws-exchange-credentials/project-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ProjectTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call awsExchangeCredentialsProjectTokenValidateBeforeCall(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awsExchangeCredentialsProjectToken' is set
        if (awsExchangeCredentialsProjectToken == null) {
            throw new ApiException("Missing the required parameter 'awsExchangeCredentialsProjectToken' when calling awsExchangeCredentialsProjectToken(Async)");
        }

        return awsExchangeCredentialsProjectTokenCall(awsExchangeCredentialsProjectToken, _callback);

    }

    /**
     * 
     * Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
     * @param awsExchangeCredentialsProjectToken AwsExchangeCredentialsProjectToken (required)
     * @return IotaExchangeCredentialsOK
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IotaExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public IotaExchangeCredentialsOK awsExchangeCredentialsProjectToken(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken) throws ApiException {
        ApiResponse<IotaExchangeCredentialsOK> localVarResp = awsExchangeCredentialsProjectTokenWithHttpInfo(awsExchangeCredentialsProjectToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
     * @param awsExchangeCredentialsProjectToken AwsExchangeCredentialsProjectToken (required)
     * @return ApiResponse&lt;IotaExchangeCredentialsOK&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IotaExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<IotaExchangeCredentialsOK> awsExchangeCredentialsProjectTokenWithHttpInfo(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken) throws ApiException {
        okhttp3.Call localVarCall = awsExchangeCredentialsProjectTokenValidateBeforeCall(awsExchangeCredentialsProjectToken, null);
        Type localVarReturnType = new TypeToken<IotaExchangeCredentialsOK>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Exchange a Project Scoped Token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
     * @param awsExchangeCredentialsProjectToken AwsExchangeCredentialsProjectToken (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IotaExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call awsExchangeCredentialsProjectTokenAsync(AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken, final ApiCallback<IotaExchangeCredentialsOK> _callback) throws ApiException {

        okhttp3.Call localVarCall = awsExchangeCredentialsProjectTokenValidateBeforeCall(awsExchangeCredentialsProjectToken, _callback);
        Type localVarReturnType = new TypeToken<IotaExchangeCredentialsOK>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchIotaVpResponse
     * @param fetchIOTAVPResponseInput FetchIOTAVPResponseInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FetchIOTAVPResponseOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 404 </td><td> NotFoundError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call fetchIotaVpResponseCall(FetchIOTAVPResponseInput fetchIOTAVPResponseInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fetchIOTAVPResponseInput;

        // create path and map variables
        String localVarPath = "/v1/fetch-iota-response";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ProjectTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchIotaVpResponseValidateBeforeCall(FetchIOTAVPResponseInput fetchIOTAVPResponseInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fetchIOTAVPResponseInput' is set
        if (fetchIOTAVPResponseInput == null) {
            throw new ApiException("Missing the required parameter 'fetchIOTAVPResponseInput' when calling fetchIotaVpResponse(Async)");
        }

        return fetchIotaVpResponseCall(fetchIOTAVPResponseInput, _callback);

    }

    /**
     * 
     * Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
     * @param fetchIOTAVPResponseInput FetchIOTAVPResponseInput (required)
     * @return FetchIOTAVPResponseOK
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FetchIOTAVPResponseOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 404 </td><td> NotFoundError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public FetchIOTAVPResponseOK fetchIotaVpResponse(FetchIOTAVPResponseInput fetchIOTAVPResponseInput) throws ApiException {
        ApiResponse<FetchIOTAVPResponseOK> localVarResp = fetchIotaVpResponseWithHttpInfo(fetchIOTAVPResponseInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
     * @param fetchIOTAVPResponseInput FetchIOTAVPResponseInput (required)
     * @return ApiResponse&lt;FetchIOTAVPResponseOK&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FetchIOTAVPResponseOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 404 </td><td> NotFoundError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<FetchIOTAVPResponseOK> fetchIotaVpResponseWithHttpInfo(FetchIOTAVPResponseInput fetchIOTAVPResponseInput) throws ApiException {
        okhttp3.Call localVarCall = fetchIotaVpResponseValidateBeforeCall(fetchIOTAVPResponseInput, null);
        Type localVarReturnType = new TypeToken<FetchIOTAVPResponseOK>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetches the client&#39;s callback that contains the user&#39;s shared data in a Verifiable Presentation format after a successful data-sharing flow.
     * @param fetchIOTAVPResponseInput FetchIOTAVPResponseInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FetchIOTAVPResponseOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 404 </td><td> NotFoundError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call fetchIotaVpResponseAsync(FetchIOTAVPResponseInput fetchIOTAVPResponseInput, final ApiCallback<FetchIOTAVPResponseOK> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchIotaVpResponseValidateBeforeCall(fetchIOTAVPResponseInput, _callback);
        Type localVarReturnType = new TypeToken<FetchIOTAVPResponseOK>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initiateDataSharingRequest
     * @param initiateDataSharingRequestInput InitiateDataSharingRequestInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InitiateDataSharingRequestOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call initiateDataSharingRequestCall(InitiateDataSharingRequestInput initiateDataSharingRequestInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = initiateDataSharingRequestInput;

        // create path and map variables
        String localVarPath = "/v1/initiate-data-sharing-request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ProjectTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateDataSharingRequestValidateBeforeCall(InitiateDataSharingRequestInput initiateDataSharingRequestInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'initiateDataSharingRequestInput' is set
        if (initiateDataSharingRequestInput == null) {
            throw new ApiException("Missing the required parameter 'initiateDataSharingRequestInput' when calling initiateDataSharingRequest(Async)");
        }

        return initiateDataSharingRequestCall(initiateDataSharingRequestInput, _callback);

    }

    /**
     * 
     * Generates the request token for the Redirect mode to initiate the data-sharing flow.
     * @param initiateDataSharingRequestInput InitiateDataSharingRequestInput (required)
     * @return InitiateDataSharingRequestOK
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InitiateDataSharingRequestOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public InitiateDataSharingRequestOK initiateDataSharingRequest(InitiateDataSharingRequestInput initiateDataSharingRequestInput) throws ApiException {
        ApiResponse<InitiateDataSharingRequestOK> localVarResp = initiateDataSharingRequestWithHttpInfo(initiateDataSharingRequestInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Generates the request token for the Redirect mode to initiate the data-sharing flow.
     * @param initiateDataSharingRequestInput InitiateDataSharingRequestInput (required)
     * @return ApiResponse&lt;InitiateDataSharingRequestOK&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InitiateDataSharingRequestOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<InitiateDataSharingRequestOK> initiateDataSharingRequestWithHttpInfo(InitiateDataSharingRequestInput initiateDataSharingRequestInput) throws ApiException {
        okhttp3.Call localVarCall = initiateDataSharingRequestValidateBeforeCall(initiateDataSharingRequestInput, null);
        Type localVarReturnType = new TypeToken<InitiateDataSharingRequestOK>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generates the request token for the Redirect mode to initiate the data-sharing flow.
     * @param initiateDataSharingRequestInput InitiateDataSharingRequestInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InitiateDataSharingRequestOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call initiateDataSharingRequestAsync(InitiateDataSharingRequestInput initiateDataSharingRequestInput, final ApiCallback<InitiateDataSharingRequestOK> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateDataSharingRequestValidateBeforeCall(initiateDataSharingRequestInput, _callback);
        Type localVarReturnType = new TypeToken<InitiateDataSharingRequestOK>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotaExchangeCredentials
     * @param iotaExchangeCredentials IotaAwsExchangeCredentials (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IotaExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call iotaExchangeCredentialsCall(IotaExchangeCredentials iotaExchangeCredentials, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iotaExchangeCredentials;

        // create path and map variables
        String localVarPath = "/v1/exchange-credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotaExchangeCredentialsValidateBeforeCall(IotaExchangeCredentials iotaExchangeCredentials, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iotaExchangeCredentials' is set
        if (iotaExchangeCredentials == null) {
            throw new ApiException("Missing the required parameter 'iotaExchangeCredentials' when calling iotaExchangeCredentials(Async)");
        }

        return iotaExchangeCredentialsCall(iotaExchangeCredentials, _callback);

    }

    /**
     * 
     * Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
     * @param iotaExchangeCredentials IotaAwsExchangeCredentials (required)
     * @return IotaExchangeCredentialsOK
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IotaExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public IotaExchangeCredentialsOK iotaExchangeCredentials(IotaExchangeCredentials iotaExchangeCredentials) throws ApiException {
        ApiResponse<IotaExchangeCredentialsOK> localVarResp = iotaExchangeCredentialsWithHttpInfo(iotaExchangeCredentials);
        return localVarResp.getData();
    }

    /**
     * 
     * Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
     * @param iotaExchangeCredentials IotaAwsExchangeCredentials (required)
     * @return ApiResponse&lt;IotaExchangeCredentialsOK&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IotaExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<IotaExchangeCredentialsOK> iotaExchangeCredentialsWithHttpInfo(IotaExchangeCredentials iotaExchangeCredentials) throws ApiException {
        okhttp3.Call localVarCall = iotaExchangeCredentialsValidateBeforeCall(iotaExchangeCredentials, null);
        Type localVarReturnType = new TypeToken<IotaExchangeCredentialsOK>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Exchange a limited-scoped token into an identity credential directly to initiate a secure WebSocket connection. This method is used only in WebSocket data-sharing mode.
     * @param iotaExchangeCredentials IotaAwsExchangeCredentials (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IotaExchangeCredentialsOK </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 400 </td><td> BadRequestError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
        <tr><td> 403 </td><td> ForbiddenError </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call iotaExchangeCredentialsAsync(IotaExchangeCredentials iotaExchangeCredentials, final ApiCallback<IotaExchangeCredentialsOK> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotaExchangeCredentialsValidateBeforeCall(iotaExchangeCredentials, _callback);
        Type localVarReturnType = new TypeToken<IotaExchangeCredentialsOK>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
