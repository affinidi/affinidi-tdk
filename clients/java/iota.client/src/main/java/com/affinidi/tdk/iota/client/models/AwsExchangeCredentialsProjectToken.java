/*
 * IotaService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.iota.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * AwsExchangeCredentialsProjectToken
 */
@JsonPropertyOrder({
  AwsExchangeCredentialsProjectToken.JSON_PROPERTY_SESSION_ID,
  AwsExchangeCredentialsProjectToken.JSON_PROPERTY_CONFIGURATION_ID,
  AwsExchangeCredentialsProjectToken.JSON_PROPERTY_DID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class AwsExchangeCredentialsProjectToken {
  public static final String JSON_PROPERTY_SESSION_ID = "sessionId";
  @javax.annotation.Nonnull
  private String sessionId;

  public static final String JSON_PROPERTY_CONFIGURATION_ID = "configurationId";
  @javax.annotation.Nonnull
  private String configurationId;

  public static final String JSON_PROPERTY_DID = "did";
  @javax.annotation.Nonnull
  private String did;

  public AwsExchangeCredentialsProjectToken() {
  }

  public AwsExchangeCredentialsProjectToken sessionId(@javax.annotation.Nonnull String sessionId) {
    
    this.sessionId = sessionId;
    return this;
  }

  /**
   * ID of the session generated by a client.
   * @return sessionId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSessionId() {
    return sessionId;
  }


  @JsonProperty(JSON_PROPERTY_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSessionId(@javax.annotation.Nonnull String sessionId) {
    this.sessionId = sessionId;
  }

  public AwsExchangeCredentialsProjectToken configurationId(@javax.annotation.Nonnull String configurationId) {
    
    this.configurationId = configurationId;
    return this;
  }

  /**
   * ID of the Affinidi Iota Framework configuration.
   * @return configurationId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConfigurationId() {
    return configurationId;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigurationId(@javax.annotation.Nonnull String configurationId) {
    this.configurationId = configurationId;
  }

  public AwsExchangeCredentialsProjectToken did(@javax.annotation.Nonnull String did) {
    
    this.did = did;
    return this;
  }

  /**
   * The Decentalised Identifier (DID) of the user.
   * @return did
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDid() {
    return did;
  }


  @JsonProperty(JSON_PROPERTY_DID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDid(@javax.annotation.Nonnull String did) {
    this.did = did;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AwsExchangeCredentialsProjectToken awsExchangeCredentialsProjectToken = (AwsExchangeCredentialsProjectToken) o;
    return Objects.equals(this.sessionId, awsExchangeCredentialsProjectToken.sessionId) &&
        Objects.equals(this.configurationId, awsExchangeCredentialsProjectToken.configurationId) &&
        Objects.equals(this.did, awsExchangeCredentialsProjectToken.did);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionId, configurationId, did);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AwsExchangeCredentialsProjectToken {\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    did: ").append(toIndentedString(did)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `sessionId` to the URL query string
    if (getSessionId() != null) {
      try {
        joiner.add(String.format("%ssessionId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSessionId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `configurationId` to the URL query string
    if (getConfigurationId() != null) {
      try {
        joiner.add(String.format("%sconfigurationId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConfigurationId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `did` to the URL query string
    if (getDid() != null) {
      try {
        joiner.add(String.format("%sdid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDid()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

