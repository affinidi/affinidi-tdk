/*
 * IotaService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.iota.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * UpdateDcqlQueryInput
 */
@JsonPropertyOrder({
  UpdateDcqlQueryInput.JSON_PROPERTY_DCQL_QUERY,
  UpdateDcqlQueryInput.JSON_PROPERTY_DESCRIPTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class UpdateDcqlQueryInput {
  public static final String JSON_PROPERTY_DCQL_QUERY = "dcqlQuery";
  @javax.annotation.Nullable
  private String dcqlQuery;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public UpdateDcqlQueryInput() {
  }

  public UpdateDcqlQueryInput dcqlQuery(@javax.annotation.Nullable String dcqlQuery) {
    
    this.dcqlQuery = dcqlQuery;
    return this;
  }

  /**
   * The DCQL query describing the data requirement that must be satisfied by the user. The value is in a JSON stringify format.
   * @return dcqlQuery
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DCQL_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDcqlQuery() {
    return dcqlQuery;
  }


  @JsonProperty(JSON_PROPERTY_DCQL_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDcqlQuery(@javax.annotation.Nullable String dcqlQuery) {
    this.dcqlQuery = dcqlQuery;
  }

  public UpdateDcqlQueryInput description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * An optional description of what the query is used for.
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDcqlQueryInput updateDcqlQueryInput = (UpdateDcqlQueryInput) o;
    return Objects.equals(this.dcqlQuery, updateDcqlQueryInput.dcqlQuery) &&
        Objects.equals(this.description, updateDcqlQueryInput.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dcqlQuery, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDcqlQueryInput {\n");
    sb.append("    dcqlQuery: ").append(toIndentedString(dcqlQuery)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `dcqlQuery` to the URL query string
    if (getDcqlQuery() != null) {
      try {
        joiner.add(String.format("%sdcqlQuery%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDcqlQuery()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

