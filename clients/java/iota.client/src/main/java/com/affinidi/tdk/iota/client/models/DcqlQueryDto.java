/*
 * IotaService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.iota.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * DcqlQueryDto
 */
@JsonPropertyOrder({
  DcqlQueryDto.JSON_PROPERTY_ARI,
  DcqlQueryDto.JSON_PROPERTY_QUERY_ID,
  DcqlQueryDto.JSON_PROPERTY_NAME,
  DcqlQueryDto.JSON_PROPERTY_DESCRIPTION,
  DcqlQueryDto.JSON_PROPERTY_CONFIGURATION_ARI,
  DcqlQueryDto.JSON_PROPERTY_DCQL_QUERY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class DcqlQueryDto {
  public static final String JSON_PROPERTY_ARI = "ari";
  @javax.annotation.Nonnull
  private String ari;

  public static final String JSON_PROPERTY_QUERY_ID = "queryId";
  @javax.annotation.Nonnull
  private String queryId;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nonnull
  private String description;

  public static final String JSON_PROPERTY_CONFIGURATION_ARI = "configurationAri";
  @javax.annotation.Nonnull
  private String configurationAri;

  public static final String JSON_PROPERTY_DCQL_QUERY = "dcqlQuery";
  @javax.annotation.Nonnull
  private String dcqlQuery;

  public DcqlQueryDto() {
  }

  public DcqlQueryDto ari(@javax.annotation.Nonnull String ari) {
    
    this.ari = ari;
    return this;
  }

  /**
   * The unique resource identifier of the qeuery.
   * @return ari
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ARI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAri() {
    return ari;
  }


  @JsonProperty(JSON_PROPERTY_ARI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAri(@javax.annotation.Nonnull String ari) {
    this.ari = ari;
  }

  public DcqlQueryDto queryId(@javax.annotation.Nonnull String queryId) {
    
    this.queryId = queryId;
    return this;
  }

  /**
   * The ID of the query.
   * @return queryId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUERY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getQueryId() {
    return queryId;
  }


  @JsonProperty(JSON_PROPERTY_QUERY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQueryId(@javax.annotation.Nonnull String queryId) {
    this.queryId = queryId;
  }

  public DcqlQueryDto name(@javax.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * The name of the DCQL query to quickly identify the query.
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }

  public DcqlQueryDto description(@javax.annotation.Nonnull String description) {
    
    this.description = description;
    return this;
  }

  /**
   * An optional description of what the query is used for.
   * @return description
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(@javax.annotation.Nonnull String description) {
    this.description = description;
  }

  public DcqlQueryDto configurationAri(@javax.annotation.Nonnull String configurationAri) {
    
    this.configurationAri = configurationAri;
    return this;
  }

  /**
   * The unique resource identifier of the related configuration where the query is defined.
   * @return configurationAri
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_ARI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConfigurationAri() {
    return configurationAri;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION_ARI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigurationAri(@javax.annotation.Nonnull String configurationAri) {
    this.configurationAri = configurationAri;
  }

  public DcqlQueryDto dcqlQuery(@javax.annotation.Nonnull String dcqlQuery) {
    
    this.dcqlQuery = dcqlQuery;
    return this;
  }

  /**
   * The DCQL query describing the data requirement that must be satisfied by the user. The value is in a JSON stringify format.
   * @return dcqlQuery
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DCQL_QUERY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDcqlQuery() {
    return dcqlQuery;
  }


  @JsonProperty(JSON_PROPERTY_DCQL_QUERY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDcqlQuery(@javax.annotation.Nonnull String dcqlQuery) {
    this.dcqlQuery = dcqlQuery;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DcqlQueryDto dcqlQueryDto = (DcqlQueryDto) o;
    return Objects.equals(this.ari, dcqlQueryDto.ari) &&
        Objects.equals(this.queryId, dcqlQueryDto.queryId) &&
        Objects.equals(this.name, dcqlQueryDto.name) &&
        Objects.equals(this.description, dcqlQueryDto.description) &&
        Objects.equals(this.configurationAri, dcqlQueryDto.configurationAri) &&
        Objects.equals(this.dcqlQuery, dcqlQueryDto.dcqlQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ari, queryId, name, description, configurationAri, dcqlQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DcqlQueryDto {\n");
    sb.append("    ari: ").append(toIndentedString(ari)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    configurationAri: ").append(toIndentedString(configurationAri)).append("\n");
    sb.append("    dcqlQuery: ").append(toIndentedString(dcqlQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ari` to the URL query string
    if (getAri() != null) {
      try {
        joiner.add(String.format("%sari%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAri()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `queryId` to the URL query string
    if (getQueryId() != null) {
      try {
        joiner.add(String.format("%squeryId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQueryId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `configurationAri` to the URL query string
    if (getConfigurationAri() != null) {
      try {
        joiner.add(String.format("%sconfigurationAri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConfigurationAri()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `dcqlQuery` to the URL query string
    if (getDcqlQuery() != null) {
      try {
        joiner.add(String.format("%sdcqlQuery%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDcqlQuery()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

