/*
 * IotaService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.affinidi.tdk.iota.client.apis;

import com.fasterxml.jackson.core.type.TypeReference;

import com.affinidi.tdk.iota.client.ApiException;
import com.affinidi.tdk.iota.client.ApiClient;
import com.affinidi.tdk.iota.client.BaseApi;
import com.affinidi.tdk.iota.client.Configuration;
import com.affinidi.tdk.iota.client.Pair;

import com.affinidi.tdk.iota.client.models.CreateDcqlQueryInput;
import com.affinidi.tdk.iota.client.models.DcqlQueryDto;
import com.affinidi.tdk.iota.client.models.InvalidParameterError;
import com.affinidi.tdk.iota.client.models.ListDcqlQueriesOK;
import com.affinidi.tdk.iota.client.models.OperationForbiddenError;
import com.affinidi.tdk.iota.client.models.UpdateDcqlQueryInput;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class DcqlQueryApi extends BaseApi {

  public DcqlQueryApi() {
    super(Configuration.getDefaultApiClient());
  }

  public DcqlQueryApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * 
   * Creates a new DCQL query in the configuration to query data.
   * @param configurationId ID of the Affinidi Iota Framework configuration. (required)
   * @param createDcqlQueryInput CreateDcqlQuery (required)
   * @return DcqlQueryDto
   * @throws ApiException if fails to make API call
   */
  public DcqlQueryDto createDcqlQuery(@javax.annotation.Nonnull String configurationId, @javax.annotation.Nonnull CreateDcqlQueryInput createDcqlQueryInput) throws ApiException {
    return this.createDcqlQuery(configurationId, createDcqlQueryInput, Collections.emptyMap());
  }


  /**
   * 
   * Creates a new DCQL query in the configuration to query data.
   * @param configurationId ID of the Affinidi Iota Framework configuration. (required)
   * @param createDcqlQueryInput CreateDcqlQuery (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DcqlQueryDto
   * @throws ApiException if fails to make API call
   */
  public DcqlQueryDto createDcqlQuery(@javax.annotation.Nonnull String configurationId, @javax.annotation.Nonnull CreateDcqlQueryInput createDcqlQueryInput, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createDcqlQueryInput;
    
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling createDcqlQuery");
    }
    
    // verify the required parameter 'createDcqlQueryInput' is set
    if (createDcqlQueryInput == null) {
      throw new ApiException(400, "Missing the required parameter 'createDcqlQueryInput' when calling createDcqlQuery");
    }
    
    // create path and map variables
    String localVarPath = "/v1/configurations/{configurationId}/dcql-queries"
      .replaceAll("\\{" + "configurationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(configurationId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ProjectTokenAuth" };

    TypeReference<DcqlQueryDto> localVarReturnType = new TypeReference<DcqlQueryDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Deletes a DCQL query in the configuration by ID.
   * @param configurationId ID of the Affinidi Iota Framework configuration. (required)
   * @param queryId The ID of the query. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDcqlQueryById(@javax.annotation.Nonnull String configurationId, @javax.annotation.Nonnull String queryId) throws ApiException {
    this.deleteDcqlQueryById(configurationId, queryId, Collections.emptyMap());
  }


  /**
   * 
   * Deletes a DCQL query in the configuration by ID.
   * @param configurationId ID of the Affinidi Iota Framework configuration. (required)
   * @param queryId The ID of the query. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteDcqlQueryById(@javax.annotation.Nonnull String configurationId, @javax.annotation.Nonnull String queryId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling deleteDcqlQueryById");
    }
    
    // verify the required parameter 'queryId' is set
    if (queryId == null) {
      throw new ApiException(400, "Missing the required parameter 'queryId' when calling deleteDcqlQueryById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/configurations/{configurationId}/dcql-queries/{queryId}"
      .replaceAll("\\{" + "configurationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(configurationId)))
      .replaceAll("\\{" + "queryId" + "\\}", apiClient.escapeString(apiClient.parameterToString(queryId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ProjectTokenAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * 
   * Retrieves a DCQL query in the configuration by ID.
   * @param configurationId ID of the Affinidi Iota Framework configuration. (required)
   * @param queryId The ID of the query. (required)
   * @return DcqlQueryDto
   * @throws ApiException if fails to make API call
   */
  public DcqlQueryDto getDcqlQueryById(@javax.annotation.Nonnull String configurationId, @javax.annotation.Nonnull String queryId) throws ApiException {
    return this.getDcqlQueryById(configurationId, queryId, Collections.emptyMap());
  }


  /**
   * 
   * Retrieves a DCQL query in the configuration by ID.
   * @param configurationId ID of the Affinidi Iota Framework configuration. (required)
   * @param queryId The ID of the query. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DcqlQueryDto
   * @throws ApiException if fails to make API call
   */
  public DcqlQueryDto getDcqlQueryById(@javax.annotation.Nonnull String configurationId, @javax.annotation.Nonnull String queryId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling getDcqlQueryById");
    }
    
    // verify the required parameter 'queryId' is set
    if (queryId == null) {
      throw new ApiException(400, "Missing the required parameter 'queryId' when calling getDcqlQueryById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/configurations/{configurationId}/dcql-queries/{queryId}"
      .replaceAll("\\{" + "configurationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(configurationId)))
      .replaceAll("\\{" + "queryId" + "\\}", apiClient.escapeString(apiClient.parameterToString(queryId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ProjectTokenAuth" };

    TypeReference<DcqlQueryDto> localVarReturnType = new TypeReference<DcqlQueryDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Lists all DCQL queries in the configuration.
   * @param configurationId ID of the Affinidi Iota Framework configuration. (required)
   * @param limit Maximum number of records to fetch in a list (optional)
   * @param exclusiveStartKey The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)
   * @return ListDcqlQueriesOK
   * @throws ApiException if fails to make API call
   */
  public ListDcqlQueriesOK listDcqlQueries(@javax.annotation.Nonnull String configurationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String exclusiveStartKey) throws ApiException {
    return this.listDcqlQueries(configurationId, limit, exclusiveStartKey, Collections.emptyMap());
  }


  /**
   * 
   * Lists all DCQL queries in the configuration.
   * @param configurationId ID of the Affinidi Iota Framework configuration. (required)
   * @param limit Maximum number of records to fetch in a list (optional)
   * @param exclusiveStartKey The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ListDcqlQueriesOK
   * @throws ApiException if fails to make API call
   */
  public ListDcqlQueriesOK listDcqlQueries(@javax.annotation.Nonnull String configurationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String exclusiveStartKey, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling listDcqlQueries");
    }
    
    // create path and map variables
    String localVarPath = "/v1/configurations/{configurationId}/dcql-queries"
      .replaceAll("\\{" + "configurationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(configurationId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("exclusiveStartKey", exclusiveStartKey));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ProjectTokenAuth" };

    TypeReference<ListDcqlQueriesOK> localVarReturnType = new TypeReference<ListDcqlQueriesOK>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Updates the DCQL query in the configuration by ID.
   * @param configurationId ID of the Affinidi Iota Framework configuration. (required)
   * @param queryId The ID of the query. (required)
   * @param updateDcqlQueryInput UpdateDcqlQueryById (required)
   * @return DcqlQueryDto
   * @throws ApiException if fails to make API call
   */
  public DcqlQueryDto updateDcqlQueryById(@javax.annotation.Nonnull String configurationId, @javax.annotation.Nonnull String queryId, @javax.annotation.Nonnull UpdateDcqlQueryInput updateDcqlQueryInput) throws ApiException {
    return this.updateDcqlQueryById(configurationId, queryId, updateDcqlQueryInput, Collections.emptyMap());
  }


  /**
   * 
   * Updates the DCQL query in the configuration by ID.
   * @param configurationId ID of the Affinidi Iota Framework configuration. (required)
   * @param queryId The ID of the query. (required)
   * @param updateDcqlQueryInput UpdateDcqlQueryById (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DcqlQueryDto
   * @throws ApiException if fails to make API call
   */
  public DcqlQueryDto updateDcqlQueryById(@javax.annotation.Nonnull String configurationId, @javax.annotation.Nonnull String queryId, @javax.annotation.Nonnull UpdateDcqlQueryInput updateDcqlQueryInput, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = updateDcqlQueryInput;
    
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling updateDcqlQueryById");
    }
    
    // verify the required parameter 'queryId' is set
    if (queryId == null) {
      throw new ApiException(400, "Missing the required parameter 'queryId' when calling updateDcqlQueryById");
    }
    
    // verify the required parameter 'updateDcqlQueryInput' is set
    if (updateDcqlQueryInput == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDcqlQueryInput' when calling updateDcqlQueryById");
    }
    
    // create path and map variables
    String localVarPath = "/v1/configurations/{configurationId}/dcql-queries/{queryId}"
      .replaceAll("\\{" + "configurationId" + "\\}", apiClient.escapeString(apiClient.parameterToString(configurationId)))
      .replaceAll("\\{" + "queryId" + "\\}", apiClient.escapeString(apiClient.parameterToString(queryId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ProjectTokenAuth" };

    TypeReference<DcqlQueryDto> localVarReturnType = new TypeReference<DcqlQueryDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ProjectTokenAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
