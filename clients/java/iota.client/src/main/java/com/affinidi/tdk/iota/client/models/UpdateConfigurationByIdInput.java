/*
 * IotaService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.iota.client.models;

import java.util.Objects;
import com.affinidi.tdk.iota.client.models.IotaConfigurationDtoClientMetadata;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.iota.client.JSON;

/**
 * UpdateConfigurationByIdInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-06T23:19:36.900567934Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class UpdateConfigurationByIdInput {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_WALLET_ARI = "walletAri";
  @SerializedName(SERIALIZED_NAME_WALLET_ARI)
  private String walletAri;

  public static final String SERIALIZED_NAME_IOTA_RESPONSE_WEBHOOK_U_R_L = "iotaResponseWebhookURL";
  @SerializedName(SERIALIZED_NAME_IOTA_RESPONSE_WEBHOOK_U_R_L)
  private String iotaResponseWebhookURL;

  public static final String SERIALIZED_NAME_ENABLE_VERIFICATION = "enableVerification";
  @SerializedName(SERIALIZED_NAME_ENABLE_VERIFICATION)
  private Boolean enableVerification;

  public static final String SERIALIZED_NAME_ENABLE_CONSENT_AUDIT_LOG = "enableConsentAuditLog";
  @SerializedName(SERIALIZED_NAME_ENABLE_CONSENT_AUDIT_LOG)
  private Boolean enableConsentAuditLog;

  public static final String SERIALIZED_NAME_TOKEN_MAX_AGE = "tokenMaxAge";
  @SerializedName(SERIALIZED_NAME_TOKEN_MAX_AGE)
  private BigDecimal tokenMaxAge;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CLIENT_METADATA = "clientMetadata";
  @SerializedName(SERIALIZED_NAME_CLIENT_METADATA)
  private IotaConfigurationDtoClientMetadata clientMetadata;

  /**
   * Determines whether to handle the data-sharing request using the WebSocket or Redirect flow.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    REDIRECT("redirect"),
    
    WEBSOCKET("websocket");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirectUris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<String> redirectUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLE_IDV_PROVIDERS = "enableIdvProviders";
  @SerializedName(SERIALIZED_NAME_ENABLE_IDV_PROVIDERS)
  private Boolean enableIdvProviders;

  public UpdateConfigurationByIdInput() {
  }

  public UpdateConfigurationByIdInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the configuration to quickly identify the resource.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateConfigurationByIdInput walletAri(String walletAri) {
    this.walletAri = walletAri;
    return this;
  }

  /**
   * The unique resource identifier of the Wallet used to sign the request token.
   * @return walletAri
   */
  @javax.annotation.Nullable
  public String getWalletAri() {
    return walletAri;
  }

  public void setWalletAri(String walletAri) {
    this.walletAri = walletAri;
  }


  public UpdateConfigurationByIdInput iotaResponseWebhookURL(String iotaResponseWebhookURL) {
    this.iotaResponseWebhookURL = iotaResponseWebhookURL;
    return this;
  }

  /**
   * The webhook URL is used for callback when the data is ready.
   * @return iotaResponseWebhookURL
   */
  @javax.annotation.Nullable
  public String getIotaResponseWebhookURL() {
    return iotaResponseWebhookURL;
  }

  public void setIotaResponseWebhookURL(String iotaResponseWebhookURL) {
    this.iotaResponseWebhookURL = iotaResponseWebhookURL;
  }


  public UpdateConfigurationByIdInput enableVerification(Boolean enableVerification) {
    this.enableVerification = enableVerification;
    return this;
  }

  /**
   * Cryptographically verifies the data shared by the user when enabled.
   * @return enableVerification
   */
  @javax.annotation.Nullable
  public Boolean getEnableVerification() {
    return enableVerification;
  }

  public void setEnableVerification(Boolean enableVerification) {
    this.enableVerification = enableVerification;
  }


  public UpdateConfigurationByIdInput enableConsentAuditLog(Boolean enableConsentAuditLog) {
    this.enableConsentAuditLog = enableConsentAuditLog;
    return this;
  }

  /**
   * Records the user&#39;s consent when they share their data, including the type of data shared when enabled.
   * @return enableConsentAuditLog
   */
  @javax.annotation.Nullable
  public Boolean getEnableConsentAuditLog() {
    return enableConsentAuditLog;
  }

  public void setEnableConsentAuditLog(Boolean enableConsentAuditLog) {
    this.enableConsentAuditLog = enableConsentAuditLog;
  }


  public UpdateConfigurationByIdInput tokenMaxAge(BigDecimal tokenMaxAge) {
    this.tokenMaxAge = tokenMaxAge;
    return this;
  }

  /**
   * This is the lifetime of the signed request token during the data-sharing flow.
   * @return tokenMaxAge
   */
  @javax.annotation.Nullable
  public BigDecimal getTokenMaxAge() {
    return tokenMaxAge;
  }

  public void setTokenMaxAge(BigDecimal tokenMaxAge) {
    this.tokenMaxAge = tokenMaxAge;
  }


  public UpdateConfigurationByIdInput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of what the configuration is used for.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateConfigurationByIdInput clientMetadata(IotaConfigurationDtoClientMetadata clientMetadata) {
    this.clientMetadata = clientMetadata;
    return this;
  }

  /**
   * Get clientMetadata
   * @return clientMetadata
   */
  @javax.annotation.Nullable
  public IotaConfigurationDtoClientMetadata getClientMetadata() {
    return clientMetadata;
  }

  public void setClientMetadata(IotaConfigurationDtoClientMetadata clientMetadata) {
    this.clientMetadata = clientMetadata;
  }


  public UpdateConfigurationByIdInput mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Determines whether to handle the data-sharing request using the WebSocket or Redirect flow.
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public UpdateConfigurationByIdInput redirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  public UpdateConfigurationByIdInput addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

  /**
   * List of allowed URLs to redirect users, including the response from the request. This is required if the selected data-sharing mode is Redirect.
   * @return redirectUris
   */
  @javax.annotation.Nullable
  public List<String> getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
  }


  public UpdateConfigurationByIdInput enableIdvProviders(Boolean enableIdvProviders) {
    this.enableIdvProviders = enableIdvProviders;
    return this;
  }

  /**
   * Enables identity verification from user with a 3rd-party provider when a verified identity document is not found.
   * @return enableIdvProviders
   */
  @javax.annotation.Nullable
  public Boolean getEnableIdvProviders() {
    return enableIdvProviders;
  }

  public void setEnableIdvProviders(Boolean enableIdvProviders) {
    this.enableIdvProviders = enableIdvProviders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateConfigurationByIdInput updateConfigurationByIdInput = (UpdateConfigurationByIdInput) o;
    return Objects.equals(this.name, updateConfigurationByIdInput.name) &&
        Objects.equals(this.walletAri, updateConfigurationByIdInput.walletAri) &&
        Objects.equals(this.iotaResponseWebhookURL, updateConfigurationByIdInput.iotaResponseWebhookURL) &&
        Objects.equals(this.enableVerification, updateConfigurationByIdInput.enableVerification) &&
        Objects.equals(this.enableConsentAuditLog, updateConfigurationByIdInput.enableConsentAuditLog) &&
        Objects.equals(this.tokenMaxAge, updateConfigurationByIdInput.tokenMaxAge) &&
        Objects.equals(this.description, updateConfigurationByIdInput.description) &&
        Objects.equals(this.clientMetadata, updateConfigurationByIdInput.clientMetadata) &&
        Objects.equals(this.mode, updateConfigurationByIdInput.mode) &&
        Objects.equals(this.redirectUris, updateConfigurationByIdInput.redirectUris) &&
        Objects.equals(this.enableIdvProviders, updateConfigurationByIdInput.enableIdvProviders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, walletAri, iotaResponseWebhookURL, enableVerification, enableConsentAuditLog, tokenMaxAge, description, clientMetadata, mode, redirectUris, enableIdvProviders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateConfigurationByIdInput {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    walletAri: ").append(toIndentedString(walletAri)).append("\n");
    sb.append("    iotaResponseWebhookURL: ").append(toIndentedString(iotaResponseWebhookURL)).append("\n");
    sb.append("    enableVerification: ").append(toIndentedString(enableVerification)).append("\n");
    sb.append("    enableConsentAuditLog: ").append(toIndentedString(enableConsentAuditLog)).append("\n");
    sb.append("    tokenMaxAge: ").append(toIndentedString(tokenMaxAge)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    clientMetadata: ").append(toIndentedString(clientMetadata)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    enableIdvProviders: ").append(toIndentedString(enableIdvProviders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("walletAri");
    openapiFields.add("iotaResponseWebhookURL");
    openapiFields.add("enableVerification");
    openapiFields.add("enableConsentAuditLog");
    openapiFields.add("tokenMaxAge");
    openapiFields.add("description");
    openapiFields.add("clientMetadata");
    openapiFields.add("mode");
    openapiFields.add("redirectUris");
    openapiFields.add("enableIdvProviders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateConfigurationByIdInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateConfigurationByIdInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateConfigurationByIdInput is not found in the empty JSON string", UpdateConfigurationByIdInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateConfigurationByIdInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateConfigurationByIdInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("walletAri") != null && !jsonObj.get("walletAri").isJsonNull()) && !jsonObj.get("walletAri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletAri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletAri").toString()));
      }
      if ((jsonObj.get("iotaResponseWebhookURL") != null && !jsonObj.get("iotaResponseWebhookURL").isJsonNull()) && !jsonObj.get("iotaResponseWebhookURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iotaResponseWebhookURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iotaResponseWebhookURL").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirectUris") != null && !jsonObj.get("redirectUris").isJsonNull() && !jsonObj.get("redirectUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUris` to be an array in the JSON string but got `%s`", jsonObj.get("redirectUris").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateConfigurationByIdInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateConfigurationByIdInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateConfigurationByIdInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateConfigurationByIdInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateConfigurationByIdInput>() {
           @Override
           public void write(JsonWriter out, UpdateConfigurationByIdInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateConfigurationByIdInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateConfigurationByIdInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateConfigurationByIdInput
   * @throws IOException if the JSON string is invalid with respect to UpdateConfigurationByIdInput
   */
  public static UpdateConfigurationByIdInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateConfigurationByIdInput.class);
  }

  /**
   * Convert an instance of UpdateConfigurationByIdInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

