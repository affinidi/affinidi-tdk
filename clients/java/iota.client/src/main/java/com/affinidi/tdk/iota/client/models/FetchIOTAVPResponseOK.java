/*
 * IotaService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.iota.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.iota.client.JSON;

/**
 * FetchIOTAVPResponseOK
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-01T23:20:06.861975720Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class FetchIOTAVPResponseOK {
  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private String correlationId;

  public static final String SERIALIZED_NAME_PRESENTATION_SUBMISSION = "presentation_submission";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PRESENTATION_SUBMISSION)
  private String presentationSubmission;

  public static final String SERIALIZED_NAME_VP_TOKEN = "vp_token";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VP_TOKEN)
  private String vpToken;

  public static final String SERIALIZED_NAME_PRESENTATION_SUBMISSION = "presentationSubmission";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_SUBMISSION)
  private String presentationSubmission;

  public static final String SERIALIZED_NAME_VP_TOKEN = "vpToken";
  @SerializedName(SERIALIZED_NAME_VP_TOKEN)
  private String vpToken;

  public FetchIOTAVPResponseOK() {
  }

  public FetchIOTAVPResponseOK correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  /**
   * A unique, randomly generated identifier that correlates the request and response in the data-sharing request flow.
   * @return correlationId
   */
  @javax.annotation.Nullable
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  @Deprecated
  public FetchIOTAVPResponseOK presentationSubmission(String presentationSubmission) {
    this.presentationSubmission = presentationSubmission;
    return this;
  }

  /**
   * A JSON string format that describes the link between the Verifiable Presentation and Presentation Definition for the verifier. The presentation submission follows the OID4VP standard.
   * @return presentationSubmission
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getPresentationSubmission() {
    return presentationSubmission;
  }

  @Deprecated
  public void setPresentationSubmission(String presentationSubmission) {
    this.presentationSubmission = presentationSubmission;
  }


  @Deprecated
  public FetchIOTAVPResponseOK vpToken(String vpToken) {
    this.vpToken = vpToken;
    return this;
  }

  /**
   * A JSON string format containing the data the user consented to share in a Verifiable Presentation format. The VP Token follows the OID4VP standard.
   * @return vpToken
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getVpToken() {
    return vpToken;
  }

  @Deprecated
  public void setVpToken(String vpToken) {
    this.vpToken = vpToken;
  }


  public FetchIOTAVPResponseOK presentationSubmission(String presentationSubmission) {
    this.presentationSubmission = presentationSubmission;
    return this;
  }

  /**
   * A JSON string format that describes the link between the Verifiable Presentation and Presentation Definition for the verifier. The presentation submission follows the OID4VP standard.
   * @return presentationSubmission
   */
  @javax.annotation.Nullable
  public String getPresentationSubmission() {
    return presentationSubmission;
  }

  public void setPresentationSubmission(String presentationSubmission) {
    this.presentationSubmission = presentationSubmission;
  }


  public FetchIOTAVPResponseOK vpToken(String vpToken) {
    this.vpToken = vpToken;
    return this;
  }

  /**
   * A JSON string format containing the data the user consented to share in a Verifiable Presentation format. The VP Token follows the OID4VP standard.
   * @return vpToken
   */
  @javax.annotation.Nullable
  public String getVpToken() {
    return vpToken;
  }

  public void setVpToken(String vpToken) {
    this.vpToken = vpToken;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FetchIOTAVPResponseOK instance itself
   */
  public FetchIOTAVPResponseOK putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FetchIOTAVPResponseOK fetchIOTAVPResponseOK = (FetchIOTAVPResponseOK) o;
    return Objects.equals(this.correlationId, fetchIOTAVPResponseOK.correlationId) &&
        Objects.equals(this.presentationSubmission, fetchIOTAVPResponseOK.presentationSubmission) &&
        Objects.equals(this.vpToken, fetchIOTAVPResponseOK.vpToken) &&
        Objects.equals(this.presentationSubmission, fetchIOTAVPResponseOK.presentationSubmission) &&
        Objects.equals(this.vpToken, fetchIOTAVPResponseOK.vpToken)&&
        Objects.equals(this.additionalProperties, fetchIOTAVPResponseOK.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correlationId, presentationSubmission, vpToken, presentationSubmission, vpToken, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchIOTAVPResponseOK {\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    presentationSubmission: ").append(toIndentedString(presentationSubmission)).append("\n");
    sb.append("    vpToken: ").append(toIndentedString(vpToken)).append("\n");
    sb.append("    presentationSubmission: ").append(toIndentedString(presentationSubmission)).append("\n");
    sb.append("    vpToken: ").append(toIndentedString(vpToken)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("correlationId");
    openapiFields.add("presentation_submission");
    openapiFields.add("vp_token");
    openapiFields.add("presentationSubmission");
    openapiFields.add("vpToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FetchIOTAVPResponseOK
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FetchIOTAVPResponseOK.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FetchIOTAVPResponseOK is not found in the empty JSON string", FetchIOTAVPResponseOK.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("correlationId") != null && !jsonObj.get("correlationId").isJsonNull()) && !jsonObj.get("correlationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      if ((jsonObj.get("presentation_submission") != null && !jsonObj.get("presentation_submission").isJsonNull()) && !jsonObj.get("presentation_submission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presentation_submission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presentation_submission").toString()));
      }
      if ((jsonObj.get("vp_token") != null && !jsonObj.get("vp_token").isJsonNull()) && !jsonObj.get("vp_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vp_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vp_token").toString()));
      }
      if ((jsonObj.get("presentationSubmission") != null && !jsonObj.get("presentationSubmission").isJsonNull()) && !jsonObj.get("presentationSubmission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presentationSubmission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presentationSubmission").toString()));
      }
      if ((jsonObj.get("vpToken") != null && !jsonObj.get("vpToken").isJsonNull()) && !jsonObj.get("vpToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FetchIOTAVPResponseOK.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FetchIOTAVPResponseOK' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FetchIOTAVPResponseOK> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FetchIOTAVPResponseOK.class));

       return (TypeAdapter<T>) new TypeAdapter<FetchIOTAVPResponseOK>() {
           @Override
           public void write(JsonWriter out, FetchIOTAVPResponseOK value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FetchIOTAVPResponseOK read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             FetchIOTAVPResponseOK instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FetchIOTAVPResponseOK given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FetchIOTAVPResponseOK
   * @throws IOException if the JSON string is invalid with respect to FetchIOTAVPResponseOK
   */
  public static FetchIOTAVPResponseOK fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FetchIOTAVPResponseOK.class);
  }

  /**
   * Convert an instance of FetchIOTAVPResponseOK to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

