/*
 * CredentialIssuanceService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.affinidi.tdk.credential.issuance.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.affinidi.tdk.credential.issuance.client.models.CredentialSupportedObject;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * UpdateIssuanceConfigInput
 */
@JsonPropertyOrder({ UpdateIssuanceConfigInput.JSON_PROPERTY_NAME, UpdateIssuanceConfigInput.JSON_PROPERTY_DESCRIPTION,
        UpdateIssuanceConfigInput.JSON_PROPERTY_ISSUER_WALLET_ID,
        UpdateIssuanceConfigInput.JSON_PROPERTY_CREDENTIAL_OFFER_DURATION,
        UpdateIssuanceConfigInput.JSON_PROPERTY_FORMAT, UpdateIssuanceConfigInput.JSON_PROPERTY_ISSUER_URI,
        UpdateIssuanceConfigInput.JSON_PROPERTY_CREDENTIAL_SUPPORTED,
        UpdateIssuanceConfigInput.JSON_PROPERTY_ISSUER_METADATA, UpdateIssuanceConfigInput.JSON_PROPERTY_RETURN_URIS })
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class UpdateIssuanceConfigInput {
    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_DESCRIPTION = "description";
    private String description;

    public static final String JSON_PROPERTY_ISSUER_WALLET_ID = "issuerWalletId";
    private String issuerWalletId;

    public static final String JSON_PROPERTY_CREDENTIAL_OFFER_DURATION = "credentialOfferDuration";
    private BigDecimal credentialOfferDuration;

    /**
     * String identifying the format of this Credential, i.e., ldp_vc. Depending on the format value, the object
     * contains further elements defining the type
     */
    public enum FormatEnum {
        LDP_VC("ldp_vc"),

        JWT_VC_JSON_LD("jwt_vc_json-ld"),

        SD_JWT_VC_JSON_LD("sd_jwt_vc_json-ld");

        private String value;

        FormatEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static FormatEnum fromValue(String value) {
            for (FormatEnum b : FormatEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_FORMAT = "format";
    private FormatEnum format;

    public static final String JSON_PROPERTY_ISSUER_URI = "issuerUri";
    private String issuerUri;

    public static final String JSON_PROPERTY_CREDENTIAL_SUPPORTED = "credentialSupported";
    private List<CredentialSupportedObject> credentialSupported = new ArrayList<>();

    public static final String JSON_PROPERTY_ISSUER_METADATA = "issuerMetadata";
    private Map<String, Object> issuerMetadata = new HashMap<>();

    public static final String JSON_PROPERTY_RETURN_URIS = "returnUris";
    private List<String> returnUris = new ArrayList<>();

    public UpdateIssuanceConfigInput() {
    }

    public UpdateIssuanceConfigInput name(String name) {

        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(String name) {
        this.name = name;
    }

    public UpdateIssuanceConfigInput description(String description) {

        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDescription() {
        return description;
    }

    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDescription(String description) {
        this.description = description;
    }

    public UpdateIssuanceConfigInput issuerWalletId(String issuerWalletId) {

        this.issuerWalletId = issuerWalletId;
        return this;
    }

    /**
     * Issuer Wallet id
     *
     * @return issuerWalletId
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ISSUER_WALLET_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getIssuerWalletId() {
        return issuerWalletId;
    }

    @JsonProperty(JSON_PROPERTY_ISSUER_WALLET_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIssuerWalletId(String issuerWalletId) {
        this.issuerWalletId = issuerWalletId;
    }

    public UpdateIssuanceConfigInput credentialOfferDuration(BigDecimal credentialOfferDuration) {

        this.credentialOfferDuration = credentialOfferDuration;
        return this;
    }

    /**
     * credential offer duration in second minimum: 1 maximum: 604801
     *
     * @return credentialOfferDuration
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CREDENTIAL_OFFER_DURATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getCredentialOfferDuration() {
        return credentialOfferDuration;
    }

    @JsonProperty(JSON_PROPERTY_CREDENTIAL_OFFER_DURATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCredentialOfferDuration(BigDecimal credentialOfferDuration) {
        this.credentialOfferDuration = credentialOfferDuration;
    }

    public UpdateIssuanceConfigInput format(FormatEnum format) {

        this.format = format;
        return this;
    }

    /**
     * String identifying the format of this Credential, i.e., ldp_vc. Depending on the format value, the object
     * contains further elements defining the type
     *
     * @return format
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FORMAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public FormatEnum getFormat() {
        return format;
    }

    @JsonProperty(JSON_PROPERTY_FORMAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFormat(FormatEnum format) {
        this.format = format;
    }

    public UpdateIssuanceConfigInput issuerUri(String issuerUri) {

        this.issuerUri = issuerUri;
        return this;
    }

    /**
     * Issuer URI
     *
     * @return issuerUri
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ISSUER_URI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getIssuerUri() {
        return issuerUri;
    }

    @JsonProperty(JSON_PROPERTY_ISSUER_URI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIssuerUri(String issuerUri) {
        this.issuerUri = issuerUri;
    }

    public UpdateIssuanceConfigInput credentialSupported(List<CredentialSupportedObject> credentialSupported) {

        this.credentialSupported = credentialSupported;
        return this;
    }

    public UpdateIssuanceConfigInput addCredentialSupportedItem(CredentialSupportedObject credentialSupportedItem) {
        if (this.credentialSupported == null) {
            this.credentialSupported = new ArrayList<>();
        }
        this.credentialSupported.add(credentialSupportedItem);
        return this;
    }

    /**
     * Get credentialSupported
     *
     * @return credentialSupported
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CREDENTIAL_SUPPORTED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<CredentialSupportedObject> getCredentialSupported() {
        return credentialSupported;
    }

    @JsonProperty(JSON_PROPERTY_CREDENTIAL_SUPPORTED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCredentialSupported(List<CredentialSupportedObject> credentialSupported) {
        this.credentialSupported = credentialSupported;
    }

    public UpdateIssuanceConfigInput issuerMetadata(Map<String, Object> issuerMetadata) {

        this.issuerMetadata = issuerMetadata;
        return this;
    }

    public UpdateIssuanceConfigInput putIssuerMetadataItem(String key, Object issuerMetadataItem) {
        if (this.issuerMetadata == null) {
            this.issuerMetadata = new HashMap<>();
        }
        this.issuerMetadata.put(key, issuerMetadataItem);
        return this;
    }

    /**
     * Issuer public information wallet may want to show to user during consent confirmation
     *
     * @return issuerMetadata
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ISSUER_METADATA)
    @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

    public Map<String, Object> getIssuerMetadata() {
        return issuerMetadata;
    }

    @JsonProperty(JSON_PROPERTY_ISSUER_METADATA)
    @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
    public void setIssuerMetadata(Map<String, Object> issuerMetadata) {
        this.issuerMetadata = issuerMetadata;
    }

    public UpdateIssuanceConfigInput returnUris(List<String> returnUris) {

        this.returnUris = returnUris;
        return this;
    }

    public UpdateIssuanceConfigInput addReturnUrisItem(String returnUrisItem) {
        if (this.returnUris == null) {
            this.returnUris = new ArrayList<>();
        }
        this.returnUris.add(returnUrisItem);
        return this;
    }

    /**
     * List of allowed URIs to be returned to after issuance
     *
     * @return returnUris
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_RETURN_URIS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getReturnUris() {
        return returnUris;
    }

    @JsonProperty(JSON_PROPERTY_RETURN_URIS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReturnUris(List<String> returnUris) {
        this.returnUris = returnUris;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateIssuanceConfigInput updateIssuanceConfigInput = (UpdateIssuanceConfigInput) o;
        return Objects.equals(this.name, updateIssuanceConfigInput.name)
                && Objects.equals(this.description, updateIssuanceConfigInput.description)
                && Objects.equals(this.issuerWalletId, updateIssuanceConfigInput.issuerWalletId)
                && Objects.equals(this.credentialOfferDuration, updateIssuanceConfigInput.credentialOfferDuration)
                && Objects.equals(this.format, updateIssuanceConfigInput.format)
                && Objects.equals(this.issuerUri, updateIssuanceConfigInput.issuerUri)
                && Objects.equals(this.credentialSupported, updateIssuanceConfigInput.credentialSupported)
                && Objects.equals(this.issuerMetadata, updateIssuanceConfigInput.issuerMetadata)
                && Objects.equals(this.returnUris, updateIssuanceConfigInput.returnUris);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, description, issuerWalletId, credentialOfferDuration, format, issuerUri,
                credentialSupported, issuerMetadata, returnUris);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateIssuanceConfigInput {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    issuerWalletId: ").append(toIndentedString(issuerWalletId)).append("\n");
        sb.append("    credentialOfferDuration: ").append(toIndentedString(credentialOfferDuration)).append("\n");
        sb.append("    format: ").append(toIndentedString(format)).append("\n");
        sb.append("    issuerUri: ").append(toIndentedString(issuerUri)).append("\n");
        sb.append("    credentialSupported: ").append(toIndentedString(credentialSupported)).append("\n");
        sb.append("    issuerMetadata: ").append(toIndentedString(issuerMetadata)).append("\n");
        sb.append("    returnUris: ").append(toIndentedString(returnUris)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix
     *            prefix of the query string
     *
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `name` to the URL query string
        if (getName() != null) {
            try {
                joiner.add(String.format("%sname%s=%s", prefix, suffix,
                        URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `description` to the URL query string
        if (getDescription() != null) {
            try {
                joiner.add(String.format("%sdescription%s=%s", prefix, suffix,
                        URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `issuerWalletId` to the URL query string
        if (getIssuerWalletId() != null) {
            try {
                joiner.add(String.format("%sissuerWalletId%s=%s", prefix, suffix,
                        URLEncoder.encode(String.valueOf(getIssuerWalletId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `credentialOfferDuration` to the URL query string
        if (getCredentialOfferDuration() != null) {
            try {
                joiner.add(String.format("%scredentialOfferDuration%s=%s", prefix, suffix, URLEncoder
                        .encode(String.valueOf(getCredentialOfferDuration()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `format` to the URL query string
        if (getFormat() != null) {
            try {
                joiner.add(String.format("%sformat%s=%s", prefix, suffix,
                        URLEncoder.encode(String.valueOf(getFormat()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `issuerUri` to the URL query string
        if (getIssuerUri() != null) {
            try {
                joiner.add(String.format("%sissuerUri%s=%s", prefix, suffix,
                        URLEncoder.encode(String.valueOf(getIssuerUri()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `credentialSupported` to the URL query string
        if (getCredentialSupported() != null) {
            for (int i = 0; i < getCredentialSupported().size(); i++) {
                if (getCredentialSupported().get(i) != null) {
                    joiner.add(getCredentialSupported().get(i).toUrlQueryString(String.format(
                            "%scredentialSupported%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `issuerMetadata` to the URL query string
        if (getIssuerMetadata() != null) {
            for (String _key : getIssuerMetadata().keySet()) {
                try {
                    joiner.add(String.format("%sissuerMetadata%s%s=%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
                            getIssuerMetadata().get(_key),
                            URLEncoder.encode(String.valueOf(getIssuerMetadata().get(_key)), "UTF-8").replaceAll("\\+",
                                    "%20")));
                } catch (UnsupportedEncodingException e) {
                    // Should never happen, UTF-8 is always supported
                    throw new RuntimeException(e);
                }
            }
        }

        // add `returnUris` to the URL query string
        if (getReturnUris() != null) {
            for (int i = 0; i < getReturnUris().size(); i++) {
                try {
                    joiner.add(String.format("%sreturnUris%s%s=%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                            URLEncoder.encode(String.valueOf(getReturnUris().get(i)), "UTF-8").replaceAll("\\+",
                                    "%20")));
                } catch (UnsupportedEncodingException e) {
                    // Should never happen, UTF-8 is always supported
                    throw new RuntimeException(e);
                }
            }
        }

        return joiner.toString();
    }

}
