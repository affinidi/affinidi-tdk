/*
 * CredentialIssuanceService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.issuance.client.models;

import java.util.Objects;
import com.affinidi.tdk.credential.issuance.client.models.FlowDataStatusListsDetailsInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.issuance.client.JSON;

/**
 * FlowData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-05T23:16:39.123213391Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class FlowData {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private String modifiedAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_FLOW_ID = "flowId";
  @SerializedName(SERIALIZED_NAME_FLOW_ID)
  private String flowId;

  public static final String SERIALIZED_NAME_CREDENTIAL_TYPE_ID = "credentialTypeId";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_TYPE_ID)
  private String credentialTypeId;

  public static final String SERIALIZED_NAME_JSON_LD_CONTEXT_URL = "jsonLdContextUrl";
  @SerializedName(SERIALIZED_NAME_JSON_LD_CONTEXT_URL)
  private String jsonLdContextUrl;

  public static final String SERIALIZED_NAME_JSON_SCHEMA_URL = "jsonSchemaUrl";
  @SerializedName(SERIALIZED_NAME_JSON_SCHEMA_URL)
  private String jsonSchemaUrl;

  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  private String configurationId;

  public static final String SERIALIZED_NAME_ISSUED_AT = "issuedAt";
  @SerializedName(SERIALIZED_NAME_ISSUED_AT)
  private String issuedAt;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  private String walletId;

  public static final String SERIALIZED_NAME_PROJECT_ID_CONFIGURATION_ID = "projectIdConfigurationId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID_CONFIGURATION_ID)
  private String projectIdConfigurationId;

  public static final String SERIALIZED_NAME_PROJECT_ID_CONFIGURATION_ID_WALLET_ID = "projectIdConfigurationIdWalletId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID_CONFIGURATION_ID_WALLET_ID)
  private String projectIdConfigurationIdWalletId;

  public static final String SERIALIZED_NAME_PROJECT_ID_CONFIGURATION_ID_CREDENTIAL_TYPE = "projectIdConfigurationIdCredentialType";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID_CONFIGURATION_ID_CREDENTIAL_TYPE)
  private String projectIdConfigurationIdCredentialType;

  public static final String SERIALIZED_NAME_STATUS_LISTS_DETAILS = "statusListsDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_LISTS_DETAILS)
  private List<FlowDataStatusListsDetailsInner> statusListsDetails = new ArrayList<>();

  public FlowData() {
  }

  public FlowData createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * [GEN] ISO 8601 string of the creation date/time the entity
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public FlowData modifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * [GEN] ISO 8601 string of the modification date/time the entity
   * @return modifiedAt
   */
  @javax.annotation.Nonnull
  public String getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public FlowData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FlowData projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public FlowData flowId(String flowId) {
    this.flowId = flowId;
    return this;
  }

  /**
   * Get flowId
   * @return flowId
   */
  @javax.annotation.Nonnull
  public String getFlowId() {
    return flowId;
  }

  public void setFlowId(String flowId) {
    this.flowId = flowId;
  }


  public FlowData credentialTypeId(String credentialTypeId) {
    this.credentialTypeId = credentialTypeId;
    return this;
  }

  /**
   * Get credentialTypeId
   * @return credentialTypeId
   */
  @javax.annotation.Nonnull
  public String getCredentialTypeId() {
    return credentialTypeId;
  }

  public void setCredentialTypeId(String credentialTypeId) {
    this.credentialTypeId = credentialTypeId;
  }


  public FlowData jsonLdContextUrl(String jsonLdContextUrl) {
    this.jsonLdContextUrl = jsonLdContextUrl;
    return this;
  }

  /**
   * Get jsonLdContextUrl
   * @return jsonLdContextUrl
   */
  @javax.annotation.Nonnull
  public String getJsonLdContextUrl() {
    return jsonLdContextUrl;
  }

  public void setJsonLdContextUrl(String jsonLdContextUrl) {
    this.jsonLdContextUrl = jsonLdContextUrl;
  }


  public FlowData jsonSchemaUrl(String jsonSchemaUrl) {
    this.jsonSchemaUrl = jsonSchemaUrl;
    return this;
  }

  /**
   * Get jsonSchemaUrl
   * @return jsonSchemaUrl
   */
  @javax.annotation.Nonnull
  public String getJsonSchemaUrl() {
    return jsonSchemaUrl;
  }

  public void setJsonSchemaUrl(String jsonSchemaUrl) {
    this.jsonSchemaUrl = jsonSchemaUrl;
  }


  public FlowData configurationId(String configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Id of configuration, used to issue VC.
   * @return configurationId
   */
  @javax.annotation.Nullable
  public String getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(String configurationId) {
    this.configurationId = configurationId;
  }


  public FlowData issuedAt(String issuedAt) {
    this.issuedAt = issuedAt;
    return this;
  }

  /**
   * when credential was issued to the holder (holder invoked generateCredentials endpoint)
   * @return issuedAt
   */
  @javax.annotation.Nullable
  public String getIssuedAt() {
    return issuedAt;
  }

  public void setIssuedAt(String issuedAt) {
    this.issuedAt = issuedAt;
  }


  public FlowData walletId(String walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * Id of wallet, used to issue VC.
   * @return walletId
   */
  @javax.annotation.Nullable
  public String getWalletId() {
    return walletId;
  }

  public void setWalletId(String walletId) {
    this.walletId = walletId;
  }


  public FlowData projectIdConfigurationId(String projectIdConfigurationId) {
    this.projectIdConfigurationId = projectIdConfigurationId;
    return this;
  }

  /**
   * Id of configuration with which VC was issued. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{configurationId}\&quot;
   * @return projectIdConfigurationId
   */
  @javax.annotation.Nullable
  public String getProjectIdConfigurationId() {
    return projectIdConfigurationId;
  }

  public void setProjectIdConfigurationId(String projectIdConfigurationId) {
    this.projectIdConfigurationId = projectIdConfigurationId;
  }


  public FlowData projectIdConfigurationIdWalletId(String projectIdConfigurationIdWalletId) {
    this.projectIdConfigurationIdWalletId = projectIdConfigurationIdWalletId;
    return this;
  }

  /**
   * Id of wallet which issued VC. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{walletId}\&quot;
   * @return projectIdConfigurationIdWalletId
   */
  @javax.annotation.Nullable
  public String getProjectIdConfigurationIdWalletId() {
    return projectIdConfigurationIdWalletId;
  }

  public void setProjectIdConfigurationIdWalletId(String projectIdConfigurationIdWalletId) {
    this.projectIdConfigurationIdWalletId = projectIdConfigurationIdWalletId;
  }


  public FlowData projectIdConfigurationIdCredentialType(String projectIdConfigurationIdCredentialType) {
    this.projectIdConfigurationIdCredentialType = projectIdConfigurationIdCredentialType;
    return this;
  }

  /**
   * VC.type value. To use as an index, it is grouped together with projectId, as \&quot;{projectIdConfigurationId}#{credentialType}\&quot;
   * @return projectIdConfigurationIdCredentialType
   */
  @javax.annotation.Nullable
  public String getProjectIdConfigurationIdCredentialType() {
    return projectIdConfigurationIdCredentialType;
  }

  public void setProjectIdConfigurationIdCredentialType(String projectIdConfigurationIdCredentialType) {
    this.projectIdConfigurationIdCredentialType = projectIdConfigurationIdCredentialType;
  }


  public FlowData statusListsDetails(List<FlowDataStatusListsDetailsInner> statusListsDetails) {
    this.statusListsDetails = statusListsDetails;
    return this;
  }

  public FlowData addStatusListsDetailsItem(FlowDataStatusListsDetailsInner statusListsDetailsItem) {
    if (this.statusListsDetails == null) {
      this.statusListsDetails = new ArrayList<>();
    }
    this.statusListsDetails.add(statusListsDetailsItem);
    return this;
  }

  /**
   * Get statusListsDetails
   * @return statusListsDetails
   */
  @javax.annotation.Nullable
  public List<FlowDataStatusListsDetailsInner> getStatusListsDetails() {
    return statusListsDetails;
  }

  public void setStatusListsDetails(List<FlowDataStatusListsDetailsInner> statusListsDetails) {
    this.statusListsDetails = statusListsDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowData flowData = (FlowData) o;
    return Objects.equals(this.createdAt, flowData.createdAt) &&
        Objects.equals(this.modifiedAt, flowData.modifiedAt) &&
        Objects.equals(this.id, flowData.id) &&
        Objects.equals(this.projectId, flowData.projectId) &&
        Objects.equals(this.flowId, flowData.flowId) &&
        Objects.equals(this.credentialTypeId, flowData.credentialTypeId) &&
        Objects.equals(this.jsonLdContextUrl, flowData.jsonLdContextUrl) &&
        Objects.equals(this.jsonSchemaUrl, flowData.jsonSchemaUrl) &&
        Objects.equals(this.configurationId, flowData.configurationId) &&
        Objects.equals(this.issuedAt, flowData.issuedAt) &&
        Objects.equals(this.walletId, flowData.walletId) &&
        Objects.equals(this.projectIdConfigurationId, flowData.projectIdConfigurationId) &&
        Objects.equals(this.projectIdConfigurationIdWalletId, flowData.projectIdConfigurationIdWalletId) &&
        Objects.equals(this.projectIdConfigurationIdCredentialType, flowData.projectIdConfigurationIdCredentialType) &&
        Objects.equals(this.statusListsDetails, flowData.statusListsDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, modifiedAt, id, projectId, flowId, credentialTypeId, jsonLdContextUrl, jsonSchemaUrl, configurationId, issuedAt, walletId, projectIdConfigurationId, projectIdConfigurationIdWalletId, projectIdConfigurationIdCredentialType, statusListsDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowData {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    credentialTypeId: ").append(toIndentedString(credentialTypeId)).append("\n");
    sb.append("    jsonLdContextUrl: ").append(toIndentedString(jsonLdContextUrl)).append("\n");
    sb.append("    jsonSchemaUrl: ").append(toIndentedString(jsonSchemaUrl)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    issuedAt: ").append(toIndentedString(issuedAt)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    projectIdConfigurationId: ").append(toIndentedString(projectIdConfigurationId)).append("\n");
    sb.append("    projectIdConfigurationIdWalletId: ").append(toIndentedString(projectIdConfigurationIdWalletId)).append("\n");
    sb.append("    projectIdConfigurationIdCredentialType: ").append(toIndentedString(projectIdConfigurationIdCredentialType)).append("\n");
    sb.append("    statusListsDetails: ").append(toIndentedString(statusListsDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("modifiedAt");
    openapiFields.add("id");
    openapiFields.add("projectId");
    openapiFields.add("flowId");
    openapiFields.add("credentialTypeId");
    openapiFields.add("jsonLdContextUrl");
    openapiFields.add("jsonSchemaUrl");
    openapiFields.add("configurationId");
    openapiFields.add("issuedAt");
    openapiFields.add("walletId");
    openapiFields.add("projectIdConfigurationId");
    openapiFields.add("projectIdConfigurationIdWalletId");
    openapiFields.add("projectIdConfigurationIdCredentialType");
    openapiFields.add("statusListsDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("modifiedAt");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("flowId");
    openapiRequiredFields.add("credentialTypeId");
    openapiRequiredFields.add("jsonLdContextUrl");
    openapiRequiredFields.add("jsonSchemaUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlowData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowData is not found in the empty JSON string", FlowData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlowData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if (!jsonObj.get("modifiedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedAt").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if (!jsonObj.get("flowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowId").toString()));
      }
      if (!jsonObj.get("credentialTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialTypeId").toString()));
      }
      if (!jsonObj.get("jsonLdContextUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonLdContextUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonLdContextUrl").toString()));
      }
      if (!jsonObj.get("jsonSchemaUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonSchemaUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonSchemaUrl").toString()));
      }
      if ((jsonObj.get("configurationId") != null && !jsonObj.get("configurationId").isJsonNull()) && !jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      if ((jsonObj.get("issuedAt") != null && !jsonObj.get("issuedAt").isJsonNull()) && !jsonObj.get("issuedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuedAt").toString()));
      }
      if ((jsonObj.get("walletId") != null && !jsonObj.get("walletId").isJsonNull()) && !jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
      if ((jsonObj.get("projectIdConfigurationId") != null && !jsonObj.get("projectIdConfigurationId").isJsonNull()) && !jsonObj.get("projectIdConfigurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectIdConfigurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectIdConfigurationId").toString()));
      }
      if ((jsonObj.get("projectIdConfigurationIdWalletId") != null && !jsonObj.get("projectIdConfigurationIdWalletId").isJsonNull()) && !jsonObj.get("projectIdConfigurationIdWalletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectIdConfigurationIdWalletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectIdConfigurationIdWalletId").toString()));
      }
      if ((jsonObj.get("projectIdConfigurationIdCredentialType") != null && !jsonObj.get("projectIdConfigurationIdCredentialType").isJsonNull()) && !jsonObj.get("projectIdConfigurationIdCredentialType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectIdConfigurationIdCredentialType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectIdConfigurationIdCredentialType").toString()));
      }
      if (jsonObj.get("statusListsDetails") != null && !jsonObj.get("statusListsDetails").isJsonNull()) {
        JsonArray jsonArraystatusListsDetails = jsonObj.getAsJsonArray("statusListsDetails");
        if (jsonArraystatusListsDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusListsDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusListsDetails` to be an array in the JSON string but got `%s`", jsonObj.get("statusListsDetails").toString()));
          }

          // validate the optional field `statusListsDetails` (array)
          for (int i = 0; i < jsonArraystatusListsDetails.size(); i++) {
            FlowDataStatusListsDetailsInner.validateJsonElement(jsonArraystatusListsDetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowData.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowData>() {
           @Override
           public void write(JsonWriter out, FlowData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlowData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlowData
   * @throws IOException if the JSON string is invalid with respect to FlowData
   */
  public static FlowData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowData.class);
  }

  /**
   * Convert an instance of FlowData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

