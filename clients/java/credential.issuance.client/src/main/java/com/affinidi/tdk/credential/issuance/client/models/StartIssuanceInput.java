/*
 * CredentialIssuanceService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.issuance.client.models;

import java.util.Objects;
import com.affinidi.tdk.credential.issuance.client.models.StartIssuanceInputDataInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.issuance.client.JSON;

/**
 * StartIssuanceInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-31T23:18:06.224911694Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class StartIssuanceInput {
  /**
   * In TX_CODE claim mode, additional transaction code will be generated and the Authorization Server expects presentation of the transaction Code by the end-user. If FIXED_HOLDER claim mode is defined, holderDid must be present and service will not generate additional transaction code (NORMAL claimMode is deprecated).
   */
  @JsonAdapter(ClaimModeEnum.Adapter.class)
  public enum ClaimModeEnum {
    NORMAL("NORMAL"),
    
    TX_CODE("TX_CODE"),
    
    FIXED_HOLDER("FIXED_HOLDER");

    private String value;

    ClaimModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClaimModeEnum fromValue(String value) {
      for (ClaimModeEnum b : ClaimModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClaimModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClaimModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClaimModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClaimModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClaimModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLAIM_MODE = "claimMode";
  @SerializedName(SERIALIZED_NAME_CLAIM_MODE)
  private ClaimModeEnum claimMode;

  public static final String SERIALIZED_NAME_HOLDER_DID = "holderDid";
  @SerializedName(SERIALIZED_NAME_HOLDER_DID)
  private String holderDid;

  public static final String SERIALIZED_NAME_ISSUANCE_ID = "issuanceId";
  @SerializedName(SERIALIZED_NAME_ISSUANCE_ID)
  private String issuanceId;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<StartIssuanceInputDataInner> data = new ArrayList<>();

  public StartIssuanceInput() {
  }

  public StartIssuanceInput claimMode(ClaimModeEnum claimMode) {
    this.claimMode = claimMode;
    return this;
  }

  /**
   * In TX_CODE claim mode, additional transaction code will be generated and the Authorization Server expects presentation of the transaction Code by the end-user. If FIXED_HOLDER claim mode is defined, holderDid must be present and service will not generate additional transaction code (NORMAL claimMode is deprecated).
   * @return claimMode
   */
  @javax.annotation.Nullable
  public ClaimModeEnum getClaimMode() {
    return claimMode;
  }

  public void setClaimMode(ClaimModeEnum claimMode) {
    this.claimMode = claimMode;
  }


  public StartIssuanceInput holderDid(String holderDid) {
    this.holderDid = holderDid;
    return this;
  }

  /**
   * Holder DID
   * @return holderDid
   */
  @javax.annotation.Nullable
  public String getHolderDid() {
    return holderDid;
  }

  public void setHolderDid(String holderDid) {
    this.holderDid = holderDid;
  }


  public StartIssuanceInput issuanceId(String issuanceId) {
    this.issuanceId = issuanceId;
    return this;
  }

  /**
   * Website&#39;s internal identifier. Website may use to get info about the status of issuance flow. If it is not provided, CIS will generate one.
   * @return issuanceId
   */
  @javax.annotation.Nullable
  public String getIssuanceId() {
    return issuanceId;
  }

  public void setIssuanceId(String issuanceId) {
    this.issuanceId = issuanceId;
  }


  public StartIssuanceInput data(List<StartIssuanceInputDataInner> data) {
    this.data = data;
    return this;
  }

  public StartIssuanceInput addDataItem(StartIssuanceInputDataInner dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public List<StartIssuanceInputDataInner> getData() {
    return data;
  }

  public void setData(List<StartIssuanceInputDataInner> data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartIssuanceInput startIssuanceInput = (StartIssuanceInput) o;
    return Objects.equals(this.claimMode, startIssuanceInput.claimMode) &&
        Objects.equals(this.holderDid, startIssuanceInput.holderDid) &&
        Objects.equals(this.issuanceId, startIssuanceInput.issuanceId) &&
        Objects.equals(this.data, startIssuanceInput.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claimMode, holderDid, issuanceId, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartIssuanceInput {\n");
    sb.append("    claimMode: ").append(toIndentedString(claimMode)).append("\n");
    sb.append("    holderDid: ").append(toIndentedString(holderDid)).append("\n");
    sb.append("    issuanceId: ").append(toIndentedString(issuanceId)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("claimMode");
    openapiFields.add("holderDid");
    openapiFields.add("issuanceId");
    openapiFields.add("data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartIssuanceInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartIssuanceInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartIssuanceInput is not found in the empty JSON string", StartIssuanceInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartIssuanceInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartIssuanceInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartIssuanceInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("claimMode") != null && !jsonObj.get("claimMode").isJsonNull()) && !jsonObj.get("claimMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimMode").toString()));
      }
      // validate the optional field `claimMode`
      if (jsonObj.get("claimMode") != null && !jsonObj.get("claimMode").isJsonNull()) {
        ClaimModeEnum.validateJsonElement(jsonObj.get("claimMode"));
      }
      if ((jsonObj.get("holderDid") != null && !jsonObj.get("holderDid").isJsonNull()) && !jsonObj.get("holderDid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holderDid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holderDid").toString()));
      }
      if ((jsonObj.get("issuanceId") != null && !jsonObj.get("issuanceId").isJsonNull()) && !jsonObj.get("issuanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuanceId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }

      JsonArray jsonArraydata = jsonObj.getAsJsonArray("data");
      // validate the required field `data` (array)
      for (int i = 0; i < jsonArraydata.size(); i++) {
        StartIssuanceInputDataInner.validateJsonElement(jsonArraydata.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartIssuanceInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartIssuanceInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartIssuanceInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartIssuanceInput.class));

       return (TypeAdapter<T>) new TypeAdapter<StartIssuanceInput>() {
           @Override
           public void write(JsonWriter out, StartIssuanceInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartIssuanceInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartIssuanceInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartIssuanceInput
   * @throws IOException if the JSON string is invalid with respect to StartIssuanceInput
   */
  public static StartIssuanceInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartIssuanceInput.class);
  }

  /**
   * Convert an instance of StartIssuanceInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

