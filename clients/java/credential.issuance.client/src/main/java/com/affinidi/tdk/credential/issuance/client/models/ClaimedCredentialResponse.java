/*
 * CredentialIssuanceService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.issuance.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Response for getting the claimed VC
 */
@JsonPropertyOrder({
  ClaimedCredentialResponse.JSON_PROPERTY_CREDENTIAL,
  ClaimedCredentialResponse.JSON_PROPERTY_CREDENTIALS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class ClaimedCredentialResponse {
  public static final String JSON_PROPERTY_CREDENTIAL = "credential";
  private Map<String, Object> credential = new HashMap<>();

  public static final String JSON_PROPERTY_CREDENTIALS = "credentials";
  private List<Map<String, Object>> credentials = new ArrayList<>();

  public ClaimedCredentialResponse() {
  }

  public ClaimedCredentialResponse credential(Map<String, Object> credential) {
    
    this.credential = credential;
    return this;
  }

  public ClaimedCredentialResponse putCredentialItem(String key, Object credentialItem) {
    if (this.credential == null) {
      this.credential = new HashMap<>();
    }
    this.credential.put(key, credentialItem);
    return this;
  }

  /**
   * claimed credential for a single issuance
   * @return credential
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREDENTIAL)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getCredential() {
    return credential;
  }


  @JsonProperty(JSON_PROPERTY_CREDENTIAL)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setCredential(Map<String, Object> credential) {
    this.credential = credential;
  }

  public ClaimedCredentialResponse credentials(List<Map<String, Object>> credentials) {
    
    this.credentials = credentials;
    return this;
  }

  public ClaimedCredentialResponse addCredentialsItem(Map<String, Object> credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new ArrayList<>();
    }
    this.credentials.add(credentialsItem);
    return this;
  }

  /**
   * claimed credentials for batch issuances
   * @return credentials
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREDENTIALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Map<String, Object>> getCredentials() {
    return credentials;
  }


  @JsonProperty(JSON_PROPERTY_CREDENTIALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCredentials(List<Map<String, Object>> credentials) {
    this.credentials = credentials;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClaimedCredentialResponse claimedCredentialResponse = (ClaimedCredentialResponse) o;
    return Objects.equals(this.credential, claimedCredentialResponse.credential) &&
        Objects.equals(this.credentials, claimedCredentialResponse.credentials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credential, credentials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClaimedCredentialResponse {\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `credential` to the URL query string
    if (getCredential() != null) {
      for (String _key : getCredential().keySet()) {
        try {
          joiner.add(String.format("%scredential%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getCredential().get(_key), URLEncoder.encode(String.valueOf(getCredential().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `credentials` to the URL query string
    if (getCredentials() != null) {
      for (int i = 0; i < getCredentials().size(); i++) {
        try {
          joiner.add(String.format("%scredentials%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getCredentials().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

