/*
 * CredentialIssuanceService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.issuance.client.models;

import java.util.Objects;
import com.affinidi.tdk.credential.issuance.client.models.ActionForbiddenErrorDetailsInner;
import com.affinidi.tdk.credential.issuance.client.models.CredentialOfferClaimedError;
import com.affinidi.tdk.credential.issuance.client.models.CredentialOfferExpiredError;
import com.affinidi.tdk.credential.issuance.client.models.InvalidParameterError;
import com.affinidi.tdk.credential.issuance.client.models.ProjectCredentialConfigNotExistError;
import com.affinidi.tdk.credential.issuance.client.models.VcClaimedError;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.affinidi.tdk.credential.issuance.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-07T23:17:16.649688664Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class GetCredentialOffer400Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetCredentialOffer400Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetCredentialOffer400Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetCredentialOffer400Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InvalidParameterError> adapterInvalidParameterError = gson.getDelegateAdapter(this, TypeToken.get(InvalidParameterError.class));
            final TypeAdapter<ProjectCredentialConfigNotExistError> adapterProjectCredentialConfigNotExistError = gson.getDelegateAdapter(this, TypeToken.get(ProjectCredentialConfigNotExistError.class));
            final TypeAdapter<CredentialOfferExpiredError> adapterCredentialOfferExpiredError = gson.getDelegateAdapter(this, TypeToken.get(CredentialOfferExpiredError.class));
            final TypeAdapter<CredentialOfferClaimedError> adapterCredentialOfferClaimedError = gson.getDelegateAdapter(this, TypeToken.get(CredentialOfferClaimedError.class));
            final TypeAdapter<VcClaimedError> adapterVcClaimedError = gson.getDelegateAdapter(this, TypeToken.get(VcClaimedError.class));

            return (TypeAdapter<T>) new TypeAdapter<GetCredentialOffer400Response>() {
                @Override
                public void write(JsonWriter out, GetCredentialOffer400Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `InvalidParameterError`
                    if (value.getActualInstance() instanceof InvalidParameterError) {
                        JsonElement element = adapterInvalidParameterError.toJsonTree((InvalidParameterError)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ProjectCredentialConfigNotExistError`
                    if (value.getActualInstance() instanceof ProjectCredentialConfigNotExistError) {
                        JsonElement element = adapterProjectCredentialConfigNotExistError.toJsonTree((ProjectCredentialConfigNotExistError)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CredentialOfferExpiredError`
                    if (value.getActualInstance() instanceof CredentialOfferExpiredError) {
                        JsonElement element = adapterCredentialOfferExpiredError.toJsonTree((CredentialOfferExpiredError)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CredentialOfferClaimedError`
                    if (value.getActualInstance() instanceof CredentialOfferClaimedError) {
                        JsonElement element = adapterCredentialOfferClaimedError.toJsonTree((CredentialOfferClaimedError)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VcClaimedError`
                    if (value.getActualInstance() instanceof VcClaimedError) {
                        JsonElement element = adapterVcClaimedError.toJsonTree((VcClaimedError)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CredentialOfferClaimedError, CredentialOfferExpiredError, InvalidParameterError, ProjectCredentialConfigNotExistError, VcClaimedError");
                }

                @Override
                public GetCredentialOffer400Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize InvalidParameterError
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InvalidParameterError.validateJsonElement(jsonElement);
                        actualAdapter = adapterInvalidParameterError;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InvalidParameterError'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InvalidParameterError failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InvalidParameterError'", e);
                    }
                    // deserialize ProjectCredentialConfigNotExistError
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProjectCredentialConfigNotExistError.validateJsonElement(jsonElement);
                        actualAdapter = adapterProjectCredentialConfigNotExistError;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ProjectCredentialConfigNotExistError'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProjectCredentialConfigNotExistError failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProjectCredentialConfigNotExistError'", e);
                    }
                    // deserialize CredentialOfferExpiredError
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialOfferExpiredError.validateJsonElement(jsonElement);
                        actualAdapter = adapterCredentialOfferExpiredError;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialOfferExpiredError'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialOfferExpiredError failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialOfferExpiredError'", e);
                    }
                    // deserialize CredentialOfferClaimedError
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialOfferClaimedError.validateJsonElement(jsonElement);
                        actualAdapter = adapterCredentialOfferClaimedError;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialOfferClaimedError'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialOfferClaimedError failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialOfferClaimedError'", e);
                    }
                    // deserialize VcClaimedError
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VcClaimedError.validateJsonElement(jsonElement);
                        actualAdapter = adapterVcClaimedError;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VcClaimedError'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VcClaimedError failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VcClaimedError'", e);
                    }

                    if (match == 1) {
                        GetCredentialOffer400Response ret = new GetCredentialOffer400Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetCredentialOffer400Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public GetCredentialOffer400Response() {
        super("oneOf", Boolean.FALSE);
    }

    public GetCredentialOffer400Response(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("InvalidParameterError", InvalidParameterError.class);
        schemas.put("ProjectCredentialConfigNotExistError", ProjectCredentialConfigNotExistError.class);
        schemas.put("CredentialOfferExpiredError", CredentialOfferExpiredError.class);
        schemas.put("CredentialOfferClaimedError", CredentialOfferClaimedError.class);
        schemas.put("VcClaimedError", VcClaimedError.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return GetCredentialOffer400Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CredentialOfferClaimedError, CredentialOfferExpiredError, InvalidParameterError, ProjectCredentialConfigNotExistError, VcClaimedError
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof InvalidParameterError) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProjectCredentialConfigNotExistError) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialOfferExpiredError) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialOfferClaimedError) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VcClaimedError) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CredentialOfferClaimedError, CredentialOfferExpiredError, InvalidParameterError, ProjectCredentialConfigNotExistError, VcClaimedError");
    }

    /**
     * Get the actual instance, which can be the following:
     * CredentialOfferClaimedError, CredentialOfferExpiredError, InvalidParameterError, ProjectCredentialConfigNotExistError, VcClaimedError
     *
     * @return The actual instance (CredentialOfferClaimedError, CredentialOfferExpiredError, InvalidParameterError, ProjectCredentialConfigNotExistError, VcClaimedError)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `InvalidParameterError`. If the actual instance is not `InvalidParameterError`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InvalidParameterError`
     * @throws ClassCastException if the instance is not `InvalidParameterError`
     */
    public InvalidParameterError getInvalidParameterError() throws ClassCastException {
        return (InvalidParameterError)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ProjectCredentialConfigNotExistError`. If the actual instance is not `ProjectCredentialConfigNotExistError`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProjectCredentialConfigNotExistError`
     * @throws ClassCastException if the instance is not `ProjectCredentialConfigNotExistError`
     */
    public ProjectCredentialConfigNotExistError getProjectCredentialConfigNotExistError() throws ClassCastException {
        return (ProjectCredentialConfigNotExistError)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CredentialOfferExpiredError`. If the actual instance is not `CredentialOfferExpiredError`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialOfferExpiredError`
     * @throws ClassCastException if the instance is not `CredentialOfferExpiredError`
     */
    public CredentialOfferExpiredError getCredentialOfferExpiredError() throws ClassCastException {
        return (CredentialOfferExpiredError)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CredentialOfferClaimedError`. If the actual instance is not `CredentialOfferClaimedError`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialOfferClaimedError`
     * @throws ClassCastException if the instance is not `CredentialOfferClaimedError`
     */
    public CredentialOfferClaimedError getCredentialOfferClaimedError() throws ClassCastException {
        return (CredentialOfferClaimedError)super.getActualInstance();
    }
    /**
     * Get the actual instance of `VcClaimedError`. If the actual instance is not `VcClaimedError`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VcClaimedError`
     * @throws ClassCastException if the instance is not `VcClaimedError`
     */
    public VcClaimedError getVcClaimedError() throws ClassCastException {
        return (VcClaimedError)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetCredentialOffer400Response
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with InvalidParameterError
        try {
            InvalidParameterError.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InvalidParameterError failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ProjectCredentialConfigNotExistError
        try {
            ProjectCredentialConfigNotExistError.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ProjectCredentialConfigNotExistError failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CredentialOfferExpiredError
        try {
            CredentialOfferExpiredError.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CredentialOfferExpiredError failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CredentialOfferClaimedError
        try {
            CredentialOfferClaimedError.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CredentialOfferClaimedError failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VcClaimedError
        try {
            VcClaimedError.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VcClaimedError failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for GetCredentialOffer400Response with oneOf schemas: CredentialOfferClaimedError, CredentialOfferExpiredError, InvalidParameterError, ProjectCredentialConfigNotExistError, VcClaimedError. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of GetCredentialOffer400Response given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetCredentialOffer400Response
     * @throws IOException if the JSON string is invalid with respect to GetCredentialOffer400Response
     */
    public static GetCredentialOffer400Response fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetCredentialOffer400Response.class);
    }

    /**
     * Convert an instance of GetCredentialOffer400Response to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

