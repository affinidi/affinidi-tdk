/*
 * CredentialIssuanceService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.issuance.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.issuance.client.JSON;

/**
 * FlowDataStatusListsDetailsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-09T11:15:31.240747833Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class FlowDataStatusListsDetailsInner {
  /**
   * Purpose of status list to which credential is added
   */
  @JsonAdapter(StatusListPurposeEnum.Adapter.class)
  public enum StatusListPurposeEnum {
    REVOKED("REVOKED");

    private String value;

    StatusListPurposeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusListPurposeEnum fromValue(String value) {
      for (StatusListPurposeEnum b : StatusListPurposeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusListPurposeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusListPurposeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusListPurposeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusListPurposeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusListPurposeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_LIST_PURPOSE = "statusListPurpose";
  @SerializedName(SERIALIZED_NAME_STATUS_LIST_PURPOSE)
  private StatusListPurposeEnum statusListPurpose;

  public static final String SERIALIZED_NAME_STATUS_LIST_ID = "statusListId";
  @SerializedName(SERIALIZED_NAME_STATUS_LIST_ID)
  private String statusListId;

  public static final String SERIALIZED_NAME_STATUS_LIST_INDEX = "statusListIndex";
  @SerializedName(SERIALIZED_NAME_STATUS_LIST_INDEX)
  private String statusListIndex;

  /**
   * Gets or Sets standard
   */
  @JsonAdapter(StandardEnum.Adapter.class)
  public enum StandardEnum {
    REVOCATION_LIST2020("RevocationList2020"),
    
    BITSTRING_STATUS_LIST_V1("BitstringStatusListV1");

    private String value;

    StandardEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StandardEnum fromValue(String value) {
      for (StandardEnum b : StandardEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StandardEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StandardEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StandardEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StandardEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StandardEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STANDARD = "standard";
  @SerializedName(SERIALIZED_NAME_STANDARD)
  private StandardEnum standard;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_STATUS_ACTIVATION_REASON = "statusActivationReason";
  @SerializedName(SERIALIZED_NAME_STATUS_ACTIVATION_REASON)
  private String statusActivationReason;

  public static final String SERIALIZED_NAME_STATUS_ACTIVATED_AT = "statusActivatedAt";
  @SerializedName(SERIALIZED_NAME_STATUS_ACTIVATED_AT)
  private String statusActivatedAt;

  public FlowDataStatusListsDetailsInner() {
  }

  public FlowDataStatusListsDetailsInner statusListPurpose(StatusListPurposeEnum statusListPurpose) {
    this.statusListPurpose = statusListPurpose;
    return this;
  }

  /**
   * Purpose of status list to which credential is added
   * @return statusListPurpose
   */
  @javax.annotation.Nonnull
  public StatusListPurposeEnum getStatusListPurpose() {
    return statusListPurpose;
  }

  public void setStatusListPurpose(StatusListPurposeEnum statusListPurpose) {
    this.statusListPurpose = statusListPurpose;
  }


  public FlowDataStatusListsDetailsInner statusListId(String statusListId) {
    this.statusListId = statusListId;
    return this;
  }

  /**
   * id of status list
   * @return statusListId
   */
  @javax.annotation.Nonnull
  public String getStatusListId() {
    return statusListId;
  }

  public void setStatusListId(String statusListId) {
    this.statusListId = statusListId;
  }


  public FlowDataStatusListsDetailsInner statusListIndex(String statusListIndex) {
    this.statusListIndex = statusListIndex;
    return this;
  }

  /**
   * as usual it is a number, but all standards use a string
   * @return statusListIndex
   */
  @javax.annotation.Nonnull
  public String getStatusListIndex() {
    return statusListIndex;
  }

  public void setStatusListIndex(String statusListIndex) {
    this.statusListIndex = statusListIndex;
  }


  public FlowDataStatusListsDetailsInner standard(StandardEnum standard) {
    this.standard = standard;
    return this;
  }

  /**
   * Get standard
   * @return standard
   */
  @javax.annotation.Nonnull
  public StandardEnum getStandard() {
    return standard;
  }

  public void setStandard(StandardEnum standard) {
    this.standard = standard;
  }


  public FlowDataStatusListsDetailsInner isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * indicates status is true or not. Default false.
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public FlowDataStatusListsDetailsInner statusActivationReason(String statusActivationReason) {
    this.statusActivationReason = statusActivationReason;
    return this;
  }

  /**
   * text reasoning why the status is true (if true). Optional.
   * @return statusActivationReason
   */
  @javax.annotation.Nullable
  public String getStatusActivationReason() {
    return statusActivationReason;
  }

  public void setStatusActivationReason(String statusActivationReason) {
    this.statusActivationReason = statusActivationReason;
  }


  public FlowDataStatusListsDetailsInner statusActivatedAt(String statusActivatedAt) {
    this.statusActivatedAt = statusActivatedAt;
    return this;
  }

  /**
   * ISO 8601 string of the modification date/time the status. Optional.
   * @return statusActivatedAt
   */
  @javax.annotation.Nullable
  public String getStatusActivatedAt() {
    return statusActivatedAt;
  }

  public void setStatusActivatedAt(String statusActivatedAt) {
    this.statusActivatedAt = statusActivatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowDataStatusListsDetailsInner flowDataStatusListsDetailsInner = (FlowDataStatusListsDetailsInner) o;
    return Objects.equals(this.statusListPurpose, flowDataStatusListsDetailsInner.statusListPurpose) &&
        Objects.equals(this.statusListId, flowDataStatusListsDetailsInner.statusListId) &&
        Objects.equals(this.statusListIndex, flowDataStatusListsDetailsInner.statusListIndex) &&
        Objects.equals(this.standard, flowDataStatusListsDetailsInner.standard) &&
        Objects.equals(this.isActive, flowDataStatusListsDetailsInner.isActive) &&
        Objects.equals(this.statusActivationReason, flowDataStatusListsDetailsInner.statusActivationReason) &&
        Objects.equals(this.statusActivatedAt, flowDataStatusListsDetailsInner.statusActivatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusListPurpose, statusListId, statusListIndex, standard, isActive, statusActivationReason, statusActivatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowDataStatusListsDetailsInner {\n");
    sb.append("    statusListPurpose: ").append(toIndentedString(statusListPurpose)).append("\n");
    sb.append("    statusListId: ").append(toIndentedString(statusListId)).append("\n");
    sb.append("    statusListIndex: ").append(toIndentedString(statusListIndex)).append("\n");
    sb.append("    standard: ").append(toIndentedString(standard)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    statusActivationReason: ").append(toIndentedString(statusActivationReason)).append("\n");
    sb.append("    statusActivatedAt: ").append(toIndentedString(statusActivatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("statusListPurpose");
    openapiFields.add("statusListId");
    openapiFields.add("statusListIndex");
    openapiFields.add("standard");
    openapiFields.add("isActive");
    openapiFields.add("statusActivationReason");
    openapiFields.add("statusActivatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("statusListPurpose");
    openapiRequiredFields.add("statusListId");
    openapiRequiredFields.add("statusListIndex");
    openapiRequiredFields.add("standard");
    openapiRequiredFields.add("isActive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlowDataStatusListsDetailsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowDataStatusListsDetailsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowDataStatusListsDetailsInner is not found in the empty JSON string", FlowDataStatusListsDetailsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowDataStatusListsDetailsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowDataStatusListsDetailsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlowDataStatusListsDetailsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("statusListPurpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusListPurpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusListPurpose").toString()));
      }
      // validate the required field `statusListPurpose`
      StatusListPurposeEnum.validateJsonElement(jsonObj.get("statusListPurpose"));
      if (!jsonObj.get("statusListId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusListId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusListId").toString()));
      }
      if (!jsonObj.get("statusListIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusListIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusListIndex").toString()));
      }
      if (!jsonObj.get("standard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard").toString()));
      }
      // validate the required field `standard`
      StandardEnum.validateJsonElement(jsonObj.get("standard"));
      if ((jsonObj.get("statusActivationReason") != null && !jsonObj.get("statusActivationReason").isJsonNull()) && !jsonObj.get("statusActivationReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusActivationReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusActivationReason").toString()));
      }
      if ((jsonObj.get("statusActivatedAt") != null && !jsonObj.get("statusActivatedAt").isJsonNull()) && !jsonObj.get("statusActivatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusActivatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusActivatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowDataStatusListsDetailsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowDataStatusListsDetailsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowDataStatusListsDetailsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowDataStatusListsDetailsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowDataStatusListsDetailsInner>() {
           @Override
           public void write(JsonWriter out, FlowDataStatusListsDetailsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowDataStatusListsDetailsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlowDataStatusListsDetailsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlowDataStatusListsDetailsInner
   * @throws IOException if the JSON string is invalid with respect to FlowDataStatusListsDetailsInner
   */
  public static FlowDataStatusListsDetailsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowDataStatusListsDetailsInner.class);
  }

  /**
   * Convert an instance of FlowDataStatusListsDetailsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

