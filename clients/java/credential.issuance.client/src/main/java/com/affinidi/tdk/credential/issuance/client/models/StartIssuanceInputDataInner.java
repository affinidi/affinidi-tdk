/*
 * CredentialIssuanceService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.issuance.client.models;

import java.util.Objects;
import com.affinidi.tdk.credential.issuance.client.models.StartIssuanceInputDataInnerMetaData;
import com.affinidi.tdk.credential.issuance.client.models.StartIssuanceInputDataInnerStatusListDetailsInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.issuance.client.JSON;

/**
 * Data to be included in issued credential
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-20T07:40:48.329558310Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class StartIssuanceInputDataInner {
  public static final String SERIALIZED_NAME_CREDENTIAL_TYPE_ID = "credentialTypeId";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_TYPE_ID)
  private String credentialTypeId;

  public static final String SERIALIZED_NAME_CREDENTIAL_DATA = "credentialData";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_DATA)
  private Map<String, Object> credentialData = new HashMap<>();

  public static final String SERIALIZED_NAME_STATUS_LIST_DETAILS = "statusListDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_LIST_DETAILS)
  private List<StartIssuanceInputDataInnerStatusListDetailsInner> statusListDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_META_DATA = "metaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private StartIssuanceInputDataInnerMetaData metaData;

  public StartIssuanceInputDataInner() {
  }

  public StartIssuanceInputDataInner credentialTypeId(String credentialTypeId) {
    this.credentialTypeId = credentialTypeId;
    return this;
  }

  /**
   * It is a String that identifies a Credential that is being requested to be issued.
   * @return credentialTypeId
   */
  @javax.annotation.Nonnull
  public String getCredentialTypeId() {
    return credentialTypeId;
  }

  public void setCredentialTypeId(String credentialTypeId) {
    this.credentialTypeId = credentialTypeId;
  }


  public StartIssuanceInputDataInner credentialData(Map<String, Object> credentialData) {
    this.credentialData = credentialData;
    return this;
  }

  public StartIssuanceInputDataInner putCredentialDataItem(String key, Object credentialDataItem) {
    if (this.credentialData == null) {
      this.credentialData = new HashMap<>();
    }
    this.credentialData.put(key, credentialDataItem);
    return this;
  }

  /**
   * Object of data to be included in the issued credential ,should  match the credential type
   * @return credentialData
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getCredentialData() {
    return credentialData;
  }

  public void setCredentialData(Map<String, Object> credentialData) {
    this.credentialData = credentialData;
  }


  public StartIssuanceInputDataInner statusListDetails(List<StartIssuanceInputDataInnerStatusListDetailsInner> statusListDetails) {
    this.statusListDetails = statusListDetails;
    return this;
  }

  public StartIssuanceInputDataInner addStatusListDetailsItem(StartIssuanceInputDataInnerStatusListDetailsInner statusListDetailsItem) {
    if (this.statusListDetails == null) {
      this.statusListDetails = new ArrayList<>();
    }
    this.statusListDetails.add(statusListDetailsItem);
    return this;
  }

  /**
   * Types of status lists to which the credential should be added once issued. If not provided or empty, the credential is not added to any of the status lists.
   * @return statusListDetails
   */
  @javax.annotation.Nullable
  public List<StartIssuanceInputDataInnerStatusListDetailsInner> getStatusListDetails() {
    return statusListDetails;
  }

  public void setStatusListDetails(List<StartIssuanceInputDataInnerStatusListDetailsInner> statusListDetails) {
    this.statusListDetails = statusListDetails;
  }


  public StartIssuanceInputDataInner metaData(StartIssuanceInputDataInnerMetaData metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * Get metaData
   * @return metaData
   */
  @javax.annotation.Nullable
  public StartIssuanceInputDataInnerMetaData getMetaData() {
    return metaData;
  }

  public void setMetaData(StartIssuanceInputDataInnerMetaData metaData) {
    this.metaData = metaData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartIssuanceInputDataInner startIssuanceInputDataInner = (StartIssuanceInputDataInner) o;
    return Objects.equals(this.credentialTypeId, startIssuanceInputDataInner.credentialTypeId) &&
        Objects.equals(this.credentialData, startIssuanceInputDataInner.credentialData) &&
        Objects.equals(this.statusListDetails, startIssuanceInputDataInner.statusListDetails) &&
        Objects.equals(this.metaData, startIssuanceInputDataInner.metaData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credentialTypeId, credentialData, statusListDetails, metaData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartIssuanceInputDataInner {\n");
    sb.append("    credentialTypeId: ").append(toIndentedString(credentialTypeId)).append("\n");
    sb.append("    credentialData: ").append(toIndentedString(credentialData)).append("\n");
    sb.append("    statusListDetails: ").append(toIndentedString(statusListDetails)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credentialTypeId");
    openapiFields.add("credentialData");
    openapiFields.add("statusListDetails");
    openapiFields.add("metaData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("credentialTypeId");
    openapiRequiredFields.add("credentialData");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartIssuanceInputDataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartIssuanceInputDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartIssuanceInputDataInner is not found in the empty JSON string", StartIssuanceInputDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartIssuanceInputDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartIssuanceInputDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartIssuanceInputDataInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("credentialTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialTypeId").toString()));
      }
      if (jsonObj.get("statusListDetails") != null && !jsonObj.get("statusListDetails").isJsonNull()) {
        JsonArray jsonArraystatusListDetails = jsonObj.getAsJsonArray("statusListDetails");
        if (jsonArraystatusListDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusListDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusListDetails` to be an array in the JSON string but got `%s`", jsonObj.get("statusListDetails").toString()));
          }

          // validate the optional field `statusListDetails` (array)
          for (int i = 0; i < jsonArraystatusListDetails.size(); i++) {
            StartIssuanceInputDataInnerStatusListDetailsInner.validateJsonElement(jsonArraystatusListDetails.get(i));
          };
        }
      }
      // validate the optional field `metaData`
      if (jsonObj.get("metaData") != null && !jsonObj.get("metaData").isJsonNull()) {
        StartIssuanceInputDataInnerMetaData.validateJsonElement(jsonObj.get("metaData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartIssuanceInputDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartIssuanceInputDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartIssuanceInputDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartIssuanceInputDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<StartIssuanceInputDataInner>() {
           @Override
           public void write(JsonWriter out, StartIssuanceInputDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartIssuanceInputDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartIssuanceInputDataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartIssuanceInputDataInner
   * @throws IOException if the JSON string is invalid with respect to StartIssuanceInputDataInner
   */
  public static StartIssuanceInputDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartIssuanceInputDataInner.class);
  }

  /**
   * Convert an instance of StartIssuanceInputDataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

