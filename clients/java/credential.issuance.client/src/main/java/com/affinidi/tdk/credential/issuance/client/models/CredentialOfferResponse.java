/*
 * CredentialIssuanceService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.issuance.client.models;

import java.util.Objects;
import com.affinidi.tdk.credential.issuance.client.models.CredentialOfferResponseGrants;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.credential.issuance.client.JSON;

/**
 * CredentialOfferResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-08T23:15:12.132374761Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class CredentialOfferResponse {
  public static final String SERIALIZED_NAME_CREDENTIAL_ISSUER = "credential_issuer";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_ISSUER)
  private String credentialIssuer;

  public static final String SERIALIZED_NAME_CREDENTIAL_CONFIGURATION_IDS = "credential_configuration_ids";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_CONFIGURATION_IDS)
  private List<String> credentialConfigurationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_GRANTS = "grants";
  @SerializedName(SERIALIZED_NAME_GRANTS)
  private CredentialOfferResponseGrants grants;

  public CredentialOfferResponse() {
  }

  public CredentialOfferResponse credentialIssuer(String credentialIssuer) {
    this.credentialIssuer = credentialIssuer;
    return this;
  }

  /**
   * The URL of the Credential Issuer
   * @return credentialIssuer
   */
  @javax.annotation.Nonnull
  public String getCredentialIssuer() {
    return credentialIssuer;
  }

  public void setCredentialIssuer(String credentialIssuer) {
    this.credentialIssuer = credentialIssuer;
  }


  public CredentialOfferResponse credentialConfigurationIds(List<String> credentialConfigurationIds) {
    this.credentialConfigurationIds = credentialConfigurationIds;
    return this;
  }

  public CredentialOfferResponse addCredentialConfigurationIdsItem(String credentialConfigurationIdsItem) {
    if (this.credentialConfigurationIds == null) {
      this.credentialConfigurationIds = new ArrayList<>();
    }
    this.credentialConfigurationIds.add(credentialConfigurationIdsItem);
    return this;
  }

  /**
   * Array of unique strings that each identify one of the keys in the name/value pairs stored in the credentialSupported
   * @return credentialConfigurationIds
   */
  @javax.annotation.Nonnull
  public List<String> getCredentialConfigurationIds() {
    return credentialConfigurationIds;
  }

  public void setCredentialConfigurationIds(List<String> credentialConfigurationIds) {
    this.credentialConfigurationIds = credentialConfigurationIds;
  }


  public CredentialOfferResponse grants(CredentialOfferResponseGrants grants) {
    this.grants = grants;
    return this;
  }

  /**
   * Get grants
   * @return grants
   */
  @javax.annotation.Nonnull
  public CredentialOfferResponseGrants getGrants() {
    return grants;
  }

  public void setGrants(CredentialOfferResponseGrants grants) {
    this.grants = grants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredentialOfferResponse credentialOfferResponse = (CredentialOfferResponse) o;
    return Objects.equals(this.credentialIssuer, credentialOfferResponse.credentialIssuer) &&
        Objects.equals(this.credentialConfigurationIds, credentialOfferResponse.credentialConfigurationIds) &&
        Objects.equals(this.grants, credentialOfferResponse.grants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credentialIssuer, credentialConfigurationIds, grants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredentialOfferResponse {\n");
    sb.append("    credentialIssuer: ").append(toIndentedString(credentialIssuer)).append("\n");
    sb.append("    credentialConfigurationIds: ").append(toIndentedString(credentialConfigurationIds)).append("\n");
    sb.append("    grants: ").append(toIndentedString(grants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credential_issuer");
    openapiFields.add("credential_configuration_ids");
    openapiFields.add("grants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("credential_issuer");
    openapiRequiredFields.add("credential_configuration_ids");
    openapiRequiredFields.add("grants");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredentialOfferResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredentialOfferResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredentialOfferResponse is not found in the empty JSON string", CredentialOfferResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredentialOfferResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredentialOfferResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CredentialOfferResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("credential_issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credential_issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credential_issuer").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("credential_configuration_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("credential_configuration_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `credential_configuration_ids` to be an array in the JSON string but got `%s`", jsonObj.get("credential_configuration_ids").toString()));
      }
      // validate the required field `grants`
      CredentialOfferResponseGrants.validateJsonElement(jsonObj.get("grants"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredentialOfferResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredentialOfferResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredentialOfferResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredentialOfferResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CredentialOfferResponse>() {
           @Override
           public void write(JsonWriter out, CredentialOfferResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredentialOfferResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredentialOfferResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredentialOfferResponse
   * @throws IOException if the JSON string is invalid with respect to CredentialOfferResponse
   */
  public static CredentialOfferResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredentialOfferResponse.class);
  }

  /**
   * Convert an instance of CredentialOfferResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

