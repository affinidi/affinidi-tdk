/*
 * CredentialIssuanceService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.credential.issuance.client.apis;

import com.affinidi.tdk.credential.issuance.client.ApiException;
import com.affinidi.tdk.credential.issuance.client.models.ActionForbiddenError;
import com.affinidi.tdk.credential.issuance.client.models.CredentialResponse;
import com.affinidi.tdk.credential.issuance.client.models.InvalidJwtTokenError;
import com.affinidi.tdk.credential.issuance.client.models.InvalidParameterError;
import com.affinidi.tdk.credential.issuance.client.models.IssuanceStateResponse;
import com.affinidi.tdk.credential.issuance.client.models.ListIssuanceResponse;
import com.affinidi.tdk.credential.issuance.client.models.NotFoundError;
import com.affinidi.tdk.credential.issuance.client.models.StartIssuance400Response;
import com.affinidi.tdk.credential.issuance.client.models.StartIssuanceInput;
import com.affinidi.tdk.credential.issuance.client.models.StartIssuanceResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssuanceApi
 */
@Disabled
public class IssuanceApiTest {

    private final IssuanceApi api = new IssuanceApi();

    /**
     * Get issuance status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issuanceStateTest() throws ApiException {
        String issuanceId = null;
        String projectId = null;
        IssuanceStateResponse response = api.issuanceState(issuanceId, projectId);

        // TODO: test validations
    }
    /**
     * Endpoint to issue credentials directly without following OID4VCI flow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCredentialsTest() throws ApiException {
        String projectId = null;
        StartIssuanceInput startIssuanceInput = null;
        CredentialResponse response = api.issueCredentials(projectId, startIssuanceInput);

        // TODO: test validations
    }
    /**
     * List all issuances for Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIssuanceTest() throws ApiException {
        String projectId = null;
        ListIssuanceResponse response = api.listIssuance(projectId);

        // TODO: test validations
    }
    /**
     * Endpoint used b websites to start the issuance process
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startIssuanceTest() throws ApiException {
        String projectId = null;
        StartIssuanceInput startIssuanceInput = null;
        StartIssuanceResponse response = api.startIssuance(projectId, startIssuanceInput);

        // TODO: test validations
    }
}
