/*
 * Iam
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.iam.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.iam.client.JSON;

/**
 * PolicyStatementDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-23T23:18:15.958117326Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class PolicyStatementDto {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private List<String> action = new ArrayList<>();

  public static final String SERIALIZED_NAME_EFFECT = "effect";
  @SerializedName(SERIALIZED_NAME_EFFECT)
  private String effect;

  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private List<String> principal = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private List<String> resource = new ArrayList<>();

  public PolicyStatementDto() {
  }

  public PolicyStatementDto action(List<String> action) {
    this.action = action;
    return this;
  }

  public PolicyStatementDto addActionItem(String actionItem) {
    if (this.action == null) {
      this.action = new ArrayList<>();
    }
    this.action.add(actionItem);
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public List<String> getAction() {
    return action;
  }

  public void setAction(List<String> action) {
    this.action = action;
  }


  public PolicyStatementDto effect(String effect) {
    this.effect = effect;
    return this;
  }

  /**
   * Get effect
   * @return effect
   */
  @javax.annotation.Nonnull
  public String getEffect() {
    return effect;
  }

  public void setEffect(String effect) {
    this.effect = effect;
  }


  public PolicyStatementDto principal(List<String> principal) {
    this.principal = principal;
    return this;
  }

  public PolicyStatementDto addPrincipalItem(String principalItem) {
    if (this.principal == null) {
      this.principal = new ArrayList<>();
    }
    this.principal.add(principalItem);
    return this;
  }

  /**
   * Get principal
   * @return principal
   */
  @javax.annotation.Nonnull
  public List<String> getPrincipal() {
    return principal;
  }

  public void setPrincipal(List<String> principal) {
    this.principal = principal;
  }


  public PolicyStatementDto resource(List<String> resource) {
    this.resource = resource;
    return this;
  }

  public PolicyStatementDto addResourceItem(String resourceItem) {
    if (this.resource == null) {
      this.resource = new ArrayList<>();
    }
    this.resource.add(resourceItem);
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nonnull
  public List<String> getResource() {
    return resource;
  }

  public void setResource(List<String> resource) {
    this.resource = resource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyStatementDto policyStatementDto = (PolicyStatementDto) o;
    return Objects.equals(this.action, policyStatementDto.action) &&
        Objects.equals(this.effect, policyStatementDto.effect) &&
        Objects.equals(this.principal, policyStatementDto.principal) &&
        Objects.equals(this.resource, policyStatementDto.resource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, effect, principal, resource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyStatementDto {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("effect");
    openapiFields.add("principal");
    openapiFields.add("resource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("effect");
    openapiRequiredFields.add("principal");
    openapiRequiredFields.add("resource");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyStatementDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyStatementDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyStatementDto is not found in the empty JSON string", PolicyStatementDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyStatementDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyStatementDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PolicyStatementDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("action") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("action").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be an array in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (!jsonObj.get("effect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effect").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("principal") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("principal").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `principal` to be an array in the JSON string but got `%s`", jsonObj.get("principal").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("resource") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("resource").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be an array in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyStatementDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyStatementDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyStatementDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyStatementDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyStatementDto>() {
           @Override
           public void write(JsonWriter out, PolicyStatementDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyStatementDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyStatementDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyStatementDto
   * @throws IOException if the JSON string is invalid with respect to PolicyStatementDto
   */
  public static PolicyStatementDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyStatementDto.class);
  }

  /**
   * Convert an instance of PolicyStatementDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

