/*
 * VaultFileSystem
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.vault.data.manager.client.models;

import java.util.Objects;
import com.affinidi.tdk.vault.data.manager.client.models.EdekInfo;
import com.affinidi.tdk.vault.data.manager.client.models.NodeType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.vault.data.manager.client.JSON;

/**
 * CreateNodeInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-09T10:45:59.439678906Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class CreateNodeInput {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private NodeType type;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PARENT_NODE_ID = "parentNodeId";
  @SerializedName(SERIALIZED_NAME_PARENT_NODE_ID)
  private String parentNodeId;

  public static final String SERIALIZED_NAME_EDEK_INFO = "edekInfo";
  @SerializedName(SERIALIZED_NAME_EDEK_INFO)
  private EdekInfo edekInfo;

  public static final String SERIALIZED_NAME_DEK = "dek";
  @SerializedName(SERIALIZED_NAME_DEK)
  private String dek;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public CreateNodeInput() {
  }

  public CreateNodeInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the item
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateNodeInput type(NodeType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public NodeType getType() {
    return type;
  }

  public void setType(NodeType type) {
    this.type = type;
  }


  public CreateNodeInput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * description of profile if creating a new profile
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateNodeInput parentNodeId(String parentNodeId) {
    this.parentNodeId = parentNodeId;
    return this;
  }

  /**
   * parent node id, if not provided then root element is used
   * @return parentNodeId
   */
  @javax.annotation.Nullable
  public String getParentNodeId() {
    return parentNodeId;
  }

  public void setParentNodeId(String parentNodeId) {
    this.parentNodeId = parentNodeId;
  }


  public CreateNodeInput edekInfo(EdekInfo edekInfo) {
    this.edekInfo = edekInfo;
    return this;
  }

  /**
   * Get edekInfo
   * @return edekInfo
   */
  @javax.annotation.Nullable
  public EdekInfo getEdekInfo() {
    return edekInfo;
  }

  public void setEdekInfo(EdekInfo edekInfo) {
    this.edekInfo = edekInfo;
  }


  public CreateNodeInput dek(String dek) {
    this.dek = dek;
    return this;
  }

  /**
   * A base64 encoded data encryption key, encrypted using VFS public key, required for node types [FILE, PROFILE]
   * @return dek
   */
  @javax.annotation.Nullable
  public String getDek() {
    return dek;
  }

  public void setDek(String dek) {
    this.dek = dek;
  }


  public CreateNodeInput metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * metadata of the node in stringified json format
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNodeInput createNodeInput = (CreateNodeInput) o;
    return Objects.equals(this.name, createNodeInput.name) &&
        Objects.equals(this.type, createNodeInput.type) &&
        Objects.equals(this.description, createNodeInput.description) &&
        Objects.equals(this.parentNodeId, createNodeInput.parentNodeId) &&
        Objects.equals(this.edekInfo, createNodeInput.edekInfo) &&
        Objects.equals(this.dek, createNodeInput.dek) &&
        Objects.equals(this.metadata, createNodeInput.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, description, parentNodeId, edekInfo, dek, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNodeInput {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parentNodeId: ").append(toIndentedString(parentNodeId)).append("\n");
    sb.append("    edekInfo: ").append(toIndentedString(edekInfo)).append("\n");
    sb.append("    dek: ").append(toIndentedString(dek)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("description");
    openapiFields.add("parentNodeId");
    openapiFields.add("edekInfo");
    openapiFields.add("dek");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNodeInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNodeInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNodeInput is not found in the empty JSON string", CreateNodeInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNodeInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNodeInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateNodeInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `type`
      NodeType.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("parentNodeId") != null && !jsonObj.get("parentNodeId").isJsonNull()) && !jsonObj.get("parentNodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentNodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentNodeId").toString()));
      }
      // validate the optional field `edekInfo`
      if (jsonObj.get("edekInfo") != null && !jsonObj.get("edekInfo").isJsonNull()) {
        EdekInfo.validateJsonElement(jsonObj.get("edekInfo"));
      }
      if ((jsonObj.get("dek") != null && !jsonObj.get("dek").isJsonNull()) && !jsonObj.get("dek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dek").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNodeInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNodeInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNodeInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNodeInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNodeInput>() {
           @Override
           public void write(JsonWriter out, CreateNodeInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNodeInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNodeInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNodeInput
   * @throws IOException if the JSON string is invalid with respect to CreateNodeInput
   */
  public static CreateNodeInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNodeInput.class);
  }

  /**
   * Convert an instance of CreateNodeInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

