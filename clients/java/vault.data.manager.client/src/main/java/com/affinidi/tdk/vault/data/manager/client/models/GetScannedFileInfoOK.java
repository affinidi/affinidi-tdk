/*
 * VaultFileSystem
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.vault.data.manager.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.vault.data.manager.client.JSON;

/**
 * GetScannedFileInfoOK
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-10T09:27:04.293900344Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class GetScannedFileInfoOK {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profileId";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_EXCLUSIVE_START_KEY = "exclusiveStartKey";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_START_KEY)
  private String exclusiveStartKey;

  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GetScannedFileInfoOK() {
  }

  public GetScannedFileInfoOK data(Object data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }


  public GetScannedFileInfoOK jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * A unique, randomly generated idetifier
   * @return jobId
   */
  @javax.annotation.Nonnull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public GetScannedFileInfoOK status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the file scanning once initiated
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public GetScannedFileInfoOK profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * A unique, randomly generated identifier
   * @return profileId
   */
  @javax.annotation.Nonnull
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public GetScannedFileInfoOK exclusiveStartKey(String exclusiveStartKey) {
    this.exclusiveStartKey = exclusiveStartKey;
    return this;
  }

  /**
   * The base64url encoded key of the first item that this operation will evaluate (it is not returned). Use the value that was returned in the previous operation.
   * @return exclusiveStartKey
   */
  @javax.annotation.Nullable
  public String getExclusiveStartKey() {
    return exclusiveStartKey;
  }

  public void setExclusiveStartKey(String exclusiveStartKey) {
    this.exclusiveStartKey = exclusiveStartKey;
  }


  public GetScannedFileInfoOK nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * A unique, randomly generated identifier
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public GetScannedFileInfoOK createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public GetScannedFileInfoOK name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetScannedFileInfoOK getScannedFileInfoOK = (GetScannedFileInfoOK) o;
    return Objects.equals(this.data, getScannedFileInfoOK.data) &&
        Objects.equals(this.jobId, getScannedFileInfoOK.jobId) &&
        Objects.equals(this.status, getScannedFileInfoOK.status) &&
        Objects.equals(this.profileId, getScannedFileInfoOK.profileId) &&
        Objects.equals(this.exclusiveStartKey, getScannedFileInfoOK.exclusiveStartKey) &&
        Objects.equals(this.nodeId, getScannedFileInfoOK.nodeId) &&
        Objects.equals(this.createdAt, getScannedFileInfoOK.createdAt) &&
        Objects.equals(this.name, getScannedFileInfoOK.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, jobId, status, profileId, exclusiveStartKey, nodeId, createdAt, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetScannedFileInfoOK {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    exclusiveStartKey: ").append(toIndentedString(exclusiveStartKey)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("jobId");
    openapiFields.add("status");
    openapiFields.add("profileId");
    openapiFields.add("exclusiveStartKey");
    openapiFields.add("nodeId");
    openapiFields.add("createdAt");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("jobId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("profileId");
    openapiRequiredFields.add("nodeId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetScannedFileInfoOK
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetScannedFileInfoOK.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetScannedFileInfoOK is not found in the empty JSON string", GetScannedFileInfoOK.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetScannedFileInfoOK.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetScannedFileInfoOK` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetScannedFileInfoOK.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("profileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileId").toString()));
      }
      if ((jsonObj.get("exclusiveStartKey") != null && !jsonObj.get("exclusiveStartKey").isJsonNull()) && !jsonObj.get("exclusiveStartKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusiveStartKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclusiveStartKey").toString()));
      }
      if (!jsonObj.get("nodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeId").toString()));
      }
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetScannedFileInfoOK.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetScannedFileInfoOK' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetScannedFileInfoOK> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetScannedFileInfoOK.class));

       return (TypeAdapter<T>) new TypeAdapter<GetScannedFileInfoOK>() {
           @Override
           public void write(JsonWriter out, GetScannedFileInfoOK value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetScannedFileInfoOK read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetScannedFileInfoOK given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetScannedFileInfoOK
   * @throws IOException if the JSON string is invalid with respect to GetScannedFileInfoOK
   */
  public static GetScannedFileInfoOK fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetScannedFileInfoOK.class);
  }

  /**
   * Convert an instance of GetScannedFileInfoOK to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

