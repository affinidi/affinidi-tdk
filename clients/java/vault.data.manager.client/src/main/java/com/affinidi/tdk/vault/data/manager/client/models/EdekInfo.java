/*
 * VaultFileSystem
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.affinidi.tdk.vault.data.manager.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * A base64 encoded data encryption key, encrypted with consumer DEKEK, required for node types [FILE, PROFILE]
 */
@JsonPropertyOrder({ EdekInfo.JSON_PROPERTY_EDEK, EdekInfo.JSON_PROPERTY_DEKEK_ID })
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class EdekInfo {
    public static final String JSON_PROPERTY_EDEK = "edek";
    private String edek;

    public static final String JSON_PROPERTY_DEKEK_ID = "dekekId";
    private String dekekId;

    public EdekInfo() {
    }

    public EdekInfo edek(String edek) {

        this.edek = edek;
        return this;
    }

    /**
     * Get edek
     *
     * @return edek
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EDEK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getEdek() {
        return edek;
    }

    @JsonProperty(JSON_PROPERTY_EDEK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEdek(String edek) {
        this.edek = edek;
    }

    public EdekInfo dekekId(String dekekId) {

        this.dekekId = dekekId;
        return this;
    }

    /**
     * Get dekekId
     *
     * @return dekekId
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DEKEK_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getDekekId() {
        return dekekId;
    }

    @JsonProperty(JSON_PROPERTY_DEKEK_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDekekId(String dekekId) {
        this.dekekId = dekekId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EdekInfo edekInfo = (EdekInfo) o;
        return Objects.equals(this.edek, edekInfo.edek) && Objects.equals(this.dekekId, edekInfo.dekekId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(edek, dekekId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EdekInfo {\n");
        sb.append("    edek: ").append(toIndentedString(edek)).append("\n");
        sb.append("    dekekId: ").append(toIndentedString(dekekId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix
     *            prefix of the query string
     *
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `edek` to the URL query string
        if (getEdek() != null) {
            try {
                joiner.add(String.format("%sedek%s=%s", prefix, suffix,
                        URLEncoder.encode(String.valueOf(getEdek()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        // add `dekekId` to the URL query string
        if (getDekekId() != null) {
            try {
                joiner.add(String.format("%sdekekId%s=%s", prefix, suffix,
                        URLEncoder.encode(String.valueOf(getDekekId()), "UTF-8").replaceAll("\\+", "%20")));
            } catch (UnsupportedEncodingException e) {
                // Should never happen, UTF-8 is always supported
                throw new RuntimeException(e);
            }
        }

        return joiner.toString();
    }

}
