/*
 * VaultFileSystem
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.vault.data.manager.client.models;

import java.util.Objects;
import com.affinidi.tdk.vault.data.manager.client.models.EdekInfo;
import com.affinidi.tdk.vault.data.manager.client.models.NodeStatus;
import com.affinidi.tdk.vault.data.manager.client.models.NodeType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.affinidi.tdk.vault.data.manager.client.JSON;

/**
 * NodeDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-12T23:20:40.541620301Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class NodeDto {
  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private NodeStatus status;

  public static final String SERIALIZED_NAME_FILE_COUNT = "fileCount";
  @SerializedName(SERIALIZED_NAME_FILE_COUNT)
  private BigDecimal fileCount;

  public static final String SERIALIZED_NAME_PROFILE_COUNT = "profileCount";
  @SerializedName(SERIALIZED_NAME_PROFILE_COUNT)
  private BigDecimal profileCount;

  public static final String SERIALIZED_NAME_FOLDER_COUNT = "folderCount";
  @SerializedName(SERIALIZED_NAME_FOLDER_COUNT)
  private BigDecimal folderCount;

  public static final String SERIALIZED_NAME_VC_COUNT = "vcCount";
  @SerializedName(SERIALIZED_NAME_VC_COUNT)
  private BigDecimal vcCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CONSUMER_ID = "consumerId";
  @SerializedName(SERIALIZED_NAME_CONSUMER_ID)
  private String consumerId;

  public static final String SERIALIZED_NAME_PARENT_NODE_ID = "parentNodeId";
  @SerializedName(SERIALIZED_NAME_PARENT_NODE_ID)
  private String parentNodeId;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profileId";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private String modifiedAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private String modifiedBy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private NodeType type;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_CONSUMED_FILE_STORAGE = "consumedFileStorage";
  @SerializedName(SERIALIZED_NAME_CONSUMED_FILE_STORAGE)
  private BigDecimal consumedFileStorage;

  public static final String SERIALIZED_NAME_EDEK_INFO = "edekInfo";
  @SerializedName(SERIALIZED_NAME_EDEK_INFO)
  private EdekInfo edekInfo;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public NodeDto() {
  }

  public NodeDto nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * A unique identifier of current node
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public NodeDto status(NodeStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public NodeStatus getStatus() {
    return status;
  }

  public void setStatus(NodeStatus status) {
    this.status = status;
  }


  public NodeDto fileCount(BigDecimal fileCount) {
    this.fileCount = fileCount;
    return this;
  }

  /**
   * number of files in current node
   * @return fileCount
   */
  @javax.annotation.Nullable
  public BigDecimal getFileCount() {
    return fileCount;
  }

  public void setFileCount(BigDecimal fileCount) {
    this.fileCount = fileCount;
  }


  public NodeDto profileCount(BigDecimal profileCount) {
    this.profileCount = profileCount;
    return this;
  }

  /**
   * number of profiles in current node
   * @return profileCount
   */
  @javax.annotation.Nullable
  public BigDecimal getProfileCount() {
    return profileCount;
  }

  public void setProfileCount(BigDecimal profileCount) {
    this.profileCount = profileCount;
  }


  public NodeDto folderCount(BigDecimal folderCount) {
    this.folderCount = folderCount;
    return this;
  }

  /**
   * number of folders in current node
   * @return folderCount
   */
  @javax.annotation.Nullable
  public BigDecimal getFolderCount() {
    return folderCount;
  }

  public void setFolderCount(BigDecimal folderCount) {
    this.folderCount = folderCount;
  }


  public NodeDto vcCount(BigDecimal vcCount) {
    this.vcCount = vcCount;
    return this;
  }

  /**
   * number of vcCount in current node
   * @return vcCount
   */
  @javax.annotation.Nullable
  public BigDecimal getVcCount() {
    return vcCount;
  }

  public void setVcCount(BigDecimal vcCount) {
    this.vcCount = vcCount;
  }


  public NodeDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * display name of current node
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NodeDto consumerId(String consumerId) {
    this.consumerId = consumerId;
    return this;
  }

  /**
   * unique identifier for consumer
   * @return consumerId
   */
  @javax.annotation.Nonnull
  public String getConsumerId() {
    return consumerId;
  }

  public void setConsumerId(String consumerId) {
    this.consumerId = consumerId;
  }


  public NodeDto parentNodeId(String parentNodeId) {
    this.parentNodeId = parentNodeId;
    return this;
  }

  /**
   * parent node path
   * @return parentNodeId
   */
  @javax.annotation.Nonnull
  public String getParentNodeId() {
    return parentNodeId;
  }

  public void setParentNodeId(String parentNodeId) {
    this.parentNodeId = parentNodeId;
  }


  public NodeDto profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * A unique identifier of profile, under which current node is created
   * @return profileId
   */
  @javax.annotation.Nonnull
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public NodeDto createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * creation date/time of the node
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public NodeDto modifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * modification date/time of the node
   * @return modifiedAt
   */
  @javax.annotation.Nonnull
  public String getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public NodeDto createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Identifier of the user who created the node
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public NodeDto modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

  /**
   * Identifier of the user who last updated the node
   * @return modifiedBy
   */
  @javax.annotation.Nonnull
  public String getModifiedBy() {
    return modifiedBy;
  }

  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public NodeDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the node
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NodeDto type(NodeType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public NodeType getType() {
    return type;
  }

  public void setType(NodeType type) {
    this.type = type;
  }


  public NodeDto link(String link) {
    this.link = link;
    return this;
  }

  /**
   * id of the file, used for FILE node only
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public NodeDto schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * name of the schema, used for PROFILE node only
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public NodeDto consumedFileStorage(BigDecimal consumedFileStorage) {
    this.consumedFileStorage = consumedFileStorage;
    return this;
  }

  /**
   * amount of bytes used by the stored data, used for ROOT_ELEMENT only for now
   * @return consumedFileStorage
   */
  @javax.annotation.Nullable
  public BigDecimal getConsumedFileStorage() {
    return consumedFileStorage;
  }

  public void setConsumedFileStorage(BigDecimal consumedFileStorage) {
    this.consumedFileStorage = consumedFileStorage;
  }


  public NodeDto edekInfo(EdekInfo edekInfo) {
    this.edekInfo = edekInfo;
    return this;
  }

  /**
   * Get edekInfo
   * @return edekInfo
   */
  @javax.annotation.Nullable
  public EdekInfo getEdekInfo() {
    return edekInfo;
  }

  public void setEdekInfo(EdekInfo edekInfo) {
    this.edekInfo = edekInfo;
  }


  public NodeDto metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * A JSON string format containing metadata of the node
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeDto nodeDto = (NodeDto) o;
    return Objects.equals(this.nodeId, nodeDto.nodeId) &&
        Objects.equals(this.status, nodeDto.status) &&
        Objects.equals(this.fileCount, nodeDto.fileCount) &&
        Objects.equals(this.profileCount, nodeDto.profileCount) &&
        Objects.equals(this.folderCount, nodeDto.folderCount) &&
        Objects.equals(this.vcCount, nodeDto.vcCount) &&
        Objects.equals(this.name, nodeDto.name) &&
        Objects.equals(this.consumerId, nodeDto.consumerId) &&
        Objects.equals(this.parentNodeId, nodeDto.parentNodeId) &&
        Objects.equals(this.profileId, nodeDto.profileId) &&
        Objects.equals(this.createdAt, nodeDto.createdAt) &&
        Objects.equals(this.modifiedAt, nodeDto.modifiedAt) &&
        Objects.equals(this.createdBy, nodeDto.createdBy) &&
        Objects.equals(this.modifiedBy, nodeDto.modifiedBy) &&
        Objects.equals(this.description, nodeDto.description) &&
        Objects.equals(this.type, nodeDto.type) &&
        Objects.equals(this.link, nodeDto.link) &&
        Objects.equals(this.schema, nodeDto.schema) &&
        Objects.equals(this.consumedFileStorage, nodeDto.consumedFileStorage) &&
        Objects.equals(this.edekInfo, nodeDto.edekInfo) &&
        Objects.equals(this.metadata, nodeDto.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeId, status, fileCount, profileCount, folderCount, vcCount, name, consumerId, parentNodeId, profileId, createdAt, modifiedAt, createdBy, modifiedBy, description, type, link, schema, consumedFileStorage, edekInfo, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeDto {\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    fileCount: ").append(toIndentedString(fileCount)).append("\n");
    sb.append("    profileCount: ").append(toIndentedString(profileCount)).append("\n");
    sb.append("    folderCount: ").append(toIndentedString(folderCount)).append("\n");
    sb.append("    vcCount: ").append(toIndentedString(vcCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    consumerId: ").append(toIndentedString(consumerId)).append("\n");
    sb.append("    parentNodeId: ").append(toIndentedString(parentNodeId)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    consumedFileStorage: ").append(toIndentedString(consumedFileStorage)).append("\n");
    sb.append("    edekInfo: ").append(toIndentedString(edekInfo)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nodeId");
    openapiFields.add("status");
    openapiFields.add("fileCount");
    openapiFields.add("profileCount");
    openapiFields.add("folderCount");
    openapiFields.add("vcCount");
    openapiFields.add("name");
    openapiFields.add("consumerId");
    openapiFields.add("parentNodeId");
    openapiFields.add("profileId");
    openapiFields.add("createdAt");
    openapiFields.add("modifiedAt");
    openapiFields.add("createdBy");
    openapiFields.add("modifiedBy");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("link");
    openapiFields.add("schema");
    openapiFields.add("consumedFileStorage");
    openapiFields.add("edekInfo");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nodeId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("consumerId");
    openapiRequiredFields.add("parentNodeId");
    openapiRequiredFields.add("profileId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("modifiedAt");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("modifiedBy");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeDto is not found in the empty JSON string", NodeDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("nodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeId").toString()));
      }
      // validate the required field `status`
      NodeStatus.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("consumerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerId").toString()));
      }
      if (!jsonObj.get("parentNodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentNodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentNodeId").toString()));
      }
      if (!jsonObj.get("profileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileId").toString()));
      }
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if (!jsonObj.get("modifiedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedAt").toString()));
      }
      if (!jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if (!jsonObj.get("modifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedBy").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `type`
      NodeType.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      // validate the optional field `edekInfo`
      if (jsonObj.get("edekInfo") != null && !jsonObj.get("edekInfo").isJsonNull()) {
        EdekInfo.validateJsonElement(jsonObj.get("edekInfo"));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeDto.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeDto>() {
           @Override
           public void write(JsonWriter out, NodeDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeDto
   * @throws IOException if the JSON string is invalid with respect to NodeDto
   */
  public static NodeDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeDto.class);
  }

  /**
   * Convert an instance of NodeDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

