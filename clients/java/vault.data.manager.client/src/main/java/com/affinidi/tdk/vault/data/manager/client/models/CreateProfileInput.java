/*
 * VaultFileSystem
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.vault.data.manager.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.affinidi.tdk.vault.data.manager.client.models.EdekInfo;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CreateProfileInput
 */
@JsonPropertyOrder({
  CreateProfileInput.JSON_PROPERTY_NAME,
  CreateProfileInput.JSON_PROPERTY_DESCRIPTION,
  CreateProfileInput.JSON_PROPERTY_EDEK_INFO,
  CreateProfileInput.JSON_PROPERTY_DEK,
  CreateProfileInput.JSON_PROPERTY_METADATA,
  CreateProfileInput.JSON_PROPERTY_SUBJECT_DID,
  CreateProfileInput.JSON_PROPERTY_RIGHTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class CreateProfileInput {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_EDEK_INFO = "edekInfo";
  private EdekInfo edekInfo;

  public static final String JSON_PROPERTY_DEK = "dek";
  private String dek;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private String metadata;

  public static final String JSON_PROPERTY_SUBJECT_DID = "subjectDid";
  private String subjectDid;

  /**
   * Gets or Sets rights
   */
  public enum RightsEnum {
    READ("READ"),
    
    WRITE("WRITE");

    private String value;

    RightsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RightsEnum fromValue(String value) {
      for (RightsEnum b : RightsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RIGHTS = "rights";
  private List<RightsEnum> rights = new ArrayList<>();

  public CreateProfileInput() {
  }

  public CreateProfileInput name(String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Name of the item
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }

  public CreateProfileInput description(String description) {
    
    this.description = description;
    return this;
  }

  /**
   * description of profile
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }

  public CreateProfileInput edekInfo(EdekInfo edekInfo) {
    
    this.edekInfo = edekInfo;
    return this;
  }

  /**
   * Get edekInfo
   * @return edekInfo
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EDEK_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EdekInfo getEdekInfo() {
    return edekInfo;
  }


  @JsonProperty(JSON_PROPERTY_EDEK_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEdekInfo(EdekInfo edekInfo) {
    this.edekInfo = edekInfo;
  }

  public CreateProfileInput dek(String dek) {
    
    this.dek = dek;
    return this;
  }

  /**
   * A base64 encoded data encryption key, encrypted using VFS public key, required for node types [FILE, PROFILE]
   * @return dek
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDek() {
    return dek;
  }


  @JsonProperty(JSON_PROPERTY_DEK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDek(String dek) {
    this.dek = dek;
  }

  public CreateProfileInput metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

  /**
   * metadata of the node in stringified json format
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }

  public CreateProfileInput subjectDid(String subjectDid) {
    
    this.subjectDid = subjectDid;
    return this;
  }

  /**
   * DID to grant access to Profile
   * @return subjectDid
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT_DID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubjectDid() {
    return subjectDid;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT_DID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubjectDid(String subjectDid) {
    this.subjectDid = subjectDid;
  }

  public CreateProfileInput rights(List<RightsEnum> rights) {
    
    this.rights = rights;
    return this;
  }

  public CreateProfileInput addRightsItem(RightsEnum rightsItem) {
    if (this.rights == null) {
      this.rights = new ArrayList<>();
    }
    this.rights.add(rightsItem);
    return this;
  }

  /**
   * types of access to grant
   * @return rights
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RIGHTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RightsEnum> getRights() {
    return rights;
  }


  @JsonProperty(JSON_PROPERTY_RIGHTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRights(List<RightsEnum> rights) {
    this.rights = rights;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProfileInput createProfileInput = (CreateProfileInput) o;
    return Objects.equals(this.name, createProfileInput.name) &&
        Objects.equals(this.description, createProfileInput.description) &&
        Objects.equals(this.edekInfo, createProfileInput.edekInfo) &&
        Objects.equals(this.dek, createProfileInput.dek) &&
        Objects.equals(this.metadata, createProfileInput.metadata) &&
        Objects.equals(this.subjectDid, createProfileInput.subjectDid) &&
        Objects.equals(this.rights, createProfileInput.rights);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, edekInfo, dek, metadata, subjectDid, rights);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProfileInput {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    edekInfo: ").append(toIndentedString(edekInfo)).append("\n");
    sb.append("    dek: ").append(toIndentedString(dek)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    subjectDid: ").append(toIndentedString(subjectDid)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `edekInfo` to the URL query string
    if (getEdekInfo() != null) {
      joiner.add(getEdekInfo().toUrlQueryString(prefix + "edekInfo" + suffix));
    }

    // add `dek` to the URL query string
    if (getDek() != null) {
      try {
        joiner.add(String.format("%sdek%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDek()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      try {
        joiner.add(String.format("%smetadata%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMetadata()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subjectDid` to the URL query string
    if (getSubjectDid() != null) {
      try {
        joiner.add(String.format("%ssubjectDid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubjectDid()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `rights` to the URL query string
    if (getRights() != null) {
      for (int i = 0; i < getRights().size(); i++) {
        try {
          joiner.add(String.format("%srights%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getRights().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

