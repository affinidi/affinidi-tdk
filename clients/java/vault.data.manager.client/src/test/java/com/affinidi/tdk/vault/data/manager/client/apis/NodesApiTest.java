/*
 * VaultFileSystem
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.affinidi.tdk.vault.data.manager.client.apis;

import com.affinidi.tdk.vault.data.manager.client.ApiException;
import com.affinidi.tdk.vault.data.manager.client.models.CreateNodeInput;
import com.affinidi.tdk.vault.data.manager.client.models.CreateNodeOK;
import com.affinidi.tdk.vault.data.manager.client.models.CreateProfileInput;
import com.affinidi.tdk.vault.data.manager.client.models.DeleteNodeDto;
import com.affinidi.tdk.vault.data.manager.client.models.GetDetailedNodeInfoOK;
import com.affinidi.tdk.vault.data.manager.client.models.GrantAccessInput;
import com.affinidi.tdk.vault.data.manager.client.models.InitNodesOK;
import com.affinidi.tdk.vault.data.manager.client.models.InvalidParameterError;
import com.affinidi.tdk.vault.data.manager.client.models.ListNodeChildrenOK;
import com.affinidi.tdk.vault.data.manager.client.models.ListRootNodeChildrenOK;
import com.affinidi.tdk.vault.data.manager.client.models.MoveNodeDto;
import com.affinidi.tdk.vault.data.manager.client.models.MoveNodeInput;
import com.affinidi.tdk.vault.data.manager.client.models.NodeDto;
import com.affinidi.tdk.vault.data.manager.client.models.RestoreNodeFromTrashbin;
import com.affinidi.tdk.vault.data.manager.client.models.UpdateNodeInput;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NodesApi
 */
@Disabled
public class NodesApiTest {

    private final NodesApi api = new NodesApi();

    /**
     * creates node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeTest() throws ApiException {
        CreateNodeInput createNodeInput = null;
        String ownerDid = null;
        CreateNodeOK response = api.createNode(createNodeInput, ownerDid);

        // TODO: test validations
    }
    /**
     * creates Profile with control plane
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProfileTest() throws ApiException {
        CreateProfileInput createProfileInput = null;
        CreateNodeOK response = api.createProfile(createProfileInput);

        // TODO: test validations
    }
    /**
     * Mark a node and any attached files for deletion. If the node is a folder, perform the same action for all its children if the profile type is PROFILE, VC_ROOT, or VC. For other node types, move them to the TRASH_BIN node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeTest() throws ApiException {
        String nodeId = null;
        DeleteNodeDto response = api.deleteNode(nodeId);

        // TODO: test validations
    }
    /**
     * Gets detailed information about the node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDetailedNodeInfoTest() throws ApiException {
        String nodeId = null;
        String dek = null;
        String ownerDid = null;
        GetDetailedNodeInfoOK response = api.getDetailedNodeInfo(nodeId, dek, ownerDid);

        // TODO: test validations
    }
    /**
     * grants access to another consumer to access nodes hierarchy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void grantAccessTest() throws ApiException {
        GrantAccessInput grantAccessInput = null;
        api.grantAccess(grantAccessInput);

        // TODO: test validations
    }
    /**
     * Initialize root node, and TRASH_BIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initNodesTest() throws ApiException {
        InitNodesOK response = api.initNodes();

        // TODO: test validations
    }
    /**
     * lists children of the node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNodeChildrenTest() throws ApiException {
        String nodeId = null;
        Integer limit = null;
        String exclusiveStartKey = null;
        String ownerDid = null;
        ListNodeChildrenOK response = api.listNodeChildren(nodeId, limit, exclusiveStartKey, ownerDid);

        // TODO: test validations
    }
    /**
     * lists children of the root node for the consumer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRootNodeChildrenTest() throws ApiException {
        String ownerDid = null;
        ListRootNodeChildrenOK response = api.listRootNodeChildren(ownerDid);

        // TODO: test validations
    }
    /**
     * Moves a node from source to destination along with the hierarchy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveNodeTest() throws ApiException {
        String nodeId = null;
        MoveNodeInput moveNodeInput = null;
        MoveNodeDto response = api.moveNode(nodeId, moveNodeInput);

        // TODO: test validations
    }
    /**
     * Permanently delete a node from TRASH_BIN, if the node is not in the TRASH_BIN it cannot delete.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void permanentlyDeleteNodeTest() throws ApiException {
        String nodeId = null;
        String nodeIdToRemove = null;
        api.permanentlyDeleteNode(nodeId, nodeIdToRemove);

        // TODO: test validations
    }
    /**
     * Restore node marked for deletion from TRASH_BIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreNodeFromTrashbinTest() throws ApiException {
        String nodeId = null;
        String nodeIdToRestore = null;
        RestoreNodeFromTrashbin restoreNodeFromTrashbin = null;
        MoveNodeDto response = api.restoreNodeFromTrashbin(nodeId, nodeIdToRestore, restoreNodeFromTrashbin);

        // TODO: test validations
    }
    /**
     * Updates a node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeTest() throws ApiException {
        String nodeId = null;
        UpdateNodeInput updateNodeInput = null;
        NodeDto response = api.updateNode(nodeId, updateNodeInput);

        // TODO: test validations
    }
}
