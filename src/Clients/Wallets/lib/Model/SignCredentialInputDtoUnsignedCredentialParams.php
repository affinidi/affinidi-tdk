<?php
/**
 * SignCredentialInputDtoUnsignedCredentialParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\Wallets
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CloudWalletEssentials
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\Wallets\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\Wallets\ObjectSerializer;

/**
 * SignCredentialInputDtoUnsignedCredentialParams Class Doc Comment
 *
 * @category Class
 * @description unsignedCredentialParams. Used to build an unsigned credential before the signing. This param is not accepted when \&quot;unsignedCredential\&quot; is given
 * @package  AffinidiTdk\Clients\Wallets
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SignCredentialInputDtoUnsignedCredentialParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SignCredentialInputDto_unsignedCredentialParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'json_ld_context_url' => 'string',
        'json_schema_url' => 'string',
        'type_name' => 'string',
        'credential_subject' => 'array<string,mixed>',
        'holder_did' => 'string',
        'expires_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'json_ld_context_url' => null,
        'json_schema_url' => null,
        'type_name' => null,
        'credential_subject' => null,
        'holder_did' => null,
        'expires_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'json_ld_context_url' => false,
        'json_schema_url' => false,
        'type_name' => false,
        'credential_subject' => false,
        'holder_did' => false,
        'expires_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'json_ld_context_url' => 'jsonLdContextUrl',
        'json_schema_url' => 'jsonSchemaUrl',
        'type_name' => 'typeName',
        'credential_subject' => 'credentialSubject',
        'holder_did' => 'holderDid',
        'expires_at' => 'expiresAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'json_ld_context_url' => 'setJsonLdContextUrl',
        'json_schema_url' => 'setJsonSchemaUrl',
        'type_name' => 'setTypeName',
        'credential_subject' => 'setCredentialSubject',
        'holder_did' => 'setHolderDid',
        'expires_at' => 'setExpiresAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'json_ld_context_url' => 'getJsonLdContextUrl',
        'json_schema_url' => 'getJsonSchemaUrl',
        'type_name' => 'getTypeName',
        'credential_subject' => 'getCredentialSubject',
        'holder_did' => 'getHolderDid',
        'expires_at' => 'getExpiresAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('json_ld_context_url', $data ?? [], null);
        $this->setIfExists('json_schema_url', $data ?? [], null);
        $this->setIfExists('type_name', $data ?? [], null);
        $this->setIfExists('credential_subject', $data ?? [], null);
        $this->setIfExists('holder_did', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['json_ld_context_url'] === null) {
            $invalidProperties[] = "'json_ld_context_url' can't be null";
        }
        if ($this->container['json_schema_url'] === null) {
            $invalidProperties[] = "'json_schema_url' can't be null";
        }
        if ($this->container['type_name'] === null) {
            $invalidProperties[] = "'type_name' can't be null";
        }
        if ($this->container['credential_subject'] === null) {
            $invalidProperties[] = "'credential_subject' can't be null";
        }
        if ($this->container['holder_did'] === null) {
            $invalidProperties[] = "'holder_did' can't be null";
        }
        if (!preg_match("/^did:.*$/", $this->container['holder_did'])) {
            $invalidProperties[] = "invalid value for 'holder_did', must be conform to the pattern /^did:.*$/.";
        }

        if ($this->container['expires_at'] === null) {
            $invalidProperties[] = "'expires_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets json_ld_context_url
     *
     * @return string
     */
    public function getJsonLdContextUrl()
    {
        return $this->container['json_ld_context_url'];
    }

    /**
     * Sets json_ld_context_url
     *
     * @param string $json_ld_context_url json_ld_context_url
     *
     * @return self
     */
    public function setJsonLdContextUrl($json_ld_context_url)
    {
        if (is_null($json_ld_context_url)) {
            throw new \InvalidArgumentException('non-nullable json_ld_context_url cannot be null');
        }
        $this->container['json_ld_context_url'] = $json_ld_context_url;

        return $this;
    }

    /**
     * Gets json_schema_url
     *
     * @return string
     */
    public function getJsonSchemaUrl()
    {
        return $this->container['json_schema_url'];
    }

    /**
     * Sets json_schema_url
     *
     * @param string $json_schema_url json_schema_url
     *
     * @return self
     */
    public function setJsonSchemaUrl($json_schema_url)
    {
        if (is_null($json_schema_url)) {
            throw new \InvalidArgumentException('non-nullable json_schema_url cannot be null');
        }
        $this->container['json_schema_url'] = $json_schema_url;

        return $this;
    }

    /**
     * Gets type_name
     *
     * @return string
     */
    public function getTypeName()
    {
        return $this->container['type_name'];
    }

    /**
     * Sets type_name
     *
     * @param string $type_name type_name
     *
     * @return self
     */
    public function setTypeName($type_name)
    {
        if (is_null($type_name)) {
            throw new \InvalidArgumentException('non-nullable type_name cannot be null');
        }
        $this->container['type_name'] = $type_name;

        return $this;
    }

    /**
     * Gets credential_subject
     *
     * @return array<string,mixed>
     */
    public function getCredentialSubject()
    {
        return $this->container['credential_subject'];
    }

    /**
     * Sets credential_subject
     *
     * @param array<string,mixed> $credential_subject credential_subject
     *
     * @return self
     */
    public function setCredentialSubject($credential_subject)
    {
        if (is_null($credential_subject)) {
            throw new \InvalidArgumentException('non-nullable credential_subject cannot be null');
        }
        $this->container['credential_subject'] = $credential_subject;

        return $this;
    }

    /**
     * Gets holder_did
     *
     * @return string
     */
    public function getHolderDid()
    {
        return $this->container['holder_did'];
    }

    /**
     * Sets holder_did
     *
     * @param string $holder_did holder_did
     *
     * @return self
     */
    public function setHolderDid($holder_did)
    {
        if (is_null($holder_did)) {
            throw new \InvalidArgumentException('non-nullable holder_did cannot be null');
        }

        if ((!preg_match("/^did:.*$/", ObjectSerializer::toString($holder_did)))) {
            throw new \InvalidArgumentException("invalid value for \$holder_did when calling SignCredentialInputDtoUnsignedCredentialParams., must conform to the pattern /^did:.*$/.");
        }

        $this->container['holder_did'] = $holder_did;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string $expires_at expires_at
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            throw new \InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


