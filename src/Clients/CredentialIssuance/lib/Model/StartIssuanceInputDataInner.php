<?php
/**
 * StartIssuanceInputDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\CredentialIssuance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\CredentialIssuance\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\CredentialIssuance\ObjectSerializer;

/**
 * StartIssuanceInputDataInner Class Doc Comment
 *
 * @category Class
 * @description Data to be included in issued credential
 * @package  AffinidiTdk\Clients\CredentialIssuance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StartIssuanceInputDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StartIssuanceInput_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'credential_type_id' => 'string',
        'credential_data' => 'array<string,mixed>',
        'status_list_details' => '\AffinidiTdk\Clients\CredentialIssuance\Model\StartIssuanceInputDataInnerStatusListDetailsInner[]',
        'meta_data' => '\AffinidiTdk\Clients\CredentialIssuance\Model\StartIssuanceInputDataInnerMetaData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'credential_type_id' => null,
        'credential_data' => null,
        'status_list_details' => null,
        'meta_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'credential_type_id' => false,
        'credential_data' => false,
        'status_list_details' => false,
        'meta_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'credential_type_id' => 'credentialTypeId',
        'credential_data' => 'credentialData',
        'status_list_details' => 'statusListDetails',
        'meta_data' => 'metaData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'credential_type_id' => 'setCredentialTypeId',
        'credential_data' => 'setCredentialData',
        'status_list_details' => 'setStatusListDetails',
        'meta_data' => 'setMetaData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'credential_type_id' => 'getCredentialTypeId',
        'credential_data' => 'getCredentialData',
        'status_list_details' => 'getStatusListDetails',
        'meta_data' => 'getMetaData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('credential_type_id', $data ?? [], null);
        $this->setIfExists('credential_data', $data ?? [], null);
        $this->setIfExists('status_list_details', $data ?? [], null);
        $this->setIfExists('meta_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['credential_type_id'] === null) {
            $invalidProperties[] = "'credential_type_id' can't be null";
        }
        if ($this->container['credential_data'] === null) {
            $invalidProperties[] = "'credential_data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets credential_type_id
     *
     * @return string
     */
    public function getCredentialTypeId()
    {
        return $this->container['credential_type_id'];
    }

    /**
     * Sets credential_type_id
     *
     * @param string $credential_type_id It is a String that identifies a Credential that is being requested to be issued.
     *
     * @return self
     */
    public function setCredentialTypeId($credential_type_id)
    {
        if (is_null($credential_type_id)) {
            throw new \InvalidArgumentException('non-nullable credential_type_id cannot be null');
        }
        $this->container['credential_type_id'] = $credential_type_id;

        return $this;
    }

    /**
     * Gets credential_data
     *
     * @return array<string,mixed>
     */
    public function getCredentialData()
    {
        return $this->container['credential_data'];
    }

    /**
     * Sets credential_data
     *
     * @param array<string,mixed> $credential_data Object of data to be included in the issued credential ,should  match the credential type
     *
     * @return self
     */
    public function setCredentialData($credential_data)
    {
        if (is_null($credential_data)) {
            throw new \InvalidArgumentException('non-nullable credential_data cannot be null');
        }
        $this->container['credential_data'] = $credential_data;

        return $this;
    }

    /**
     * Gets status_list_details
     *
     * @return \AffinidiTdk\Clients\CredentialIssuance\Model\StartIssuanceInputDataInnerStatusListDetailsInner[]|null
     */
    public function getStatusListDetails()
    {
        return $this->container['status_list_details'];
    }

    /**
     * Sets status_list_details
     *
     * @param \AffinidiTdk\Clients\CredentialIssuance\Model\StartIssuanceInputDataInnerStatusListDetailsInner[]|null $status_list_details Types of status lists to which the credential should be added once issued. If not provided or empty, the credential is not added to any of the status lists.
     *
     * @return self
     */
    public function setStatusListDetails($status_list_details)
    {
        if (is_null($status_list_details)) {
            throw new \InvalidArgumentException('non-nullable status_list_details cannot be null');
        }
        $this->container['status_list_details'] = $status_list_details;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return \AffinidiTdk\Clients\CredentialIssuance\Model\StartIssuanceInputDataInnerMetaData|null
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param \AffinidiTdk\Clients\CredentialIssuance\Model\StartIssuanceInputDataInnerMetaData|null $meta_data meta_data
     *
     * @return self
     */
    public function setMetaData($meta_data)
    {
        if (is_null($meta_data)) {
            throw new \InvalidArgumentException('non-nullable meta_data cannot be null');
        }
        $this->container['meta_data'] = $meta_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


