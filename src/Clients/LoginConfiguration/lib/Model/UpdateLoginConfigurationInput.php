<?php
/**
 * UpdateLoginConfigurationInput
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\LoginConfiguration
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OidcVpAdapterBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\LoginConfiguration\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\LoginConfiguration\ObjectSerializer;

/**
 * UpdateLoginConfigurationInput Class Doc Comment
 *
 * @category Class
 * @package  AffinidiTdk\Clients\LoginConfiguration
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateLoginConfigurationInput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateLoginConfigurationInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'redirect_uris' => 'string[]',
        'post_logout_redirect_uris' => 'string[]',
        'client_secret' => 'string',
        'vp_definition' => 'string',
        'presentation_definition' => 'object',
        'id_token_mapping' => '\AffinidiTdk\Clients\LoginConfiguration\Model\IdTokenMapping',
        'client_metadata' => '\AffinidiTdk\Clients\LoginConfiguration\Model\LoginConfigurationClientMetadataInput',
        'token_endpoint_auth_method' => '\AffinidiTdk\Clients\LoginConfiguration\Model\TokenEndpointAuthMethod',
        'fail_on_mapping_conflict' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'redirect_uris' => null,
        'post_logout_redirect_uris' => null,
        'client_secret' => null,
        'vp_definition' => null,
        'presentation_definition' => null,
        'id_token_mapping' => null,
        'client_metadata' => null,
        'token_endpoint_auth_method' => null,
        'fail_on_mapping_conflict' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'redirect_uris' => false,
        'post_logout_redirect_uris' => false,
        'client_secret' => false,
        'vp_definition' => false,
        'presentation_definition' => false,
        'id_token_mapping' => false,
        'client_metadata' => false,
        'token_endpoint_auth_method' => false,
        'fail_on_mapping_conflict' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'redirect_uris' => 'redirectUris',
        'post_logout_redirect_uris' => 'postLogoutRedirectUris',
        'client_secret' => 'clientSecret',
        'vp_definition' => 'vpDefinition',
        'presentation_definition' => 'presentationDefinition',
        'id_token_mapping' => 'idTokenMapping',
        'client_metadata' => 'clientMetadata',
        'token_endpoint_auth_method' => 'tokenEndpointAuthMethod',
        'fail_on_mapping_conflict' => 'failOnMappingConflict'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'redirect_uris' => 'setRedirectUris',
        'post_logout_redirect_uris' => 'setPostLogoutRedirectUris',
        'client_secret' => 'setClientSecret',
        'vp_definition' => 'setVpDefinition',
        'presentation_definition' => 'setPresentationDefinition',
        'id_token_mapping' => 'setIdTokenMapping',
        'client_metadata' => 'setClientMetadata',
        'token_endpoint_auth_method' => 'setTokenEndpointAuthMethod',
        'fail_on_mapping_conflict' => 'setFailOnMappingConflict'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'redirect_uris' => 'getRedirectUris',
        'post_logout_redirect_uris' => 'getPostLogoutRedirectUris',
        'client_secret' => 'getClientSecret',
        'vp_definition' => 'getVpDefinition',
        'presentation_definition' => 'getPresentationDefinition',
        'id_token_mapping' => 'getIdTokenMapping',
        'client_metadata' => 'getClientMetadata',
        'token_endpoint_auth_method' => 'getTokenEndpointAuthMethod',
        'fail_on_mapping_conflict' => 'getFailOnMappingConflict'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('redirect_uris', $data ?? [], null);
        $this->setIfExists('post_logout_redirect_uris', $data ?? [], null);
        $this->setIfExists('client_secret', $data ?? [], null);
        $this->setIfExists('vp_definition', $data ?? [], null);
        $this->setIfExists('presentation_definition', $data ?? [], null);
        $this->setIfExists('id_token_mapping', $data ?? [], null);
        $this->setIfExists('client_metadata', $data ?? [], null);
        $this->setIfExists('token_endpoint_auth_method', $data ?? [], null);
        $this->setIfExists('fail_on_mapping_conflict', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name User defined login configuration name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets redirect_uris
     *
     * @return string[]|null
     */
    public function getRedirectUris()
    {
        return $this->container['redirect_uris'];
    }

    /**
     * Sets redirect_uris
     *
     * @param string[]|null $redirect_uris OAuth 2.0 Redirect URIs
     *
     * @return self
     */
    public function setRedirectUris($redirect_uris)
    {
        if (is_null($redirect_uris)) {
            throw new \InvalidArgumentException('non-nullable redirect_uris cannot be null');
        }
        $this->container['redirect_uris'] = $redirect_uris;

        return $this;
    }

    /**
     * Gets post_logout_redirect_uris
     *
     * @return string[]|null
     */
    public function getPostLogoutRedirectUris()
    {
        return $this->container['post_logout_redirect_uris'];
    }

    /**
     * Sets post_logout_redirect_uris
     *
     * @param string[]|null $post_logout_redirect_uris Post Logout Redirect URIs, Used to redirect the user's browser to a specified URL after the logout process is complete. Must match the domain, port, scheme of at least one of the registered redirect URIs
     *
     * @return self
     */
    public function setPostLogoutRedirectUris($post_logout_redirect_uris)
    {
        if (is_null($post_logout_redirect_uris)) {
            throw new \InvalidArgumentException('non-nullable post_logout_redirect_uris cannot be null');
        }
        $this->container['post_logout_redirect_uris'] = $post_logout_redirect_uris;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string|null
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string|null $client_secret OAuth2 client secret
     *
     * @return self
     */
    public function setClientSecret($client_secret)
    {
        if (is_null($client_secret)) {
            throw new \InvalidArgumentException('non-nullable client_secret cannot be null');
        }
        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets vp_definition
     *
     * @return string|null
     */
    public function getVpDefinition()
    {
        return $this->container['vp_definition'];
    }

    /**
     * Sets vp_definition
     *
     * @param string|null $vp_definition VP definition in JSON stringify format
     *
     * @return self
     */
    public function setVpDefinition($vp_definition)
    {
        if (is_null($vp_definition)) {
            throw new \InvalidArgumentException('non-nullable vp_definition cannot be null');
        }
        $this->container['vp_definition'] = $vp_definition;

        return $this;
    }

    /**
     * Gets presentation_definition
     *
     * @return object|null
     */
    public function getPresentationDefinition()
    {
        return $this->container['presentation_definition'];
    }

    /**
     * Sets presentation_definition
     *
     * @param object|null $presentation_definition Presentation Definition
     *
     * @return self
     */
    public function setPresentationDefinition($presentation_definition)
    {
        if (is_null($presentation_definition)) {
            throw new \InvalidArgumentException('non-nullable presentation_definition cannot be null');
        }
        $this->container['presentation_definition'] = $presentation_definition;

        return $this;
    }

    /**
     * Gets id_token_mapping
     *
     * @return \AffinidiTdk\Clients\LoginConfiguration\Model\IdTokenMapping|null
     */
    public function getIdTokenMapping()
    {
        return $this->container['id_token_mapping'];
    }

    /**
     * Sets id_token_mapping
     *
     * @param \AffinidiTdk\Clients\LoginConfiguration\Model\IdTokenMapping|null $id_token_mapping id_token_mapping
     *
     * @return self
     */
    public function setIdTokenMapping($id_token_mapping)
    {
        if (is_null($id_token_mapping)) {
            throw new \InvalidArgumentException('non-nullable id_token_mapping cannot be null');
        }
        $this->container['id_token_mapping'] = $id_token_mapping;

        return $this;
    }

    /**
     * Gets client_metadata
     *
     * @return \AffinidiTdk\Clients\LoginConfiguration\Model\LoginConfigurationClientMetadataInput|null
     */
    public function getClientMetadata()
    {
        return $this->container['client_metadata'];
    }

    /**
     * Sets client_metadata
     *
     * @param \AffinidiTdk\Clients\LoginConfiguration\Model\LoginConfigurationClientMetadataInput|null $client_metadata client_metadata
     *
     * @return self
     */
    public function setClientMetadata($client_metadata)
    {
        if (is_null($client_metadata)) {
            throw new \InvalidArgumentException('non-nullable client_metadata cannot be null');
        }
        $this->container['client_metadata'] = $client_metadata;

        return $this;
    }

    /**
     * Gets token_endpoint_auth_method
     *
     * @return \AffinidiTdk\Clients\LoginConfiguration\Model\TokenEndpointAuthMethod|null
     */
    public function getTokenEndpointAuthMethod()
    {
        return $this->container['token_endpoint_auth_method'];
    }

    /**
     * Sets token_endpoint_auth_method
     *
     * @param \AffinidiTdk\Clients\LoginConfiguration\Model\TokenEndpointAuthMethod|null $token_endpoint_auth_method token_endpoint_auth_method
     *
     * @return self
     */
    public function setTokenEndpointAuthMethod($token_endpoint_auth_method)
    {
        if (is_null($token_endpoint_auth_method)) {
            throw new \InvalidArgumentException('non-nullable token_endpoint_auth_method cannot be null');
        }
        $this->container['token_endpoint_auth_method'] = $token_endpoint_auth_method;

        return $this;
    }

    /**
     * Gets fail_on_mapping_conflict
     *
     * @return bool|null
     */
    public function getFailOnMappingConflict()
    {
        return $this->container['fail_on_mapping_conflict'];
    }

    /**
     * Sets fail_on_mapping_conflict
     *
     * @param bool|null $fail_on_mapping_conflict Interrupts login process if duplications of data fields names will be found
     *
     * @return self
     */
    public function setFailOnMappingConflict($fail_on_mapping_conflict)
    {
        if (is_null($fail_on_mapping_conflict)) {
            throw new \InvalidArgumentException('non-nullable fail_on_mapping_conflict cannot be null');
        }
        $this->container['fail_on_mapping_conflict'] = $fail_on_mapping_conflict;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


